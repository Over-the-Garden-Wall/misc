%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: Seung_EDfig9.eps
%%Creator: Adobe Illustrator(R) 17.1
%%For: Jinseop Kim
%%CreationDate: 2/10/14
%%BoundingBox: 0 0 512 406
%%HiResBoundingBox: 0 0 511.2198 405.1910
%%CropBox: 0 0 511.2198 405.1910
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 17.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 17.1.0 x273 R agm 4.7709 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.5-c014 79.151739, 2013/04/03-12:12:15        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmp:CreatorTool>Adobe Illustrator CC (Macintosh)</xmp:CreatorTool>
         <xmp:CreateDate>2014-02-10T21:12:27-05:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>204</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAzAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FWIfmLNqNvH5fns&#xA;7+4s1Ot6dBcwQFFSeKa5RWSUlTJxp2VgDX4qjFU4Gpa3Nf30FrY2z29nKsKzS3UkbuWhjmJMa28g&#xA;UD1afbOKqv1jzJ/ywWf/AEmS/wDZLirvrHmT/lgs/wDpMl/7JcVd9Y8yf8sFn/0mS/8AZLirvrHm&#xA;T/lgs/8ApMl/7JcVd9Y8yf8ALBZ/9Jkv/ZLirvrHmT/lgs/+kyX/ALJcVd9Y8yf8sFn/ANJkv/ZL&#xA;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&#xA;xV2KuxV//9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmp:MetadataDate>2014-02-10T21:12:27-05:00</xmp:MetadataDate>
         <xmp:ModifyDate>2014-02-10T21:12:27-05:00</xmp:ModifyDate>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>527.000000</stDim:w>
            <stDim:h>409.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Helvetica</stFnt:fontName>
                  <stFnt:fontFamily>Helvetica</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>9.0d3e2</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Helvetica.dfont</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Symbol</stFnt:fontName>
                  <stFnt:fontFamily>Symbol</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>6.1d7e3</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Symbol.ttf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <dc:format>application/postscript</dc:format>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:29034611-ebd1-46b5-9894-9d63de44e44d</stEvt:instanceID>
                  <stEvt:when>2014-02-10T21:12:27-05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <xmpMM:DerivedFrom rdf:parseType="Resource"/>
         <xmpMM:DocumentID>xmp.did:29034611-ebd1-46b5-9894-9d63de44e44d</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:29034611-ebd1-46b5-9894-9d63de44e44d</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:29034611-ebd1-46b5-9894-9d63de44e44d</xmpMM:OriginalDocumentID>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -405.191 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 405.191 li
511.22 405.191 li
511.22 0 li
cp
clp
51.9502 361.127 mo
51.9502 8.79443 li
498.701 8.79443 li
498.701 361.127 li
51.9502 361.127 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
ef
.5 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
51.9502 361.127 mo
51.9502 8.79443 li
498.701 8.79443 li
498.701 361.127 li
51.9502 361.127 li
@
51.9502 8.79443 mo
51.9502 13.2114 li
51.9502 361.127 mo
51.9502 356.627 li
51.9502 361.127 mo
51.9502 8.79443 li
51.9502 361.127 mo
498.701 361.127 li
498.701 361.127 mo
498.701 8.79443 li
51.9502 361.127 mo
51.9502 8.79443 li
51.9502 8.79443 mo
498.701 8.79443 li
51.9502 361.127 mo
498.701 361.127 li
0 0 0 rgb
@
.137255 .121569 .12549 rgb
%ADOBeginSubsetFont: Helvetica Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Helvetica def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 0 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 48 /zero putdef/FontBBox {-951 -481 1446 1122} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/.notdef <1C60D8A8C9B66F631635D26BA635582B3FDE9B3DD75794781396E648A7CA97DB1343CA> |-/zero <1C60D8A8C9B7EF322BB70D1045F9F84CF5A9E636DA48B0B84345CFB17CDCD64AA529BD23C358113A6F12A7F927F67801E7716DEDB8FBB50D28956279879C3943A67386E5304D963AB3E064E7022317006AA79A8777799C5D39502A7CB330EAEEC28837821C5437B109C741C1D7BCD8EEC785ED017624EE945A52A677F5B0E3B0C4781A3901> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/WJGNCK+Helvetica /Helvetica findfont ct_VMDictPut/WJGNCK+Helvetica*1 [48{/.notdef}rp /zero 207{/.notdef}rp]WJGNCK+Helvetica nfWJGNCK+Helvetica*1 [18 0 0 -18 0 0 ]msf46.9556 380.713 mo(0)sh200.867 8.79443 mo
200.867 13.2114 li
200.867 361.127 mo
200.867 356.627 li
0 0 0 rgb
@
.137255 .121569 .12549 rgb
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.systemdict beginWJGNCK+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/period <1C60D8A8C9B854D0E3687C43D46768E11610> |-/five <1C60D8A8C9B7EF3277A9C7C54B35CB479E4C110330EAD203F40A20826414A4CC0E90EF4AAF68DCFEF4ABE6CFF07A7C5FBDADC90A7F87ECB382B602F56451722980F3A3AC74E582BA9C9CEC3027EC489F453112D8FBBD217B656538AC90D034F616E885784C813B1555F6DEF92ECF082193A9672305F8A984DE35F68D1502A8C10EB08C528E24E38813C68D1F86D01BCA9E> |-systemdict /gcheck known {setglobal} if end {end} ifendWJGNCK+Helvetica /Encoding getdup 46 /period putdup 53 /five putpop%ADOEndSubsetFont
/WJGNCK+Helvetica*1 [46{/.notdef}rp /period /.notdef /zero 4{/.notdef}rp /five 202{/.notdef}rp]WJGNCK+Helvetica nfWJGNCK+Helvetica*1 [18 0 0 -18 0 0 ]msf188.362 380.713 mo(0.5)sh349.783 8.79443 mo
349.783 13.2114 li
349.783 361.127 mo
349.783 356.627 li
0 0 0 rgb
@
.137255 .121569 .12549 rgb
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.systemdict beginWJGNCK+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/one <1C60D8A8C9B7EF322B8DEEDAE6F72EF3709E16C7A593AF17F17D72A3907C7468090579C66DE0263BFE> |-systemdict /gcheck known {setglobal} if end {end} ifendWJGNCK+Helvetica /Encoding getdup 49 /one putpop%ADOEndSubsetFont
/WJGNCK+Helvetica*1 [46{/.notdef}rp /period /.notdef /zero /one 3{/.notdef}rp /five 202{/.notdef}rp]WJGNCK+Helvetica nfWJGNCK+Helvetica*1 [18 0 0 -18 0 0 ]msf344.784 380.713 mo(1)sh498.701 8.79443 mo
498.701 13.2114 li
498.701 361.127 mo
498.701 356.627 li
0 0 0 rgb
@
.137255 .121569 .12549 rgb
WJGNCK+Helvetica*1 [18 0 0 -18 0 0 ]msf486.198 380.713 mo(1.5)sh498.701 361.127 mo
494.201 361.127 li
51.9502 361.127 mo
56.3672 361.127 li
0 0 0 rgb
@
.137255 .121569 .12549 rgb
WJGNCK+Helvetica*1 [18 0 0 -18 0 0 ]msf39.0337 367.792 mo(0)sh498.701 290.627 mo
494.201 290.627 li
51.9502 290.627 mo
56.3672 290.627 li
0 0 0 rgb
@
.137255 .121569 .12549 rgb
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.systemdict beginWJGNCK+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/two <1C60D8A8C9B7EF327699F81B0CD59DC4BD38D48AF11B5B9C1D7787A22BDC09D7BCED9A76C2312055A28AC829584109043EE366AF8632D6D62E9BBD6A4357093750D4015EA59C9F538C44C55AD0DB14FEE0C7267845EB7EFBD514024AA1A03530A8941AD7B5F508335B2FDCA37E6B0627146A6F144DB9DD7DCA6BE86290FB46DD6A2918F4C2C2BDEECA159D78> |-systemdict /gcheck known {setglobal} if end {end} ifendWJGNCK+Helvetica /Encoding getdup 50 /two putpop%ADOEndSubsetFont
/WJGNCK+Helvetica*1 [46{/.notdef}rp /period /.notdef /zero /one /two 2{/.notdef}rp /five 202{/.notdef}rp]WJGNCK+Helvetica nfWJGNCK+Helvetica*1 [18 0 0 -18 0 0 ]msf24.0337 297.292 mo(0.2)sh498.701 220.127 mo
494.201 220.127 li
51.9502 220.127 mo
56.3672 220.127 li
0 0 0 rgb
@
.137255 .121569 .12549 rgb
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.systemdict beginWJGNCK+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/four <1C60D8A8C9B7EF32298E3DD46F18108137336D1A5C627A90D059BB18158BA2A55FF5DE20CE460964DAF45C08A7D9820A784F4A44F7E1> |-systemdict /gcheck known {setglobal} if end {end} ifendWJGNCK+Helvetica /Encoding getdup 52 /four putpop%ADOEndSubsetFont
/WJGNCK+Helvetica*1 [46{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four /five 202{/.notdef}rp]WJGNCK+Helvetica nfWJGNCK+Helvetica*1 [18 0 0 -18 0 0 ]msf24.0337 226.792 mo(0.4)sh498.701 149.711 mo
494.201 149.711 li
51.9502 149.711 mo
56.3672 149.711 li
0 0 0 rgb
@
.137255 .121569 .12549 rgb
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.systemdict beginWJGNCK+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/six <1C60D8A8C9B7EF322BACEC3D6ABEF2D493EDC493AA22ED42125C47DF2396DE843240A24151C3116F0DCEE068EC75B404A70B0E3A92C2307D093030C4F08B5CC0A75F4F4D7C70C5CD3B07E718D5DA84710CE02FF093BE8B5ED477F329DF9AC8554D46651B2A99890C549B5152AB0899BB31DC610CEE59FE1F4C3BE037BFF7F7AE7EDC6D596E9E9398287209A7C703150F7EA84F1C65DCD68CCC47A3B7F9EF77F610D53784F89B61AB4160F9D214F618A6C0032B66C3DB575FE49E073B7AB1C1C6CA> |-systemdict /gcheck known {setglobal} if end {end} ifendWJGNCK+Helvetica /Encoding getdup 54 /six putpop%ADOEndSubsetFont
/WJGNCK+Helvetica*1 [46{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four /five /six 201{/.notdef}rp]WJGNCK+Helvetica nfWJGNCK+Helvetica*1 [18 0 0 -18 0 0 ]msf24.0337 156.377 mo(0.6)sh498.701 79.2114 mo
494.201 79.2114 li
51.9502 79.2114 mo
56.3672 79.2114 li
0 0 0 rgb
@
.137255 .121569 .12549 rgb
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.systemdict beginWJGNCK+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/eight <1C60D8A8C9B7EF322BB1E6B7658B273FB04B6EA2FDD83BE014315CEA310C9045661E4654F5FAA18E921C35D5D5266AB0AB839D962ABE974A291E63893114CACA79253F9F2FA5DBD832A15E9A146C3FAF70E186074467C5FF9BFF3446DA2979E197C33ECF2E6672D0ABB4DD84DADA6F0875D027C1012708E022D3B91B078729D3EB37FF9AB4379F6AE8761C6A64E65D5782F4A15C32B5788322C1277C7EEACA49FCEF1A946497EBAE7710FA41A32E95C02F9037E734AB7501DA6FA4D1255B1B5E2A30AD357C72139096879BB9225AA54D6163D99B65B907C933335C31755E7599F49EDF67E30B707AA1BB3DFB155476D77FA4345C2EDAF4F74461> |-systemdict /gcheck known {setglobal} if end {end} ifendWJGNCK+Helvetica /Encoding getdup 56 /eight putpop%ADOEndSubsetFont
/WJGNCK+Helvetica*1 [46{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four /five /six /.notdef /eight 199{/.notdef}rp]WJGNCK+Helvetica nfWJGNCK+Helvetica*1 [18 0 0 -18 0 0 ]msf24.0337 85.8696 mo(0.8)sh498.701 8.79443 mo
494.201 8.79443 li
51.9502 8.79443 mo
56.3672 8.79443 li
0 0 0 rgb
@
.137255 .121569 .12549 rgb
WJGNCK+Helvetica*1 [18 0 0 -18 0 0 ]msf39.0337 15.4556 mo(1)sh498.701 361.127 mo
498.701 8.79443 li
51.9502 361.127 mo
51.9502 8.79443 li
51.9502 8.79443 mo
498.701 8.79443 li
51.9502 361.127 mo
498.701 361.127 li
0 0 0 rgb
@
gsave
51.9502 8.79443 mo
51.9502 361.211 li
498.783 361.211 li
498.783 8.79443 li
51.9502 8.79443 li
cp
clp
2 lw
51.9502 361.127 mo
52.3672 359.461 li
52.8672 357.795 li
53.3672 356.127 li
53.7837 354.545 li
54.2837 352.877 li
54.7837 351.295 li
55.2002 349.711 li
55.7002 348.045 li
56.2002 346.461 li
56.2002 346.461 mo
56.6172 344.877 li
57.1172 343.377 li
57.6172 341.795 li
58.0337 340.211 li
58.5337 338.711 li
59.0337 337.127 li
59.5337 335.627 li
59.9502 334.045 li
60.4502 332.545 li
60.9502 331.045 li
61.3667 329.545 li
61.8667 328.045 li
62.3667 326.627 li
62.7837 325.127 li
63.2837 323.627 li
63.7837 322.211 li
64.2002 320.795 li
64.7002 319.295 li
65.2002 317.877 li
65.6167 316.461 li
66.1167 315.045 li
66.6167 313.627 li
67.1167 312.295 li
67.5337 310.877 li
68.0337 309.545 li
68.5337 308.127 li
68.9502 306.795 li
69.4502 305.461 li
69.9502 304.127 li
70.3667 302.795 li
70.8667 301.461 li
71.3667 300.127 li
71.7837 298.795 li
72.2837 297.545 li
72.7837 296.211 li
73.2002 294.961 li
73.7002 293.711 li
74.2002 292.377 li
74.7002 291.127 li
75.1167 289.877 li
75.6167 288.711 li
76.1167 287.461 li
76.5337 286.211 li
77.0337 285.045 li
77.5337 283.795 li
77.9502 282.627 li
78.4502 281.461 li
78.9502 280.295 li
79.3667 279.127 li
79.8667 277.961 li
80.3667 276.795 li
80.7832 275.627 li
81.2832 274.545 li
81.7832 273.377 li
82.2832 272.295 li
82.7002 271.211 li
83.2002 270.127 li
83.7002 269.045 li
84.1167 267.961 li
84.6167 266.877 li
85.1167 265.795 li
85.5332 264.795 li
86.0332 263.711 li
86.5332 262.711 li
86.9502 261.627 li
87.4502 260.627 li
87.9502 259.627 li
88.3667 258.627 li
88.8667 257.627 li
89.3667 256.627 li
89.8667 255.711 li
90.2832 254.711 li
90.7832 253.795 li
91.2832 252.795 li
91.6997 251.877 li
92.1997 250.961 li
92.6997 250.045 li
93.1167 249.127 li
93.6167 248.211 li
94.1167 247.295 li
94.5332 246.377 li
95.0332 245.545 li
95.5332 244.627 li
96.0332 243.795 li
96.4497 242.877 li
96.9497 242.045 li
97.4497 241.211 li
97.8667 240.377 li
98.3667 239.545 li
98.8667 238.711 li
99.2832 237.961 li
99.7832 237.127 li
100.283 236.377 li
100.7 235.545 li
101.2 234.795 li
101.7 234.045 li
102.117 233.211 li
102.617 232.461 li
103.117 231.711 li
103.117 231.711 mo
103.617 231.045 li
104.034 230.295 li
104.534 229.545 li
105.034 228.877 li
105.45 228.127 li
105.95 227.461 li
106.45 226.711 li
106.867 226.045 li
107.367 225.377 li
107.867 224.711 li
108.284 224.045 li
108.784 223.377 li
109.284 222.795 li
109.7 222.127 li
110.2 221.461 li
110.7 220.877 li
111.2 220.211 li
111.617 219.627 li
112.117 219.045 li
112.617 218.461 li
113.034 217.877 li
113.534 217.295 li
114.034 216.711 li
114.45 216.127 li
114.95 215.545 li
115.45 215.045 li
115.867 214.461 li
116.367 213.961 li
116.867 213.377 li
117.284 212.877 li
117.784 212.377 li
118.284 211.877 li
118.784 211.377 li
119.2 210.877 li
119.7 210.377 li
120.2 209.877 li
120.617 209.377 li
121.117 208.961 li
121.617 208.461 li
122.034 208.045 li
122.534 207.545 li
123.034 207.127 li
123.45 206.711 li
123.95 206.211 li
124.45 205.795 li
124.867 205.377 li
125.367 204.961 li
125.867 204.545 li
126.367 204.211 li
126.783 203.795 li
127.283 203.377 li
127.783 203.045 li
128.2 202.627 li
128.7 202.295 li
129.2 201.877 li
129.617 201.545 li
130.117 201.211 li
130.617 200.877 li
131.033 200.545 li
131.533 200.128 li
132.033 199.878 li
132.45 199.544 li
132.95 199.211 li
133.45 198.878 li
133.95 198.544 li
134.367 198.294 li
134.867 197.961 li
135.367 197.711 li
135.783 197.378 li
136.283 197.128 li
136.783 196.878 li
137.2 196.544 li
137.7 196.294 li
138.2 196.044 li
138.617 195.794 li
139.117 195.544 li
139.617 195.294 li
140.117 195.044 li
140.533 194.794 li
141.033 194.628 li
141.533 194.378 li
141.95 194.128 li
142.45 193.961 li
142.95 193.711 li
143.367 193.544 li
143.867 193.294 li
144.367 193.128 li
144.783 192.961 li
145.283 192.711 li
145.783 192.544 li
146.2 192.378 li
146.7 192.211 li
147.2 192.044 li
147.7 191.878 li
148.117 191.711 li
148.617 191.544 li
149.117 191.378 li
149.533 191.211 li
150.033 191.128 li
150.034 191.128 mo
150.534 190.961 li
150.95 190.794 li
151.45 190.711 li
151.95 190.544 li
152.367 190.461 li
152.867 190.294 li
153.367 190.211 li
153.784 190.128 li
154.284 189.961 li
154.784 189.878 li
155.284 189.794 li
155.7 189.711 li
156.2 189.544 li
156.7 189.461 li
157.117 189.378 li
157.617 189.294 li
158.117 189.211 li
158.534 189.128 li
159.034 189.128 li
159.534 189.044 li
159.95 188.961 li
160.45 188.878 li
160.95 188.794 li
161.367 188.794 li
161.867 188.711 li
162.367 188.711 li
162.867 188.628 li
163.284 188.544 li
163.784 188.544 li
164.284 188.544 li
164.7 188.461 li
165.2 188.461 li
165.7 188.378 li
166.117 188.378 li
166.617 188.378 li
167.117 188.378 li
167.534 188.294 li
168.034 188.294 li
168.534 188.294 li
168.951 188.294 li
169.451 188.294 li
169.951 188.294 li
170.451 188.294 li
170.867 188.294 li
171.367 188.294 li
171.867 188.294 li
172.284 188.294 li
172.784 188.294 li
173.284 188.294 li
173.701 188.378 li
174.201 188.378 li
174.701 188.378 li
175.117 188.378 li
175.617 188.461 li
176.117 188.461 li
176.534 188.461 li
177.034 188.544 li
177.534 188.544 li
178.034 188.544 li
178.451 188.628 li
178.951 188.628 li
179.451 188.711 li
179.867 188.711 li
180.367 188.794 li
180.867 188.878 li
181.284 188.878 li
181.784 188.961 li
182.284 189.044 li
182.701 189.044 li
183.201 189.128 li
183.701 189.211 li
184.201 189.211 li
184.617 189.294 li
185.117 189.378 li
185.617 189.461 li
186.034 189.544 li
186.534 189.544 li
187.034 189.628 li
187.451 189.711 li
187.951 189.794 li
188.451 189.878 li
188.867 189.961 li
189.367 190.044 li
189.867 190.128 li
190.284 190.211 li
190.784 190.294 li
191.284 190.378 li
191.784 190.461 li
192.201 190.544 li
192.701 190.628 li
193.201 190.711 li
193.617 190.794 li
194.117 190.878 li
194.617 191.044 li
195.034 191.128 li
195.534 191.211 li
196.034 191.294 li
196.451 191.378 li
196.951 191.544 li
196.95 191.544 mo
197.45 191.628 li
197.867 191.711 li
198.367 191.794 li
198.867 191.961 li
199.367 192.044 li
199.784 192.128 li
200.284 192.294 li
200.784 192.378 li
201.2 192.461 li
201.7 192.628 li
202.2 192.711 li
202.617 192.794 li
203.117 192.961 li
203.617 193.044 li
204.034 193.211 li
204.534 193.294 li
205.034 193.378 li
205.45 193.544 li
205.95 193.628 li
206.45 193.794 li
206.95 193.878 li
207.367 194.044 li
207.867 194.128 li
208.367 194.294 li
208.784 194.378 li
209.284 194.544 li
209.784 194.628 li
210.2 194.794 li
210.7 194.961 li
211.2 195.044 li
211.617 195.211 li
212.117 195.294 li
212.617 195.461 li
213.034 195.544 li
213.534 195.711 li
214.034 195.878 li
214.534 195.961 li
214.95 196.128 li
215.45 196.294 li
215.95 196.378 li
216.367 196.544 li
216.867 196.711 li
217.367 196.794 li
217.784 196.961 li
218.284 197.128 li
218.784 197.211 li
219.2 197.378 li
219.7 197.544 li
220.2 197.628 li
220.617 197.794 li
221.117 197.961 li
221.617 198.128 li
222.117 198.211 li
222.534 198.378 li
223.034 198.544 li
223.534 198.711 li
223.95 198.794 li
224.45 198.961 li
224.95 199.128 li
225.367 199.294 li
225.867 199.378 li
226.367 199.544 li
226.784 199.711 li
227.284 199.878 li
227.784 200.044 li
228.284 200.128 li
228.7 200.294 li
229.2 200.461 li
229.7 200.628 li
230.117 200.795 li
230.617 200.961 li
231.117 201.045 li
231.534 201.211 li
232.034 201.377 li
232.534 201.545 li
232.95 201.711 li
233.45 201.877 li
233.95 201.961 li
234.367 202.127 li
234.867 202.295 li
235.367 202.461 li
235.867 202.627 li
236.284 202.795 li
236.784 202.877 li
237.284 203.045 li
237.7 203.211 li
238.2 203.377 li
238.7 203.545 li
239.117 203.711 li
239.617 203.877 li
240.117 204.045 li
240.534 204.127 li
241.034 204.295 li
241.534 204.461 li
241.95 204.627 li
242.45 204.795 li
242.95 204.961 li
243.45 205.127 li
243.867 205.295 li
243.867 205.295 mo
244.367 205.461 li
244.867 205.545 li
245.284 205.711 li
245.784 205.877 li
246.284 206.045 li
246.7 206.211 li
247.2 206.377 li
247.7 206.545 li
248.117 206.711 li
248.617 206.877 li
249.117 207.045 li
249.534 207.211 li
250.034 207.295 li
250.534 207.461 li
251.034 207.627 li
251.45 207.795 li
251.95 207.961 li
252.45 208.127 li
252.867 208.295 li
253.367 208.461 li
253.867 208.627 li
254.284 208.795 li
254.784 208.961 li
255.284 209.045 li
255.701 209.211 li
256.201 209.377 li
256.701 209.545 li
257.117 209.711 li
257.617 209.877 li
258.117 210.045 li
258.617 210.211 li
259.033 210.377 li
259.533 210.545 li
260.033 210.711 li
260.451 210.795 li
260.951 210.961 li
261.451 211.127 li
261.867 211.295 li
262.367 211.461 li
262.867 211.627 li
263.283 211.795 li
263.783 211.961 li
264.283 212.127 li
264.783 212.295 li
265.201 212.461 li
265.701 212.545 li
266.201 212.711 li
266.617 212.877 li
267.117 213.045 li
267.617 213.211 li
268.033 213.377 li
268.533 213.545 li
269.033 213.711 li
269.451 213.877 li
269.951 214.045 li
270.451 214.211 li
270.867 214.295 li
271.367 214.461 li
271.867 214.627 li
272.367 214.795 li
272.783 214.961 li
273.283 215.127 li
273.783 215.295 li
274.201 215.461 li
274.701 215.627 li
275.201 215.711 li
275.617 215.877 li
276.117 216.045 li
276.617 216.211 li
277.033 216.377 li
277.533 216.545 li
278.033 216.711 li
278.451 216.877 li
278.951 216.961 li
279.451 217.127 li
279.951 217.295 li
280.367 217.461 li
280.867 217.627 li
281.367 217.795 li
281.783 217.961 li
282.283 218.127 li
282.783 218.211 li
283.201 218.377 li
283.701 218.545 li
284.201 218.711 li
284.617 218.877 li
285.117 219.045 li
285.617 219.211 li
286.033 219.295 li
286.533 219.461 li
287.033 219.627 li
287.533 219.795 li
287.951 219.961 li
288.451 220.127 li
288.951 220.211 li
289.367 220.377 li
289.867 220.545 li
290.367 220.711 li
290.783 220.877 li
290.783 220.877 mo
291.283 221.045 li
291.783 221.127 li
292.201 221.295 li
292.701 221.461 li
293.201 221.627 li
293.617 221.795 li
294.117 221.961 li
294.617 222.045 li
295.117 222.211 li
295.533 222.377 li
296.033 222.545 li
296.533 222.711 li
296.951 222.795 li
297.451 222.961 li
297.951 223.127 li
298.367 223.295 li
298.867 223.461 li
299.367 223.545 li
299.783 223.711 li
300.283 223.877 li
300.783 224.045 li
301.201 224.211 li
301.701 224.295 li
302.201 224.461 li
302.701 224.627 li
303.117 224.795 li
303.617 224.961 li
304.117 225.045 li
304.533 225.211 li
305.033 225.377 li
305.533 225.545 li
305.951 225.627 li
306.451 225.795 li
306.951 225.961 li
307.367 226.127 li
307.867 226.211 li
308.367 226.377 li
308.867 226.545 li
309.283 226.711 li
309.783 226.795 li
310.283 226.961 li
310.701 227.127 li
311.201 227.295 li
311.701 227.377 li
312.117 227.545 li
312.617 227.711 li
313.117 227.877 li
313.533 227.961 li
314.033 228.127 li
314.533 228.295 li
314.951 228.377 li
315.451 228.545 li
315.951 228.711 li
316.451 228.877 li
316.867 228.961 li
317.367 229.127 li
317.867 229.295 li
318.283 229.377 li
318.783 229.545 li
319.283 229.711 li
319.701 229.795 li
320.201 229.961 li
320.701 230.127 li
321.117 230.295 li
321.617 230.377 li
322.117 230.545 li
322.533 230.711 li
323.033 230.795 li
323.533 230.961 li
324.033 231.127 li
324.451 231.211 li
324.951 231.377 li
325.451 231.545 li
325.867 231.627 li
326.367 231.795 li
326.867 231.961 li
327.283 232.045 li
327.783 232.211 li
328.283 232.377 li
328.701 232.461 li
329.201 232.627 li
329.701 232.795 li
330.117 232.877 li
330.617 233.045 li
331.117 233.127 li
331.617 233.295 li
332.033 233.461 li
332.533 233.545 li
333.033 233.711 li
333.451 233.877 li
333.951 233.961 li
334.451 234.127 li
334.867 234.211 li
335.367 234.377 li
335.867 234.545 li
336.283 234.627 li
336.783 234.795 li
337.283 234.877 li
337.701 235.045 li
337.701 235.045 mo
338.201 235.211 li
338.701 235.295 li
339.201 235.461 li
339.617 235.545 li
340.117 235.711 li
340.617 235.877 li
341.033 235.961 li
341.533 236.127 li
342.033 236.211 li
342.451 236.377 li
342.951 236.545 li
343.451 236.627 li
343.867 236.795 li
344.367 236.877 li
344.867 237.045 li
345.283 237.127 li
345.783 237.295 li
346.283 237.377 li
346.783 237.545 li
347.201 237.711 li
347.701 237.795 li
348.201 237.961 li
348.617 238.045 li
349.117 238.211 li
349.617 238.295 li
350.033 238.461 li
350.533 238.545 li
351.033 238.711 li
351.451 238.795 li
351.951 238.961 li
352.451 239.127 li
352.951 239.211 li
353.367 239.377 li
353.867 239.461 li
354.367 239.627 li
354.783 239.711 li
355.283 239.877 li
355.783 239.961 li
356.201 240.127 li
356.701 240.211 li
357.201 240.377 li
357.617 240.461 li
358.117 240.627 li
358.617 240.711 li
359.033 240.877 li
359.533 240.961 li
360.033 241.127 li
360.533 241.211 li
360.951 241.377 li
361.451 241.461 li
361.951 241.545 li
362.367 241.711 li
362.867 241.795 li
363.367 241.961 li
363.783 242.045 li
364.283 242.211 li
364.783 242.295 li
365.201 242.461 li
365.701 242.545 li
366.201 242.711 li
366.617 242.795 li
367.117 242.961 li
367.617 243.045 li
368.117 243.127 li
368.533 243.295 li
369.033 243.377 li
369.533 243.545 li
369.951 243.627 li
370.451 243.795 li
370.951 243.877 li
371.367 243.961 li
371.867 244.127 li
372.367 244.211 li
372.783 244.377 li
373.283 244.461 li
373.783 244.627 li
374.201 244.711 li
374.701 244.795 li
375.201 244.961 li
375.701 245.045 li
376.117 245.211 li
376.617 245.295 li
377.117 245.377 li
377.533 245.545 li
378.033 245.627 li
378.533 245.795 li
378.951 245.877 li
379.451 245.961 li
379.951 246.127 li
380.367 246.211 li
380.867 246.377 li
381.367 246.461 li
381.783 246.545 li
382.283 246.711 li
382.783 246.795 li
383.283 246.877 li
383.701 247.045 li
384.201 247.127 li
384.701 247.295 li
384.701 247.295 mo
385.117 247.377 li
385.617 247.461 li
386.117 247.627 li
386.533 247.711 li
387.033 247.795 li
387.533 247.961 li
387.951 248.045 li
388.451 248.127 li
388.951 248.295 li
389.367 248.377 li
389.867 248.461 li
390.367 248.627 li
390.867 248.711 li
391.283 248.795 li
391.783 248.961 li
392.283 249.045 li
392.701 249.127 li
393.201 249.295 li
393.701 249.377 li
394.117 249.461 li
394.617 249.627 li
395.117 249.711 li
395.533 249.795 li
396.033 249.961 li
396.533 250.045 li
397.033 250.127 li
397.451 250.211 li
397.951 250.377 li
398.451 250.461 li
398.867 250.545 li
399.367 250.711 li
399.867 250.795 li
400.283 250.877 li
400.783 251.045 li
401.283 251.127 li
401.699 251.211 li
402.199 251.295 li
402.699 251.461 li
403.117 251.545 li
403.617 251.627 li
404.117 251.711 li
404.617 251.877 li
405.033 251.961 li
405.533 252.045 li
406.033 252.211 li
406.449 252.295 li
406.949 252.377 li
407.449 252.461 li
407.867 252.627 li
408.367 252.711 li
408.867 252.795 li
409.283 252.877 li
409.783 253.045 li
410.283 253.127 li
410.699 253.211 li
411.199 253.295 li
411.699 253.461 li
412.199 253.545 li
412.617 253.627 li
413.117 253.711 li
413.617 253.795 li
414.033 253.961 li
414.533 254.045 li
415.033 254.127 li
415.449 254.211 li
415.949 254.377 li
416.449 254.461 li
416.867 254.545 li
417.367 254.627 li
417.867 254.711 li
418.283 254.877 li
418.783 254.961 li
419.283 255.045 li
419.783 255.127 li
420.199 255.295 li
420.699 255.377 li
421.199 255.461 li
421.617 255.545 li
422.117 255.627 li
422.617 255.711 li
423.033 255.877 li
423.533 255.961 li
424.033 256.045 li
424.449 256.127 li
424.949 256.211 li
425.449 256.377 li
425.867 256.461 li
426.367 256.545 li
426.867 256.627 li
427.367 256.711 li
427.783 256.795 li
428.283 256.961 li
428.783 257.045 li
429.199 257.127 li
429.699 257.211 li
430.199 257.295 li
430.617 257.377 li
431.117 257.545 li
431.617 257.627 li
431.617 257.627 mo
432.033 257.711 li
432.533 257.795 li
433.033 257.877 li
433.451 257.961 li
433.951 258.127 li
434.451 258.211 li
434.951 258.295 li
435.367 258.377 li
435.867 258.461 li
436.367 258.545 li
436.783 258.627 li
437.283 258.711 li
437.783 258.877 li
438.201 258.961 li
438.701 259.045 li
439.201 259.127 li
439.617 259.211 li
440.117 259.295 li
440.617 259.377 li
441.117 259.461 li
441.533 259.627 li
442.033 259.711 li
442.533 259.795 li
442.949 259.877 li
443.449 259.961 li
443.949 260.045 li
444.367 260.127 li
444.867 260.211 li
445.367 260.295 li
445.783 260.461 li
446.283 260.545 li
446.783 260.627 li
447.199 260.711 li
447.699 260.795 li
448.199 260.877 li
448.699 260.961 li
449.117 261.045 li
449.617 261.127 li
450.117 261.211 li
450.533 261.295 li
451.033 261.461 li
451.533 261.545 li
451.949 261.627 li
452.449 261.711 li
452.949 261.795 li
453.367 261.877 li
453.867 261.961 li
454.367 262.045 li
454.783 262.127 li
455.283 262.211 li
455.783 262.295 li
456.283 262.377 li
456.699 262.461 li
457.199 262.545 li
457.699 262.627 li
458.117 262.795 li
458.617 262.877 li
459.117 262.961 li
459.533 263.045 li
460.033 263.127 li
460.533 263.211 li
460.949 263.295 li
461.449 263.377 li
461.949 263.461 li
462.367 263.545 li
462.867 263.627 li
463.367 263.711 li
463.867 263.795 li
464.283 263.877 li
464.783 263.961 li
465.283 264.045 li
465.699 264.127 li
466.199 264.211 li
466.699 264.295 li
467.117 264.377 li
467.617 264.461 li
468.117 264.545 li
468.533 264.627 li
469.033 264.711 li
469.533 264.795 li
469.949 264.877 li
470.449 264.961 li
470.949 265.045 li
471.449 265.127 li
471.867 265.211 li
472.367 265.295 li
472.867 265.377 li
473.283 265.461 li
473.783 265.545 li
474.283 265.627 li
474.699 265.711 li
475.199 265.795 li
475.699 265.877 li
476.117 265.961 li
476.617 266.045 li
477.117 266.127 li
477.617 266.211 li
478.033 266.295 li
478.533 266.377 li
0 0 1 rgb
@
51.9502 361.127 mo
52.3672 359.045 li
52.8672 357.045 li
53.3672 355.045 li
53.7837 353.045 li
54.2837 351.045 li
54.7837 349.127 li
55.2002 347.127 li
55.7002 345.211 li
56.2002 343.211 li
56.2002 343.211 mo
56.6172 341.295 li
57.1172 339.377 li
57.6172 337.461 li
58.0337 335.627 li
58.5337 333.711 li
59.0337 331.877 li
59.5337 329.961 li
59.9502 328.127 li
60.4502 326.295 li
60.9502 324.461 li
61.3667 322.627 li
61.8667 320.877 li
62.3667 319.045 li
62.7837 317.295 li
63.2837 315.461 li
63.7837 313.711 li
64.2002 311.961 li
64.7002 310.211 li
65.2002 308.461 li
65.6167 306.795 li
66.1167 305.045 li
66.6167 303.377 li
67.1167 301.627 li
67.5337 299.961 li
68.0337 298.295 li
68.5337 296.627 li
68.9502 294.961 li
69.4502 293.295 li
69.9502 291.711 li
70.3667 290.045 li
70.8667 288.461 li
71.3667 286.795 li
71.7837 285.211 li
72.2837 283.627 li
72.7837 282.045 li
73.2002 280.461 li
73.7002 278.877 li
74.2002 277.377 li
74.7002 275.795 li
75.1167 274.295 li
75.6167 272.711 li
76.1167 271.211 li
76.5337 269.711 li
77.0337 268.211 li
77.5337 266.711 li
77.9502 265.211 li
78.4502 263.795 li
78.9502 262.295 li
79.3667 260.877 li
79.8667 259.377 li
80.3667 257.961 li
80.7832 256.545 li
81.2832 255.127 li
81.7832 253.711 li
82.2832 252.295 li
82.7002 250.877 li
83.2002 249.461 li
83.7002 248.127 li
84.1167 246.711 li
84.6167 245.377 li
85.1167 244.045 li
85.5332 242.627 li
86.0332 241.295 li
86.5332 239.961 li
86.9502 238.627 li
87.4502 237.377 li
87.9502 236.045 li
88.3667 234.711 li
88.8667 233.461 li
89.3667 232.127 li
89.8667 230.877 li
90.2832 229.627 li
90.7832 228.295 li
91.2832 227.045 li
91.6997 225.795 li
92.1997 224.545 li
92.6997 223.377 li
93.1167 222.127 li
93.6167 220.877 li
94.1167 219.711 li
94.5332 218.461 li
95.0332 217.295 li
95.5332 216.127 li
96.0332 214.961 li
96.4497 213.711 li
96.9497 212.545 li
97.4497 211.461 li
97.8667 210.295 li
98.3667 209.127 li
98.8667 207.961 li
99.2832 206.877 li
99.7832 205.711 li
100.283 204.627 li
100.7 203.461 li
101.2 202.377 li
101.7 201.295 li
102.117 200.211 li
102.617 199.128 li
103.117 198.044 li
103.117 198.044 mo
103.617 196.961 li
104.034 195.961 li
104.534 194.878 li
105.034 193.794 li
105.45 192.794 li
105.95 191.711 li
106.45 190.711 li
106.867 189.711 li
107.367 188.711 li
107.867 187.628 li
108.284 186.628 li
108.784 185.711 li
109.284 184.711 li
109.7 183.711 li
110.2 182.711 li
110.7 181.794 li
111.2 180.794 li
111.617 179.878 li
112.117 178.878 li
112.617 177.961 li
113.034 177.044 li
113.534 176.128 li
114.034 175.128 li
114.45 174.211 li
114.95 173.378 li
115.45 172.461 li
115.867 171.544 li
116.367 170.628 li
116.867 169.794 li
117.284 168.878 li
117.784 168.044 li
118.284 167.128 li
118.784 166.294 li
119.2 165.461 li
119.7 164.628 li
120.2 163.711 li
120.617 162.878 li
121.117 162.128 li
121.617 161.294 li
122.034 160.461 li
122.534 159.628 li
123.034 158.878 li
123.45 158.044 li
123.95 157.294 li
124.45 156.461 li
124.867 155.711 li
125.367 154.878 li
125.867 154.128 li
126.367 153.378 li
126.783 152.628 li
127.283 151.878 li
127.783 151.128 li
128.2 150.378 li
128.7 149.711 li
129.2 148.961 li
129.617 148.211 li
130.117 147.544 li
130.617 146.794 li
131.033 146.128 li
131.533 145.461 li
132.033 144.711 li
132.45 144.044 li
132.95 143.378 li
133.45 142.711 li
133.95 142.044 li
134.367 141.378 li
134.867 140.711 li
135.367 140.128 li
135.783 139.461 li
136.283 138.794 li
136.783 138.211 li
137.2 137.544 li
137.7 136.961 li
138.2 136.378 li
138.617 135.794 li
139.117 135.128 li
139.617 134.544 li
140.117 133.961 li
140.533 133.378 li
141.033 132.794 li
141.533 132.294 li
141.95 131.711 li
142.45 131.128 li
142.95 130.544 li
143.367 130.044 li
143.867 129.461 li
144.367 128.961 li
144.783 128.461 li
145.283 127.961 li
145.783 127.378 li
146.2 126.878 li
146.7 126.378 li
147.2 125.878 li
147.7 125.378 li
148.117 124.878 li
148.617 124.461 li
149.117 123.961 li
149.533 123.461 li
150.033 123.044 li
150.034 123.044 mo
150.534 122.544 li
150.95 122.128 li
151.45 121.628 li
151.95 121.211 li
152.367 120.794 li
152.867 120.378 li
153.367 119.961 li
153.784 119.544 li
154.284 119.128 li
154.784 118.711 li
155.284 118.294 li
155.7 117.878 li
156.2 117.544 li
156.7 117.128 li
157.117 116.794 li
157.617 116.378 li
158.117 116.044 li
158.534 115.628 li
159.034 115.294 li
159.534 114.961 li
159.95 114.628 li
160.45 114.294 li
160.95 113.961 li
161.367 113.628 li
161.867 113.294 li
162.367 112.961 li
162.867 112.628 li
163.284 112.378 li
163.784 112.044 li
164.284 111.794 li
164.7 111.461 li
165.2 111.211 li
165.7 110.878 li
166.117 110.628 li
166.617 110.378 li
167.117 110.128 li
167.534 109.878 li
168.034 109.628 li
168.534 109.378 li
168.951 109.128 li
169.451 108.878 li
169.951 108.628 li
170.451 108.378 li
170.867 108.211 li
171.367 107.961 li
171.867 107.794 li
172.284 107.544 li
172.784 107.378 li
173.284 107.211 li
173.701 106.961 li
174.201 106.794 li
174.701 106.628 li
175.117 106.461 li
175.617 106.294 li
176.117 106.128 li
176.534 105.961 li
177.034 105.794 li
177.534 105.628 li
178.034 105.461 li
178.451 105.378 li
178.951 105.211 li
179.451 105.044 li
179.867 104.961 li
180.367 104.794 li
180.867 104.711 li
181.284 104.628 li
181.784 104.461 li
182.284 104.378 li
182.701 104.294 li
183.201 104.211 li
183.701 104.128 li
184.201 104.044 li
184.617 103.961 li
185.117 103.878 li
185.617 103.794 li
186.034 103.711 li
186.534 103.628 li
187.034 103.628 li
187.451 103.544 li
187.951 103.461 li
188.451 103.461 li
188.867 103.378 li
189.367 103.378 li
189.867 103.294 li
190.284 103.294 li
190.784 103.211 li
191.284 103.211 li
191.784 103.211 li
192.201 103.211 li
192.701 103.211 li
193.201 103.128 li
193.617 103.128 li
194.117 103.128 li
194.617 103.128 li
195.034 103.128 li
195.534 103.211 li
196.034 103.211 li
196.451 103.211 li
196.951 103.211 li
196.95 103.211 mo
197.45 103.211 li
197.867 103.294 li
198.367 103.294 li
198.867 103.294 li
199.367 103.378 li
199.784 103.378 li
200.284 103.461 li
200.784 103.461 li
201.2 103.544 li
201.7 103.628 li
202.2 103.628 li
202.617 103.711 li
203.117 103.794 li
203.617 103.878 li
204.034 103.878 li
204.534 103.961 li
205.034 104.044 li
205.45 104.128 li
205.95 104.211 li
206.45 104.294 li
206.95 104.378 li
207.367 104.461 li
207.867 104.544 li
208.367 104.628 li
208.784 104.711 li
209.284 104.794 li
209.784 104.961 li
210.2 105.044 li
210.7 105.128 li
211.2 105.211 li
211.617 105.378 li
212.117 105.461 li
212.617 105.544 li
213.034 105.711 li
213.534 105.794 li
214.034 105.878 li
214.534 106.044 li
214.95 106.128 li
215.45 106.294 li
215.95 106.378 li
216.367 106.544 li
216.867 106.711 li
217.367 106.794 li
217.784 106.961 li
218.284 107.128 li
218.784 107.211 li
219.2 107.378 li
219.7 107.544 li
220.2 107.628 li
220.617 107.794 li
221.117 107.961 li
221.617 108.128 li
222.117 108.295 li
222.534 108.378 li
223.034 108.545 li
223.534 108.711 li
223.95 108.878 li
224.45 109.045 li
224.95 109.211 li
225.367 109.378 li
225.867 109.545 li
226.367 109.711 li
226.784 109.878 li
227.284 110.045 li
227.784 110.211 li
228.284 110.378 li
228.7 110.545 li
229.2 110.711 li
229.7 110.878 li
230.117 111.128 li
230.617 111.295 li
231.117 111.461 li
231.534 111.628 li
232.034 111.795 li
232.534 111.961 li
232.95 112.211 li
233.45 112.378 li
233.95 112.545 li
234.367 112.711 li
234.867 112.961 li
235.367 113.128 li
235.867 113.295 li
236.284 113.461 li
236.784 113.711 li
237.284 113.878 li
237.7 114.045 li
238.2 114.295 li
238.7 114.461 li
239.117 114.628 li
239.617 114.878 li
240.117 115.045 li
240.534 115.295 li
241.034 115.461 li
241.534 115.628 li
241.95 115.878 li
242.45 116.045 li
242.95 116.295 li
243.45 116.461 li
243.867 116.711 li
243.867 116.711 mo
244.367 116.878 li
244.867 117.128 li
245.284 117.294 li
245.784 117.544 li
246.284 117.711 li
246.7 117.961 li
247.2 118.128 li
247.7 118.378 li
248.117 118.544 li
248.617 118.794 li
249.117 118.961 li
249.534 119.211 li
250.034 119.378 li
250.534 119.628 li
251.034 119.794 li
251.45 120.044 li
251.95 120.211 li
252.45 120.461 li
252.867 120.711 li
253.367 120.878 li
253.867 121.128 li
254.284 121.294 li
254.784 121.544 li
255.284 121.794 li
255.701 121.961 li
256.201 122.211 li
256.701 122.378 li
257.117 122.628 li
257.617 122.878 li
258.117 123.044 li
258.617 123.294 li
259.033 123.544 li
259.533 123.711 li
260.033 123.961 li
260.451 124.211 li
260.951 124.378 li
261.451 124.628 li
261.867 124.794 li
262.367 125.044 li
262.867 125.294 li
263.283 125.461 li
263.783 125.711 li
264.283 125.961 li
264.783 126.128 li
265.201 126.378 li
265.701 126.628 li
266.201 126.794 li
266.617 127.044 li
267.117 127.294 li
267.617 127.544 li
268.033 127.711 li
268.533 127.961 li
269.033 128.211 li
269.451 128.378 li
269.951 128.628 li
270.451 128.878 li
270.867 129.044 li
271.367 129.294 li
271.867 129.544 li
272.367 129.711 li
272.783 129.961 li
273.283 130.211 li
273.783 130.378 li
274.201 130.628 li
274.701 130.878 li
275.201 131.128 li
275.617 131.294 li
276.117 131.544 li
276.617 131.794 li
277.033 131.961 li
277.533 132.211 li
278.033 132.461 li
278.451 132.628 li
278.951 132.878 li
279.451 133.128 li
279.951 133.294 li
280.367 133.544 li
280.867 133.794 li
281.367 134.044 li
281.783 134.211 li
282.283 134.461 li
282.783 134.711 li
283.201 134.878 li
283.701 135.128 li
284.201 135.378 li
284.617 135.544 li
285.117 135.794 li
285.617 136.044 li
286.033 136.211 li
286.533 136.461 li
287.033 136.711 li
287.533 136.878 li
287.951 137.128 li
288.451 137.378 li
288.951 137.544 li
289.367 137.794 li
289.867 138.044 li
290.367 138.211 li
290.783 138.461 li
290.783 138.461 mo
291.283 138.711 li
291.783 138.878 li
292.201 139.128 li
292.701 139.378 li
293.201 139.544 li
293.617 139.794 li
294.117 140.044 li
294.617 140.211 li
295.117 140.461 li
295.533 140.711 li
296.033 140.878 li
296.533 141.128 li
296.951 141.378 li
297.451 141.544 li
297.951 141.794 li
298.367 142.044 li
298.867 142.211 li
299.367 142.461 li
299.783 142.628 li
300.283 142.878 li
300.783 143.128 li
301.201 143.294 li
301.701 143.544 li
302.201 143.794 li
302.701 143.961 li
303.117 144.211 li
303.617 144.378 li
304.117 144.628 li
304.533 144.878 li
305.033 145.044 li
305.533 145.294 li
305.951 145.461 li
306.451 145.711 li
306.951 145.961 li
307.367 146.128 li
307.867 146.378 li
308.367 146.544 li
308.867 146.794 li
309.283 147.044 li
309.783 147.211 li
310.283 147.461 li
310.701 147.628 li
311.201 147.878 li
311.701 148.044 li
312.117 148.294 li
312.617 148.544 li
313.117 148.711 li
313.533 148.961 li
314.033 149.128 li
314.533 149.378 li
314.951 149.544 li
315.451 149.794 li
315.951 149.961 li
316.451 150.211 li
316.867 150.378 li
317.367 150.628 li
317.867 150.794 li
318.283 151.044 li
318.783 151.294 li
319.283 151.461 li
319.701 151.711 li
320.201 151.878 li
320.701 152.128 li
321.117 152.294 li
321.617 152.544 li
322.117 152.711 li
322.533 152.961 li
323.033 153.128 li
323.533 153.378 li
324.033 153.544 li
324.451 153.794 li
324.951 153.961 li
325.451 154.128 li
325.867 154.378 li
326.367 154.544 li
326.867 154.794 li
327.283 154.961 li
327.783 155.211 li
328.283 155.378 li
328.701 155.628 li
329.201 155.794 li
329.701 156.044 li
330.117 156.211 li
330.617 156.461 li
331.117 156.628 li
331.617 156.794 li
332.033 157.044 li
332.533 157.211 li
333.033 157.461 li
333.451 157.628 li
333.951 157.878 li
334.451 158.044 li
334.867 158.211 li
335.367 158.461 li
335.867 158.628 li
336.283 158.878 li
336.783 159.044 li
337.283 159.211 li
337.701 159.461 li
337.701 159.461 mo
338.201 159.628 li
338.701 159.878 li
339.201 160.044 li
339.617 160.211 li
340.117 160.461 li
340.617 160.628 li
341.033 160.794 li
341.533 161.044 li
342.033 161.211 li
342.451 161.378 li
342.951 161.628 li
343.451 161.794 li
343.867 162.044 li
344.367 162.211 li
344.867 162.378 li
345.283 162.628 li
345.783 162.794 li
346.283 162.961 li
346.783 163.211 li
347.201 163.378 li
347.701 163.544 li
348.201 163.711 li
348.617 163.961 li
349.117 164.128 li
349.617 164.294 li
350.033 164.544 li
350.533 164.711 li
351.033 164.878 li
351.451 165.128 li
351.951 165.294 li
352.451 165.461 li
352.951 165.628 li
353.367 165.878 li
353.867 166.044 li
354.367 166.211 li
354.783 166.461 li
355.283 166.628 li
355.783 166.794 li
356.201 166.961 li
356.701 167.211 li
357.201 167.378 li
357.617 167.544 li
358.117 167.711 li
358.617 167.961 li
359.033 168.128 li
359.533 168.294 li
360.033 168.461 li
360.533 168.628 li
360.951 168.878 li
361.451 169.044 li
361.951 169.211 li
362.367 169.378 li
362.867 169.628 li
363.367 169.794 li
363.783 169.961 li
364.283 170.128 li
364.783 170.294 li
365.201 170.544 li
365.701 170.711 li
366.201 170.878 li
366.617 171.044 li
367.117 171.211 li
367.617 171.378 li
368.117 171.628 li
368.533 171.794 li
369.033 171.961 li
369.533 172.128 li
369.951 172.294 li
370.451 172.461 li
370.951 172.711 li
371.367 172.878 li
371.867 173.044 li
372.367 173.211 li
372.783 173.378 li
373.283 173.544 li
373.783 173.711 li
374.201 173.961 li
374.701 174.128 li
375.201 174.294 li
375.701 174.461 li
376.117 174.628 li
376.617 174.794 li
377.117 174.961 li
377.533 175.128 li
378.033 175.378 li
378.533 175.544 li
378.951 175.711 li
379.451 175.878 li
379.951 176.044 li
380.367 176.211 li
380.867 176.378 li
381.367 176.544 li
381.783 176.711 li
382.283 176.878 li
382.783 177.044 li
383.283 177.211 li
383.701 177.378 li
384.201 177.628 li
384.701 177.794 li
384.701 177.794 mo
385.117 177.961 li
385.617 178.128 li
386.117 178.294 li
386.533 178.461 li
387.033 178.628 li
387.533 178.794 li
387.951 178.961 li
388.451 179.128 li
388.951 179.294 li
389.367 179.461 li
389.867 179.628 li
390.367 179.794 li
390.867 179.961 li
391.283 180.128 li
391.783 180.294 li
392.283 180.461 li
392.701 180.628 li
393.201 180.794 li
393.701 180.961 li
394.117 181.128 li
394.617 181.294 li
395.117 181.461 li
395.533 181.628 li
396.033 181.794 li
396.533 181.961 li
397.033 182.128 li
397.451 182.294 li
397.951 182.461 li
398.451 182.628 li
398.867 182.794 li
399.367 182.961 li
399.867 183.128 li
400.283 183.294 li
400.783 183.461 li
401.283 183.628 li
401.699 183.711 li
402.199 183.878 li
402.699 184.044 li
403.117 184.211 li
403.617 184.378 li
404.117 184.544 li
404.617 184.711 li
405.033 184.878 li
405.533 185.044 li
406.033 185.211 li
406.449 185.378 li
406.949 185.544 li
407.449 185.711 li
407.867 185.794 li
408.367 185.961 li
408.867 186.128 li
409.283 186.294 li
409.783 186.461 li
410.283 186.628 li
410.699 186.794 li
411.199 186.961 li
411.699 187.128 li
412.199 187.211 li
412.617 187.378 li
413.117 187.544 li
413.617 187.711 li
414.033 187.878 li
414.533 188.044 li
415.033 188.211 li
415.449 188.294 li
415.949 188.461 li
416.449 188.628 li
416.867 188.794 li
417.367 188.961 li
417.867 189.128 li
418.283 189.294 li
418.783 189.378 li
419.283 189.544 li
419.783 189.711 li
420.199 189.878 li
420.699 190.044 li
421.199 190.128 li
421.617 190.294 li
422.117 190.461 li
422.617 190.628 li
423.033 190.794 li
423.533 190.961 li
424.033 191.044 li
424.449 191.211 li
424.949 191.378 li
425.449 191.544 li
425.867 191.711 li
426.367 191.794 li
426.867 191.961 li
427.367 192.128 li
427.783 192.294 li
428.283 192.378 li
428.783 192.544 li
429.199 192.711 li
429.699 192.878 li
430.199 192.961 li
430.617 193.128 li
431.117 193.294 li
431.617 193.461 li
431.617 193.461 mo
432.033 193.628 li
432.533 193.711 li
433.033 193.878 li
433.451 194.044 li
433.951 194.211 li
434.451 194.294 li
434.951 194.461 li
435.367 194.628 li
435.867 194.711 li
436.367 194.878 li
436.783 195.044 li
437.283 195.211 li
437.783 195.294 li
438.201 195.461 li
438.701 195.628 li
439.201 195.711 li
439.617 195.878 li
440.117 196.044 li
440.617 196.211 li
441.117 196.294 li
441.533 196.461 li
442.033 196.628 li
442.533 196.711 li
442.949 196.878 li
443.449 197.044 li
443.949 197.128 li
444.367 197.294 li
444.867 197.461 li
445.367 197.628 li
445.783 197.711 li
446.283 197.878 li
446.783 198.044 li
447.199 198.128 li
447.699 198.294 li
448.199 198.461 li
448.699 198.544 li
449.117 198.711 li
449.617 198.794 li
450.117 198.961 li
450.533 199.128 li
451.033 199.211 li
451.533 199.378 li
451.949 199.544 li
452.449 199.628 li
452.949 199.794 li
453.367 199.961 li
453.867 200.044 li
454.367 200.211 li
454.783 200.378 li
455.283 200.461 li
455.783 200.628 li
456.283 200.711 li
456.699 200.877 li
457.199 201.045 li
457.699 201.127 li
458.117 201.295 li
458.617 201.377 li
459.117 201.545 li
459.533 201.711 li
460.033 201.795 li
460.533 201.961 li
460.949 202.045 li
461.449 202.211 li
461.949 202.377 li
462.367 202.461 li
462.867 202.627 li
463.367 202.711 li
463.867 202.877 li
464.283 203.045 li
464.783 203.127 li
465.283 203.295 li
465.699 203.377 li
466.199 203.545 li
466.699 203.627 li
467.117 203.795 li
467.617 203.877 li
468.117 204.045 li
468.533 204.211 li
469.033 204.295 li
469.533 204.461 li
469.949 204.545 li
470.449 204.711 li
470.949 204.795 li
471.449 204.961 li
471.867 205.045 li
472.367 205.211 li
472.867 205.295 li
473.283 205.461 li
473.783 205.627 li
474.283 205.711 li
474.699 205.877 li
475.199 205.961 li
475.699 206.127 li
476.117 206.211 li
476.617 206.377 li
477.117 206.461 li
477.617 206.627 li
478.033 206.711 li
478.533 206.877 li
0 .501961 0 rgb
@
51.9502 361.127 mo
52.3672 359.295 li
52.8672 357.545 li
53.3672 355.877 li
53.7837 354.127 li
54.2837 352.377 li
54.7837 350.711 li
55.2002 348.961 li
55.7002 347.295 li
56.2002 345.545 li
56.2002 345.545 mo
56.6172 343.877 li
57.1172 342.211 li
57.6172 340.545 li
58.0337 338.877 li
58.5337 337.295 li
59.0337 335.627 li
59.5337 333.961 li
59.9502 332.377 li
60.4502 330.711 li
60.9502 329.127 li
61.3667 327.545 li
61.8667 325.961 li
62.3667 324.377 li
62.7837 322.795 li
63.2837 321.211 li
63.7837 319.627 li
64.2002 318.045 li
64.7002 316.545 li
65.2002 314.961 li
65.6167 313.461 li
66.1167 311.961 li
66.6167 310.377 li
67.1167 308.877 li
67.5337 307.377 li
68.0337 305.877 li
68.5337 304.377 li
68.9502 302.877 li
69.4502 301.461 li
69.9502 299.961 li
70.3667 298.461 li
70.8667 297.045 li
71.3667 295.545 li
71.7837 294.127 li
72.2837 292.711 li
72.7837 291.295 li
73.2002 289.795 li
73.7002 288.377 li
74.2002 286.961 li
74.7002 285.627 li
75.1167 284.211 li
75.6167 282.795 li
76.1167 281.377 li
76.5337 280.045 li
77.0337 278.627 li
77.5337 277.295 li
77.9502 275.877 li
78.4502 274.545 li
78.9502 273.211 li
79.3667 271.877 li
79.8667 270.545 li
80.3667 269.211 li
80.7832 267.877 li
81.2832 266.545 li
81.7832 265.211 li
82.2832 263.877 li
82.7002 262.545 li
83.2002 261.295 li
83.7002 259.961 li
84.1167 258.711 li
84.6167 257.377 li
85.1167 256.127 li
85.5332 254.877 li
86.0332 253.627 li
86.5332 252.295 li
86.9502 251.045 li
87.4502 249.795 li
87.9502 248.545 li
88.3667 247.295 li
88.8667 246.127 li
89.3667 244.877 li
89.8667 243.627 li
90.2832 242.461 li
90.7832 241.211 li
91.2832 239.961 li
91.6997 238.795 li
92.1997 237.627 li
92.6997 236.377 li
93.1167 235.211 li
93.6167 234.045 li
94.1167 232.795 li
94.5332 231.627 li
95.0332 230.461 li
95.5332 229.295 li
96.0332 228.127 li
96.4497 226.961 li
96.9497 225.877 li
97.4497 224.711 li
97.8667 223.545 li
98.3667 222.377 li
98.8667 221.295 li
99.2832 220.127 li
99.7832 219.045 li
100.283 217.877 li
100.7 216.795 li
101.2 215.711 li
101.7 214.545 li
102.117 213.461 li
102.617 212.377 li
103.117 211.295 li
103.117 211.295 mo
103.617 210.211 li
104.034 209.127 li
104.534 208.045 li
105.034 206.961 li
105.45 205.877 li
105.95 204.795 li
106.45 203.711 li
106.867 202.711 li
107.367 201.627 li
107.867 200.545 li
108.284 199.544 li
108.784 198.461 li
109.284 197.461 li
109.7 196.378 li
110.2 195.378 li
110.7 194.294 li
111.2 193.294 li
111.617 192.294 li
112.117 191.294 li
112.617 190.294 li
113.034 189.211 li
113.534 188.211 li
114.034 187.211 li
114.45 186.211 li
114.95 185.211 li
115.45 184.294 li
115.867 183.294 li
116.367 182.294 li
116.867 181.294 li
117.284 180.294 li
117.784 179.378 li
118.284 178.378 li
118.784 177.461 li
119.2 176.461 li
119.7 175.544 li
120.2 174.544 li
120.617 173.628 li
121.117 172.628 li
121.617 171.711 li
122.034 170.794 li
122.534 169.878 li
123.034 168.878 li
123.45 167.961 li
123.95 167.044 li
124.45 166.128 li
124.867 165.211 li
125.367 164.294 li
125.867 163.378 li
126.367 162.461 li
126.783 161.544 li
127.283 160.628 li
127.783 159.794 li
128.2 158.878 li
128.7 157.961 li
129.2 157.044 li
129.617 156.211 li
130.117 155.294 li
130.617 154.378 li
131.033 153.544 li
131.533 152.628 li
132.033 151.794 li
132.45 150.961 li
132.95 150.044 li
133.45 149.211 li
133.95 148.294 li
134.367 147.461 li
134.867 146.628 li
135.367 145.794 li
135.783 144.961 li
136.283 144.044 li
136.783 143.211 li
137.2 142.378 li
137.7 141.544 li
138.2 140.711 li
138.617 139.878 li
139.117 139.044 li
139.617 138.211 li
140.117 137.461 li
140.533 136.628 li
141.033 135.794 li
141.533 134.961 li
141.95 134.128 li
142.45 133.378 li
142.95 132.544 li
143.367 131.711 li
143.867 130.961 li
144.367 130.128 li
144.783 129.378 li
145.283 128.544 li
145.783 127.794 li
146.2 126.961 li
146.7 126.211 li
147.2 125.378 li
147.7 124.628 li
148.117 123.878 li
148.617 123.128 li
149.117 122.294 li
149.533 121.544 li
150.033 120.794 li
150.034 120.794 mo
150.534 120.044 li
150.95 119.294 li
151.45 118.461 li
151.95 117.711 li
152.367 116.961 li
152.867 116.211 li
153.367 115.461 li
153.784 114.711 li
154.284 113.961 li
154.784 113.294 li
155.284 112.544 li
155.7 111.794 li
156.2 111.044 li
156.7 110.294 li
157.117 109.544 li
157.617 108.878 li
158.117 108.128 li
158.534 107.378 li
159.034 106.711 li
159.534 105.961 li
159.95 105.211 li
160.45 104.544 li
160.95 103.794 li
161.367 103.128 li
161.867 102.378 li
162.367 101.711 li
162.867 101.044 li
163.284 100.294 li
163.784 99.6279 li
164.284 98.8779 li
164.7 98.2114 li
165.2 97.5444 li
165.7 96.8779 li
166.117 96.1279 li
166.617 95.4614 li
167.117 94.7944 li
167.534 94.1279 li
168.034 93.4614 li
168.534 92.7114 li
168.951 92.0444 li
169.451 91.3779 li
169.951 90.7114 li
170.451 90.0444 li
170.867 89.3779 li
171.367 88.7114 li
171.867 88.0444 li
172.284 87.3779 li
172.784 86.7114 li
173.284 86.1279 li
173.701 85.4614 li
174.201 84.7944 li
174.701 84.1279 li
175.117 83.4614 li
175.617 82.8779 li
176.117 82.2114 li
176.534 81.5444 li
177.034 80.8779 li
177.534 80.2944 li
178.034 79.6279 li
178.451 79.0444 li
178.951 78.3779 li
179.451 77.7114 li
179.867 77.1279 li
180.367 76.4614 li
180.867 75.8779 li
181.284 75.2114 li
181.784 74.6279 li
182.284 73.9614 li
182.701 73.3779 li
183.201 72.7944 li
183.701 72.1279 li
184.201 71.5449 li
184.617 70.9614 li
185.117 70.2949 li
185.617 69.7114 li
186.034 69.1279 li
186.534 68.5449 li
187.034 67.8779 li
187.451 67.2949 li
187.951 66.7114 li
188.451 66.1279 li
188.867 65.5449 li
189.367 64.9614 li
189.867 64.2949 li
190.284 63.7114 li
190.784 63.1279 li
191.284 62.5449 li
191.784 61.9614 li
192.201 61.3779 li
192.701 60.7949 li
193.201 60.2114 li
193.617 59.6279 li
194.117 59.0449 li
194.617 58.5449 li
195.034 57.9614 li
195.534 57.3779 li
196.034 56.7949 li
196.451 56.2114 li
196.951 55.6279 li
196.95 55.6279 mo
197.45 55.1279 li
197.867 54.5444 li
198.367 53.9614 li
198.867 53.3779 li
199.367 52.8779 li
199.784 52.2944 li
200.284 51.7114 li
200.784 51.2114 li
201.2 50.6279 li
201.7 50.1279 li
202.2 49.5444 li
202.617 48.9614 li
203.117 48.4614 li
203.617 47.8779 li
204.034 47.3779 li
204.534 46.7944 li
205.034 46.2944 li
205.45 45.7114 li
205.95 45.2114 li
206.45 44.6279 li
206.95 44.1279 li
207.367 43.6279 li
207.867 43.0449 li
208.367 42.5449 li
208.784 42.0449 li
209.284 41.4614 li
209.784 40.9614 li
210.2 40.4614 li
210.7 39.8779 li
211.2 39.3779 li
211.617 38.8779 li
212.117 38.3779 li
212.617 37.7949 li
213.034 37.2949 li
213.534 36.7949 li
214.034 36.2949 li
214.534 35.7949 li
214.95 35.2949 li
215.45 34.7949 li
215.95 34.2949 li
216.367 33.7114 li
216.867 33.2114 li
217.367 32.7114 li
217.784 32.2114 li
218.284 31.7114 li
218.784 31.2114 li
219.2 30.7114 li
219.7 30.2114 li
220.2 29.7949 li
220.617 29.2949 li
221.117 28.7949 li
221.617 28.2949 li
222.117 27.7949 li
222.534 27.2949 li
223.034 26.7949 li
223.534 26.2949 li
223.95 25.8779 li
224.45 25.3779 li
224.95 24.8779 li
225.367 24.3779 li
225.867 23.8779 li
226.367 23.4614 li
226.784 22.9614 li
227.284 22.4614 li
227.784 22.0449 li
228.284 21.5449 li
228.7 21.0449 li
229.2 20.6279 li
229.7 20.1279 li
230.117 19.6279 li
230.617 19.2114 li
231.117 18.7114 li
231.534 18.2114 li
232.034 17.7949 li
232.534 17.2949 li
232.95 16.8784 li
233.45 16.3784 li
233.95 15.9614 li
234.367 15.4614 li
234.867 15.0449 li
235.367 14.5449 li
235.867 14.1284 li
236.284 13.6284 li
236.784 13.2114 li
237.284 12.7949 li
237.7 12.2949 li
238.2 11.8784 li
238.7 11.3784 li
239.117 10.9619 li
239.617 10.5449 li
240.117 10.0449 li
240.534 9.62843 li
241.034 9.21194 li
241.534 8.79494 li
241.95 9.21194 li
242.45 9.62843 li
242.95 10.0449 li
243.45 10.5449 li
243.867 10.9619 li
243.867 10.9614 mo
244.367 11.3779 li
244.867 11.7944 li
245.284 12.2109 li
245.784 12.7109 li
246.284 13.1279 li
246.7 13.5444 li
247.2 13.9609 li
247.7 14.3779 li
248.117 14.7944 li
248.617 15.2109 li
249.117 15.6279 li
249.534 16.0444 li
250.034 16.5444 li
250.534 16.9609 li
251.034 17.3779 li
251.45 17.7944 li
251.95 18.2109 li
252.45 18.6279 li
252.867 19.0444 li
253.367 19.4609 li
253.867 19.8779 li
254.284 20.2944 li
254.784 20.6279 li
255.284 21.0444 li
255.701 21.4609 li
256.201 21.8779 li
256.701 22.2944 li
257.117 22.7109 li
257.617 23.1279 li
258.117 23.5444 li
258.617 23.9609 li
259.033 24.2944 li
259.533 24.7109 li
260.033 25.1279 li
260.451 25.5444 li
260.951 25.9609 li
261.451 26.2944 li
261.867 26.7109 li
262.367 27.1279 li
262.867 27.5444 li
263.283 27.8779 li
263.783 28.2944 li
264.283 28.7109 li
264.783 29.1279 li
265.201 29.4609 li
265.701 29.8779 li
266.201 30.2944 li
266.617 30.6279 li
267.117 31.0444 li
267.617 31.3779 li
268.033 31.7944 li
268.533 32.2109 li
269.033 32.5444 li
269.451 32.9609 li
269.951 33.2944 li
270.451 33.7109 li
270.867 34.1274 li
271.367 34.4609 li
271.867 34.8774 li
272.367 35.2109 li
272.783 35.6274 li
273.283 35.9609 li
273.783 36.3774 li
274.201 36.7109 li
274.701 37.1274 li
275.201 37.4609 li
275.617 37.8774 li
276.117 38.2109 li
276.617 38.5444 li
277.033 38.9609 li
277.533 39.2944 li
278.033 39.7109 li
278.451 40.0444 li
278.951 40.3779 li
279.451 40.7944 li
279.951 41.1279 li
280.367 41.5444 li
280.867 41.8779 li
281.367 42.2109 li
281.783 42.6279 li
282.283 42.9609 li
282.783 43.2944 li
283.201 43.6279 li
283.701 44.0444 li
284.201 44.3779 li
284.617 44.7109 li
285.117 45.1279 li
285.617 45.4609 li
286.033 45.7944 li
286.533 46.1279 li
287.033 46.5444 li
287.533 46.8779 li
287.951 47.2109 li
288.451 47.5444 li
288.951 47.8779 li
289.367 48.2109 li
289.867 48.6279 li
290.367 48.9609 li
290.783 49.2944 li
290.783 49.2944 mo
291.283 49.6279 li
291.783 49.9614 li
292.201 50.2944 li
292.701 50.6279 li
293.201 50.9614 li
293.617 51.3779 li
294.117 51.7114 li
294.617 52.0444 li
295.117 52.3779 li
295.533 52.7114 li
296.033 53.0444 li
296.533 53.3779 li
296.951 53.7114 li
297.451 54.0449 li
297.951 54.3779 li
298.367 54.7114 li
298.867 55.0449 li
299.367 55.3779 li
299.783 55.7114 li
300.283 56.0449 li
300.783 56.3779 li
301.201 56.7114 li
301.701 57.0449 li
302.201 57.3779 li
302.701 57.7114 li
303.117 58.0449 li
303.617 58.2949 li
304.117 58.6279 li
304.533 58.9614 li
305.033 59.2949 li
305.533 59.6279 li
305.951 59.9614 li
306.451 60.2949 li
306.951 60.6279 li
307.367 60.8779 li
307.867 61.2114 li
308.367 61.5449 li
308.867 61.8779 li
309.283 62.2114 li
309.783 62.4614 li
310.283 62.7949 li
310.701 63.1279 li
311.201 63.4614 li
311.701 63.7949 li
312.117 64.0449 li
312.617 64.3779 li
313.117 64.7114 li
313.533 65.0449 li
314.033 65.2949 li
314.533 65.6279 li
314.951 65.9614 li
315.451 66.2114 li
315.951 66.5449 li
316.451 66.8784 li
316.867 67.1284 li
317.367 67.4614 li
317.867 67.7949 li
318.283 68.0449 li
318.783 68.3784 li
319.283 68.7114 li
319.701 68.9614 li
320.201 69.2949 li
320.701 69.6284 li
321.117 69.8784 li
321.617 70.2114 li
322.117 70.4614 li
322.533 70.7949 li
323.033 71.1284 li
323.533 71.3784 li
324.033 71.7114 li
324.451 71.9614 li
324.951 72.2949 li
325.451 72.5449 li
325.867 72.8784 li
326.367 73.2114 li
326.867 73.4614 li
327.283 73.7949 li
327.783 74.0449 li
328.283 74.3784 li
328.701 74.6284 li
329.201 74.9614 li
329.701 75.2114 li
330.117 75.5449 li
330.617 75.7949 li
331.117 76.0449 li
331.617 76.3784 li
332.033 76.6284 li
332.533 76.9614 li
333.033 77.2114 li
333.451 77.5449 li
333.951 77.7949 li
334.451 78.1284 li
334.867 78.3784 li
335.367 78.6284 li
335.867 78.9614 li
336.283 79.2114 li
336.783 79.4614 li
337.283 79.7949 li
337.701 80.0449 li
337.701 80.0444 mo
338.201 80.3779 li
338.701 80.6279 li
339.201 80.8779 li
339.617 81.2114 li
340.117 81.4614 li
340.617 81.7114 li
341.033 82.0444 li
341.533 82.2944 li
342.033 82.5444 li
342.451 82.8779 li
342.951 83.1279 li
343.451 83.3779 li
343.867 83.6279 li
344.367 83.9609 li
344.867 84.2109 li
345.283 84.4609 li
345.783 84.7109 li
346.283 85.0444 li
346.783 85.2944 li
347.201 85.5444 li
347.701 85.7944 li
348.201 86.1279 li
348.617 86.3779 li
349.117 86.6279 li
349.617 86.8779 li
350.033 87.1279 li
350.533 87.4609 li
351.033 87.7109 li
351.451 87.9609 li
351.951 88.2109 li
352.451 88.4609 li
352.951 88.7109 li
353.367 89.0444 li
353.867 89.2944 li
354.367 89.5444 li
354.783 89.7944 li
355.283 90.0444 li
355.783 90.2944 li
356.201 90.5444 li
356.701 90.8779 li
357.201 91.1279 li
357.617 91.3779 li
358.117 91.6279 li
358.617 91.8779 li
359.033 92.1279 li
359.533 92.3779 li
360.033 92.6279 li
360.533 92.8779 li
360.951 93.1279 li
361.451 93.3779 li
361.951 93.6279 li
362.367 93.8779 li
362.867 94.1279 li
363.367 94.4609 li
363.783 94.7109 li
364.283 94.9609 li
364.783 95.2109 li
365.201 95.4609 li
365.701 95.7109 li
366.201 95.9609 li
366.617 96.2109 li
367.117 96.4609 li
367.617 96.7109 li
368.117 96.8779 li
368.533 97.1279 li
369.033 97.3779 li
369.533 97.6279 li
369.951 97.8779 li
370.451 98.1279 li
370.951 98.3779 li
371.367 98.6279 li
371.867 98.8779 li
372.367 99.1279 li
372.783 99.3779 li
373.283 99.6279 li
373.783 99.8779 li
374.201 100.128 li
374.701 100.378 li
375.201 100.544 li
375.701 100.794 li
376.117 101.044 li
376.617 101.294 li
377.117 101.544 li
377.533 101.794 li
378.033 102.044 li
378.533 102.294 li
378.951 102.461 li
379.451 102.711 li
379.951 102.961 li
380.367 103.211 li
380.867 103.461 li
381.367 103.711 li
381.783 103.878 li
382.283 104.128 li
382.783 104.378 li
383.283 104.628 li
383.701 104.878 li
384.201 105.044 li
384.701 105.294 li
384.701 105.294 mo
385.117 105.544 li
385.617 105.794 li
386.117 106.044 li
386.533 106.211 li
387.033 106.461 li
387.533 106.711 li
387.951 106.961 li
388.451 107.128 li
388.951 107.378 li
389.367 107.628 li
389.867 107.878 li
390.367 108.044 li
390.867 108.294 li
391.283 108.544 li
391.783 108.711 li
392.283 108.961 li
392.701 109.211 li
393.201 109.461 li
393.701 109.628 li
394.117 109.878 li
394.617 110.128 li
395.117 110.294 li
395.533 110.544 li
396.033 110.794 li
396.533 110.961 li
397.033 111.211 li
397.451 111.461 li
397.951 111.628 li
398.451 111.878 li
398.867 112.128 li
399.367 112.294 li
399.867 112.544 li
400.283 112.711 li
400.783 112.961 li
401.283 113.211 li
401.699 113.378 li
402.199 113.628 li
402.699 113.794 li
403.117 114.044 li
403.617 114.294 li
404.117 114.461 li
404.617 114.711 li
405.033 114.878 li
405.533 115.128 li
406.033 115.378 li
406.449 115.544 li
406.949 115.794 li
407.449 115.961 li
407.867 116.211 li
408.367 116.378 li
408.867 116.628 li
409.283 116.794 li
409.783 117.044 li
410.283 117.294 li
410.699 117.461 li
411.199 117.711 li
411.699 117.878 li
412.199 118.128 li
412.617 118.294 li
413.117 118.544 li
413.617 118.711 li
414.033 118.961 li
414.533 119.128 li
415.033 119.378 li
415.449 119.544 li
415.949 119.794 li
416.449 119.961 li
416.867 120.211 li
417.367 120.378 li
417.867 120.544 li
418.283 120.794 li
418.783 120.961 li
419.283 121.211 li
419.783 121.378 li
420.199 121.628 li
420.699 121.794 li
421.199 122.044 li
421.617 122.211 li
422.117 122.378 li
422.617 122.628 li
423.033 122.794 li
423.533 123.044 li
424.033 123.211 li
424.449 123.461 li
424.949 123.628 li
425.449 123.794 li
425.867 124.044 li
426.367 124.211 li
426.867 124.461 li
427.367 124.628 li
427.783 124.794 li
428.283 125.044 li
428.783 125.211 li
429.199 125.378 li
429.699 125.628 li
430.199 125.794 li
430.617 125.961 li
431.117 126.211 li
431.617 126.378 li
431.617 126.378 mo
432.033 126.628 li
432.533 126.794 li
433.033 126.961 li
433.451 127.211 li
433.951 127.378 li
434.451 127.544 li
434.951 127.794 li
435.367 127.961 li
435.867 128.128 li
436.367 128.294 li
436.783 128.544 li
437.283 128.711 li
437.783 128.878 li
438.201 129.128 li
438.701 129.294 li
439.201 129.461 li
439.617 129.628 li
440.117 129.878 li
440.617 130.044 li
441.117 130.211 li
441.533 130.461 li
442.033 130.628 li
442.533 130.794 li
442.949 130.961 li
443.449 131.211 li
443.949 131.378 li
444.367 131.544 li
444.867 131.711 li
445.367 131.961 li
445.783 132.128 li
446.283 132.294 li
446.783 132.461 li
447.199 132.628 li
447.699 132.878 li
448.199 133.044 li
448.699 133.211 li
449.117 133.378 li
449.617 133.628 li
450.117 133.794 li
450.533 133.961 li
451.033 134.128 li
451.533 134.294 li
451.949 134.544 li
452.449 134.711 li
452.949 134.878 li
453.367 135.044 li
453.867 135.211 li
454.367 135.378 li
454.783 135.628 li
455.283 135.794 li
455.783 135.961 li
456.283 136.128 li
456.699 136.294 li
457.199 136.461 li
457.699 136.711 li
458.117 136.878 li
458.617 137.044 li
459.117 137.211 li
459.533 137.378 li
460.033 137.544 li
460.533 137.711 li
460.949 137.878 li
461.449 138.128 li
461.949 138.294 li
462.367 138.461 li
462.867 138.628 li
463.367 138.794 li
463.867 138.961 li
464.283 139.128 li
464.783 139.294 li
465.283 139.461 li
465.699 139.628 li
466.199 139.878 li
466.699 140.044 li
467.117 140.211 li
467.617 140.378 li
468.117 140.544 li
468.533 140.711 li
469.033 140.878 li
469.533 141.044 li
469.949 141.211 li
470.449 141.378 li
470.949 141.544 li
471.449 141.711 li
471.867 141.878 li
472.367 142.044 li
472.867 142.211 li
473.283 142.378 li
473.783 142.544 li
474.283 142.794 li
474.699 142.961 li
475.199 143.128 li
475.699 143.294 li
476.117 143.461 li
476.617 143.628 li
477.117 143.794 li
477.617 143.961 li
478.033 144.128 li
478.533 144.294 li
1 0 0 rgb
@
51.9502 361.127 mo
52.3672 360.045 li
52.8672 359.045 li
53.3672 358.045 li
53.7837 357.045 li
54.2837 356.045 li
54.7837 355.045 li
55.2002 354.045 li
55.7002 353.045 li
56.2002 352.045 li
56.2002 352.045 mo
56.6172 351.045 li
57.1172 350.045 li
57.6172 349.127 li
58.0337 348.127 li
58.5337 347.127 li
59.0337 346.127 li
59.5337 345.211 li
59.9502 344.211 li
60.4502 343.211 li
60.9502 342.295 li
61.3667 341.295 li
61.8667 340.377 li
62.3667 339.377 li
62.7837 338.461 li
63.2837 337.461 li
63.7837 336.545 li
64.2002 335.627 li
64.7002 334.627 li
65.2002 333.711 li
65.6167 332.795 li
66.1167 331.877 li
66.6167 330.961 li
67.1167 329.961 li
67.5337 329.045 li
68.0337 328.127 li
68.5337 327.211 li
68.9502 326.293 li
69.4502 325.377 li
69.9502 324.461 li
70.3667 323.543 li
70.8667 322.627 li
71.3667 321.793 li
71.7837 320.877 li
72.2837 319.961 li
72.7837 319.043 li
73.2002 318.127 li
73.7002 317.293 li
74.2002 316.377 li
74.7002 315.461 li
75.1167 314.627 li
75.6167 313.711 li
76.1167 312.877 li
76.5337 311.961 li
77.0337 311.127 li
77.5337 310.211 li
77.9502 309.377 li
78.4502 308.461 li
78.9502 307.627 li
79.3667 306.793 li
79.8667 305.877 li
80.3667 305.043 li
80.7832 304.211 li
81.2832 303.377 li
81.7832 302.461 li
82.2832 301.627 li
82.7002 300.793 li
83.2002 299.961 li
83.7002 299.127 li
84.1167 298.293 li
84.6167 297.461 li
85.1167 296.627 li
85.5332 295.793 li
86.0332 294.961 li
86.5332 294.127 li
86.9502 293.293 li
87.4502 292.461 li
87.9502 291.711 li
88.3667 290.877 li
88.8667 290.043 li
89.3667 289.211 li
89.8667 288.461 li
90.2832 287.627 li
90.7832 286.793 li
91.2832 286.043 li
91.6997 285.211 li
92.1997 284.461 li
92.6997 283.627 li
93.1167 282.877 li
93.6167 282.043 li
94.1167 281.293 li
94.5332 280.461 li
95.0332 279.711 li
95.5332 278.877 li
96.0332 278.127 li
96.4497 277.377 li
96.9497 276.627 li
97.4497 275.793 li
97.8667 275.043 li
98.3667 274.293 li
98.8667 273.543 li
99.2832 272.711 li
99.7832 271.961 li
100.283 271.211 li
100.7 270.461 li
101.2 269.711 li
101.7 268.961 li
102.117 268.211 li
102.617 267.461 li
103.117 266.711 li
103.117 266.711 mo
103.617 265.961 li
104.034 265.211 li
104.534 264.545 li
105.034 263.795 li
105.45 263.045 li
105.95 262.295 li
106.45 261.545 li
106.867 260.877 li
107.367 260.127 li
107.867 259.377 li
108.284 258.711 li
108.784 257.961 li
109.284 257.211 li
109.7 256.545 li
110.2 255.795 li
110.7 255.127 li
111.2 254.377 li
111.617 253.711 li
112.117 252.961 li
112.617 252.295 li
113.034 251.545 li
113.534 250.877 li
114.034 250.211 li
114.45 249.461 li
114.95 248.795 li
115.45 248.127 li
115.867 247.461 li
116.367 246.711 li
116.867 246.045 li
117.284 245.377 li
117.784 244.711 li
118.284 244.045 li
118.784 243.295 li
119.2 242.627 li
119.7 241.961 li
120.2 241.295 li
120.617 240.627 li
121.117 239.961 li
121.617 239.295 li
122.034 238.627 li
122.534 237.961 li
123.034 237.377 li
123.45 236.711 li
123.95 236.045 li
124.45 235.377 li
124.867 234.711 li
125.367 234.045 li
125.867 233.461 li
126.367 232.795 li
126.783 232.127 li
127.283 231.545 li
127.783 230.877 li
128.2 230.211 li
128.7 229.627 li
129.2 228.961 li
129.617 228.295 li
130.117 227.711 li
130.617 227.045 li
131.033 226.461 li
131.533 225.795 li
132.033 225.211 li
132.45 224.545 li
132.95 223.961 li
133.45 223.377 li
133.95 222.711 li
134.367 222.127 li
134.867 221.545 li
135.367 220.877 li
135.783 220.295 li
136.283 219.711 li
136.783 219.127 li
137.2 218.461 li
137.7 217.877 li
138.2 217.295 li
138.617 216.711 li
139.117 216.127 li
139.617 215.545 li
140.117 214.961 li
140.533 214.295 li
141.033 213.711 li
141.533 213.127 li
141.95 212.545 li
142.45 211.961 li
142.95 211.461 li
143.367 210.877 li
143.867 210.295 li
144.367 209.711 li
144.783 209.127 li
145.283 208.545 li
145.783 207.961 li
146.2 207.377 li
146.7 206.877 li
147.2 206.295 li
147.7 205.711 li
148.117 205.127 li
148.617 204.627 li
149.117 204.045 li
149.533 203.461 li
150.033 202.961 li
150.034 202.961 mo
150.534 202.377 li
150.95 201.877 li
151.45 201.295 li
151.95 200.795 li
152.367 200.211 li
152.867 199.628 li
153.367 199.128 li
153.784 198.628 li
154.284 198.044 li
154.784 197.544 li
155.284 196.961 li
155.7 196.461 li
156.2 195.961 li
156.7 195.378 li
157.117 194.878 li
157.617 194.378 li
158.117 193.794 li
158.534 193.294 li
159.034 192.794 li
159.534 192.294 li
159.95 191.711 li
160.45 191.211 li
160.95 190.711 li
161.367 190.211 li
161.867 189.711 li
162.367 189.211 li
162.867 188.711 li
163.284 188.211 li
163.784 187.628 li
164.284 187.128 li
164.7 186.628 li
165.2 186.211 li
165.7 185.711 li
166.117 185.211 li
166.617 184.711 li
167.117 184.211 li
167.534 183.711 li
168.034 183.211 li
168.534 182.711 li
168.951 182.211 li
169.451 181.794 li
169.951 181.294 li
170.451 180.794 li
170.867 180.294 li
171.367 179.878 li
171.867 179.378 li
172.284 178.878 li
172.784 178.461 li
173.284 177.961 li
173.701 177.461 li
174.201 177.044 li
174.701 176.544 li
175.117 176.128 li
175.617 175.628 li
176.117 175.128 li
176.534 174.711 li
177.034 174.211 li
177.534 173.794 li
178.034 173.378 li
178.451 172.878 li
178.951 172.461 li
179.451 171.961 li
179.867 171.544 li
180.367 171.128 li
180.867 170.628 li
181.284 170.211 li
181.784 169.794 li
182.284 169.294 li
182.701 168.878 li
183.201 168.461 li
183.701 168.044 li
184.201 167.544 li
184.617 167.128 li
185.117 166.711 li
185.617 166.294 li
186.034 165.878 li
186.534 165.461 li
187.034 165.044 li
187.451 164.628 li
187.951 164.211 li
188.451 163.711 li
188.867 163.294 li
189.367 162.878 li
189.867 162.461 li
190.284 162.128 li
190.784 161.711 li
191.284 161.294 li
191.784 160.878 li
192.201 160.461 li
192.701 160.044 li
193.201 159.628 li
193.617 159.211 li
194.117 158.878 li
194.617 158.461 li
195.034 158.044 li
195.534 157.628 li
196.034 157.294 li
196.451 156.878 li
196.951 156.461 li
196.95 156.461 mo
197.45 156.044 li
197.867 155.711 li
198.367 155.294 li
198.867 154.878 li
199.367 154.544 li
199.784 154.128 li
200.284 153.794 li
200.784 153.378 li
201.2 153.044 li
201.7 152.628 li
202.2 152.294 li
202.617 151.878 li
203.117 151.544 li
203.617 151.128 li
204.034 150.794 li
204.534 150.378 li
205.034 150.044 li
205.45 149.711 li
205.95 149.294 li
206.45 148.961 li
206.95 148.628 li
207.367 148.211 li
207.867 147.878 li
208.367 147.544 li
208.784 147.211 li
209.284 146.794 li
209.784 146.461 li
210.2 146.128 li
210.7 145.794 li
211.2 145.461 li
211.617 145.128 li
212.117 144.711 li
212.617 144.378 li
213.034 144.044 li
213.534 143.711 li
214.034 143.378 li
214.534 143.044 li
214.95 142.711 li
215.45 142.378 li
215.95 142.044 li
216.367 141.711 li
216.867 141.378 li
217.367 141.044 li
217.784 140.711 li
218.284 140.461 li
218.784 140.128 li
219.2 139.794 li
219.7 139.461 li
220.2 139.128 li
220.617 138.794 li
221.117 138.544 li
221.617 138.211 li
222.117 137.878 li
222.534 137.544 li
223.034 137.294 li
223.534 136.961 li
223.95 136.628 li
224.45 136.378 li
224.95 136.044 li
225.367 135.794 li
225.867 135.461 li
226.367 135.128 li
226.784 134.878 li
227.284 134.544 li
227.784 134.294 li
228.284 133.961 li
228.7 133.711 li
229.2 133.378 li
229.7 133.128 li
230.117 132.794 li
230.617 132.544 li
231.117 132.294 li
231.534 131.961 li
232.034 131.711 li
232.534 131.378 li
232.95 131.128 li
233.45 130.878 li
233.95 130.544 li
234.367 130.294 li
234.867 130.044 li
235.367 129.794 li
235.867 129.461 li
236.284 129.211 li
236.784 128.961 li
237.284 128.711 li
237.7 128.461 li
238.2 128.211 li
238.7 127.961 li
239.117 127.628 li
239.617 127.378 li
240.117 127.128 li
240.534 126.878 li
241.034 126.628 li
241.534 126.378 li
241.95 126.128 li
242.45 125.878 li
242.95 125.628 li
243.45 125.378 li
243.867 125.128 li
243.867 125.128 mo
244.367 124.878 li
244.867 124.711 li
245.284 124.461 li
245.784 124.211 li
246.284 123.961 li
246.7 123.711 li
247.2 123.461 li
247.7 123.294 li
248.117 123.044 li
248.617 122.794 li
249.117 122.544 li
249.534 122.378 li
250.034 122.128 li
250.534 121.878 li
251.034 121.628 li
251.45 121.461 li
251.95 121.211 li
252.45 121.044 li
252.867 120.794 li
253.367 120.544 li
253.867 120.378 li
254.284 120.128 li
254.784 119.961 li
255.284 119.711 li
255.701 119.544 li
256.201 119.294 li
256.701 119.128 li
257.117 118.878 li
257.617 118.711 li
258.117 118.544 li
258.617 118.294 li
259.033 118.128 li
259.533 117.878 li
260.033 117.711 li
260.451 117.544 li
260.951 117.294 li
261.451 117.128 li
261.867 116.961 li
262.367 116.794 li
262.867 116.544 li
263.283 116.378 li
263.783 116.211 li
264.283 116.044 li
264.783 115.878 li
265.201 115.628 li
265.701 115.461 li
266.201 115.294 li
266.617 115.128 li
267.117 114.961 li
267.617 114.794 li
268.033 114.628 li
268.533 114.461 li
269.033 114.294 li
269.451 114.128 li
269.951 113.961 li
270.451 113.794 li
270.867 113.628 li
271.367 113.461 li
271.867 113.294 li
272.367 113.128 li
272.783 112.961 li
273.283 112.794 li
273.783 112.628 li
274.201 112.544 li
274.701 112.378 li
275.201 112.211 li
275.617 112.044 li
276.117 111.878 li
276.617 111.794 li
277.033 111.628 li
277.533 111.461 li
278.033 111.294 li
278.451 111.211 li
278.951 111.044 li
279.451 110.878 li
279.951 110.794 li
280.367 110.628 li
280.867 110.461 li
281.367 110.378 li
281.783 110.211 li
282.283 110.128 li
282.783 109.961 li
283.201 109.878 li
283.701 109.711 li
284.201 109.628 li
284.617 109.461 li
285.117 109.378 li
285.617 109.211 li
286.033 109.128 li
286.533 108.961 li
287.033 108.878 li
287.533 108.794 li
287.951 108.628 li
288.451 108.544 li
288.951 108.378 li
289.367 108.294 li
289.867 108.211 li
290.367 108.128 li
290.783 107.961 li
290.783 107.961 mo
291.283 107.878 li
291.783 107.794 li
292.201 107.628 li
292.701 107.544 li
293.201 107.461 li
293.617 107.378 li
294.117 107.294 li
294.617 107.211 li
295.117 107.044 li
295.533 106.961 li
296.033 106.878 li
296.533 106.794 li
296.951 106.711 li
297.451 106.628 li
297.951 106.544 li
298.367 106.461 li
298.867 106.378 li
299.367 106.294 li
299.783 106.211 li
300.283 106.128 li
300.783 106.044 li
301.201 105.961 li
301.701 105.878 li
302.201 105.794 li
302.701 105.711 li
303.117 105.628 li
303.617 105.544 li
304.117 105.461 li
304.533 105.461 li
305.033 105.378 li
305.533 105.294 li
305.951 105.211 li
306.451 105.128 li
306.951 105.044 li
307.367 105.044 li
307.867 104.961 li
308.367 104.878 li
308.867 104.794 li
309.283 104.794 li
309.783 104.711 li
310.283 104.628 li
310.701 104.628 li
311.201 104.544 li
311.701 104.461 li
312.117 104.461 li
312.617 104.378 li
313.117 104.378 li
313.533 104.294 li
314.033 104.211 li
314.533 104.211 li
314.951 104.128 li
315.451 104.128 li
315.951 104.044 li
316.451 104.044 li
316.867 103.961 li
317.367 103.961 li
317.867 103.878 li
318.283 103.878 li
318.783 103.794 li
319.283 103.794 li
319.701 103.711 li
320.201 103.711 li
320.701 103.711 li
321.117 103.628 li
321.617 103.628 li
322.117 103.628 li
322.533 103.544 li
323.033 103.544 li
323.533 103.544 li
324.033 103.461 li
324.451 103.461 li
324.951 103.461 li
325.451 103.378 li
325.867 103.378 li
326.367 103.378 li
326.867 103.378 li
327.283 103.294 li
327.783 103.294 li
328.283 103.294 li
328.701 103.294 li
329.201 103.294 li
329.701 103.211 li
330.117 103.211 li
330.617 103.211 li
331.117 103.211 li
331.617 103.211 li
332.033 103.211 li
332.533 103.211 li
333.033 103.211 li
333.451 103.211 li
333.951 103.211 li
334.451 103.128 li
334.867 103.128 li
335.367 103.128 li
335.867 103.128 li
336.283 103.128 li
336.783 103.128 li
337.283 103.128 li
337.701 103.128 li
337.701 103.128 mo
338.201 103.128 li
338.701 103.211 li
339.201 103.211 li
339.617 103.211 li
340.117 103.211 li
340.617 103.211 li
341.033 103.211 li
341.533 103.211 li
342.033 103.211 li
342.451 103.211 li
342.951 103.211 li
343.451 103.294 li
343.867 103.294 li
344.367 103.294 li
344.867 103.294 li
345.283 103.294 li
345.783 103.294 li
346.283 103.378 li
346.783 103.378 li
347.201 103.378 li
347.701 103.378 li
348.201 103.461 li
348.617 103.461 li
349.117 103.461 li
349.617 103.461 li
350.033 103.544 li
350.533 103.544 li
351.033 103.544 li
351.451 103.628 li
351.951 103.628 li
352.451 103.628 li
352.951 103.711 li
353.367 103.711 li
353.867 103.711 li
354.367 103.794 li
354.783 103.794 li
355.283 103.878 li
355.783 103.878 li
356.201 103.878 li
356.701 103.961 li
357.201 103.961 li
357.617 104.044 li
358.117 104.044 li
358.617 104.044 li
359.033 104.128 li
359.533 104.128 li
360.033 104.211 li
360.533 104.211 li
360.951 104.294 li
361.451 104.294 li
361.951 104.378 li
362.367 104.378 li
362.867 104.461 li
363.367 104.461 li
363.783 104.544 li
364.283 104.544 li
364.783 104.628 li
365.201 104.711 li
365.701 104.711 li
366.201 104.794 li
366.617 104.794 li
367.117 104.878 li
367.617 104.961 li
368.117 104.961 li
368.533 105.044 li
369.033 105.044 li
369.533 105.128 li
369.951 105.211 li
370.451 105.211 li
370.951 105.294 li
371.367 105.378 li
371.867 105.378 li
372.367 105.461 li
372.783 105.544 li
373.283 105.544 li
373.783 105.628 li
374.201 105.711 li
374.701 105.711 li
375.201 105.794 li
375.701 105.878 li
376.117 105.878 li
376.617 105.961 li
377.117 106.044 li
377.533 106.128 li
378.033 106.128 li
378.533 106.211 li
378.951 106.294 li
379.451 106.378 li
379.951 106.378 li
380.367 106.461 li
380.867 106.544 li
381.367 106.628 li
381.783 106.711 li
382.283 106.711 li
382.783 106.794 li
383.283 106.878 li
383.701 106.961 li
384.201 107.044 li
384.701 107.128 li
384.701 107.128 mo
385.117 107.128 li
385.617 107.211 li
386.117 107.294 li
386.533 107.378 li
387.033 107.461 li
387.533 107.544 li
387.951 107.628 li
388.451 107.628 li
388.951 107.711 li
389.367 107.794 li
389.867 107.878 li
390.367 107.961 li
390.867 108.044 li
391.283 108.128 li
391.783 108.211 li
392.283 108.294 li
392.701 108.378 li
393.201 108.378 li
393.701 108.461 li
394.117 108.544 li
394.617 108.628 li
395.117 108.711 li
395.533 108.794 li
396.033 108.878 li
396.533 108.961 li
397.033 109.044 li
397.451 109.128 li
397.951 109.211 li
398.451 109.294 li
398.867 109.378 li
399.367 109.461 li
399.867 109.544 li
400.283 109.628 li
400.783 109.711 li
401.283 109.794 li
401.699 109.878 li
402.199 109.961 li
402.699 110.044 li
403.117 110.128 li
403.617 110.211 li
404.117 110.294 li
404.617 110.378 li
405.033 110.461 li
405.533 110.544 li
406.033 110.628 li
406.449 110.711 li
406.949 110.794 li
407.449 110.878 li
407.867 110.961 li
408.367 111.128 li
408.867 111.211 li
409.283 111.294 li
409.783 111.378 li
410.283 111.461 li
410.699 111.544 li
411.199 111.628 li
411.699 111.711 li
412.199 111.794 li
412.617 111.878 li
413.117 111.961 li
413.617 112.044 li
414.033 112.211 li
414.533 112.294 li
415.033 112.378 li
415.449 112.461 li
415.949 112.545 li
416.449 112.628 li
416.867 112.711 li
417.367 112.795 li
417.867 112.961 li
418.283 113.045 li
418.783 113.128 li
419.283 113.211 li
419.783 113.295 li
420.199 113.378 li
420.699 113.461 li
421.199 113.628 li
421.617 113.711 li
422.117 113.795 li
422.617 113.878 li
423.033 113.961 li
423.533 114.045 li
424.033 114.211 li
424.449 114.295 li
424.949 114.378 li
425.449 114.461 li
425.867 114.545 li
426.367 114.628 li
426.867 114.795 li
427.367 114.878 li
427.783 114.961 li
428.283 115.045 li
428.783 115.128 li
429.199 115.295 li
429.699 115.378 li
430.199 115.461 li
430.617 115.545 li
431.117 115.628 li
431.617 115.795 li
431.617 115.794 mo
432.033 115.878 li
432.533 115.961 li
433.033 116.044 li
433.451 116.128 li
433.951 116.294 li
434.451 116.378 li
434.951 116.461 li
435.367 116.544 li
435.867 116.711 li
436.367 116.794 li
436.783 116.878 li
437.283 116.961 li
437.783 117.128 li
438.201 117.211 li
438.701 117.294 li
439.201 117.378 li
439.617 117.544 li
440.117 117.628 li
440.617 117.711 li
441.117 117.794 li
441.533 117.961 li
442.033 118.044 li
442.533 118.128 li
442.949 118.211 li
443.449 118.378 li
443.949 118.461 li
444.367 118.544 li
444.867 118.628 li
445.367 118.794 li
445.783 118.878 li
446.283 118.961 li
446.783 119.044 li
447.199 119.211 li
447.699 119.294 li
448.199 119.378 li
448.699 119.461 li
449.117 119.628 li
449.617 119.711 li
450.117 119.794 li
450.533 119.961 li
451.033 120.044 li
451.533 120.128 li
451.949 120.211 li
452.449 120.378 li
452.949 120.461 li
453.367 120.544 li
453.867 120.711 li
454.367 120.795 li
454.783 120.878 li
455.283 121.045 li
455.783 121.128 li
456.283 121.211 li
456.699 121.295 li
457.199 121.461 li
457.699 121.545 li
458.117 121.628 li
458.617 121.795 li
459.117 121.878 li
459.533 121.961 li
460.033 122.128 li
460.533 122.211 li
460.949 122.295 li
461.449 122.378 li
461.949 122.545 li
462.367 122.628 li
462.867 122.711 li
463.367 122.878 li
463.867 122.961 li
464.283 123.045 li
464.783 123.211 li
465.283 123.295 li
465.699 123.378 li
466.199 123.545 li
466.699 123.628 li
467.117 123.711 li
467.617 123.878 li
468.117 123.961 li
468.533 124.045 li
469.033 124.211 li
469.533 124.295 li
469.949 124.378 li
470.449 124.545 li
470.949 124.628 li
471.449 124.711 li
471.867 124.795 li
472.367 124.961 li
472.867 125.045 li
473.283 125.128 li
473.783 125.295 li
474.283 125.378 li
474.699 125.461 li
475.199 125.628 li
475.699 125.711 li
476.117 125.795 li
476.617 125.961 li
477.117 126.045 li
477.617 126.128 li
478.033 126.295 li
478.533 126.378 li
0 .74902 .74902 rgb
@
51.9502 361.127 mo
52.3672 360.461 li
52.8672 359.877 li
53.3672 359.211 li
53.7837 358.627 li
54.2837 357.961 li
54.7837 357.377 li
55.2002 356.795 li
55.7002 356.127 li
56.2002 355.545 li
56.2002 355.545 mo
56.6172 354.877 li
57.1172 354.295 li
57.6172 353.711 li
58.0337 353.045 li
58.5337 352.461 li
59.0337 351.877 li
59.5337 351.295 li
59.9502 350.627 li
60.4502 350.045 li
60.9502 349.461 li
61.3667 348.877 li
61.8667 348.211 li
62.3667 347.627 li
62.7837 347.045 li
63.2837 346.461 li
63.7837 345.877 li
64.2002 345.295 li
64.7002 344.711 li
65.2002 344.045 li
65.6167 343.461 li
66.1167 342.877 li
66.6167 342.295 li
67.1167 341.711 li
67.5337 341.127 li
68.0337 340.545 li
68.5337 339.961 li
68.9502 339.377 li
69.4502 338.795 li
69.9502 338.211 li
70.3667 337.627 li
70.8667 337.045 li
71.3667 336.461 li
71.7837 335.877 li
72.2837 335.295 li
72.7837 334.711 li
73.2002 334.211 li
73.7002 333.627 li
74.2002 333.045 li
74.7002 332.461 li
75.1167 331.877 li
75.6167 331.295 li
76.1167 330.711 li
76.5337 330.211 li
77.0337 329.627 li
77.5337 329.045 li
77.9502 328.461 li
78.4502 327.961 li
78.9502 327.377 li
79.3667 326.795 li
79.8667 326.211 li
80.3667 325.711 li
80.7832 325.127 li
81.2832 324.545 li
81.7832 324.045 li
82.2832 323.461 li
82.7002 322.961 li
83.2002 322.377 li
83.7002 321.795 li
84.1167 321.295 li
84.6167 320.711 li
85.1167 320.211 li
85.5332 319.627 li
86.0332 319.045 li
86.5332 318.545 li
86.9502 317.961 li
87.4502 317.461 li
87.9502 316.877 li
88.3667 316.377 li
88.8667 315.877 li
89.3667 315.295 li
89.8667 314.795 li
90.2832 314.211 li
90.7832 313.711 li
91.2832 313.127 li
91.6997 312.627 li
92.1997 312.127 li
92.6997 311.545 li
93.1167 311.045 li
93.6167 310.545 li
94.1167 309.961 li
94.5332 309.461 li
95.0332 308.961 li
95.5332 308.377 li
96.0332 307.877 li
96.4497 307.377 li
96.9497 306.877 li
97.4497 306.295 li
97.8667 305.795 li
98.3667 305.295 li
98.8667 304.795 li
99.2832 304.295 li
99.7832 303.795 li
100.283 303.211 li
100.7 302.711 li
101.2 302.211 li
101.7 301.711 li
102.117 301.211 li
102.617 300.711 li
103.117 300.211 li
103.117 300.211 mo
103.617 299.711 li
104.034 299.211 li
104.534 298.711 li
105.034 298.211 li
105.45 297.711 li
105.95 297.211 li
106.45 296.711 li
106.867 296.211 li
107.367 295.711 li
107.867 295.211 li
108.284 294.711 li
108.784 294.211 li
109.284 293.711 li
109.7 293.211 li
110.2 292.711 li
110.7 292.211 li
111.2 291.711 li
111.617 291.295 li
112.117 290.795 li
112.617 290.295 li
113.034 289.795 li
113.534 289.295 li
114.034 288.877 li
114.45 288.377 li
114.95 287.877 li
115.45 287.377 li
115.867 286.961 li
116.367 286.461 li
116.867 285.961 li
117.284 285.461 li
117.784 285.045 li
118.284 284.545 li
118.784 284.045 li
119.2 283.627 li
119.7 283.127 li
120.2 282.627 li
120.617 282.211 li
121.117 281.711 li
121.617 281.295 li
122.034 280.795 li
122.534 280.377 li
123.034 279.877 li
123.45 279.377 li
123.95 278.961 li
124.45 278.461 li
124.867 278.045 li
125.367 277.545 li
125.867 277.127 li
126.367 276.711 li
126.783 276.211 li
127.283 275.795 li
127.783 275.295 li
128.2 274.877 li
128.7 274.377 li
129.2 273.961 li
129.617 273.545 li
130.117 273.045 li
130.617 272.627 li
131.033 272.211 li
131.533 271.711 li
132.033 271.293 li
132.45 270.877 li
132.95 270.377 li
133.45 269.961 li
133.95 269.543 li
134.367 269.127 li
134.867 268.627 li
135.367 268.211 li
135.783 267.793 li
136.283 267.377 li
136.783 266.877 li
137.2 266.461 li
137.7 266.043 li
138.2 265.627 li
138.617 265.211 li
139.117 264.793 li
139.617 264.377 li
140.117 263.877 li
140.533 263.461 li
141.033 263.043 li
141.533 262.627 li
141.95 262.211 li
142.45 261.793 li
142.95 261.377 li
143.367 260.961 li
143.867 260.543 li
144.367 260.127 li
144.783 259.711 li
145.283 259.293 li
145.783 258.877 li
146.2 258.461 li
146.7 258.043 li
147.2 257.627 li
147.7 257.211 li
148.117 256.793 li
148.617 256.377 li
149.117 256.043 li
149.533 255.627 li
150.033 255.211 li
150.034 255.211 mo
150.534 254.795 li
150.95 254.377 li
151.45 253.961 li
151.95 253.545 li
152.367 253.211 li
152.867 252.795 li
153.367 252.377 li
153.784 251.961 li
154.284 251.627 li
154.784 251.211 li
155.284 250.795 li
155.7 250.377 li
156.2 250.045 li
156.7 249.627 li
157.117 249.211 li
157.617 248.877 li
158.117 248.461 li
158.534 248.045 li
159.034 247.711 li
159.534 247.295 li
159.95 246.877 li
160.45 246.545 li
160.95 246.127 li
161.367 245.795 li
161.867 245.377 li
162.367 244.961 li
162.867 244.627 li
163.284 244.211 li
163.784 243.877 li
164.284 243.461 li
164.7 243.127 li
165.2 242.711 li
165.7 242.377 li
166.117 241.961 li
166.617 241.627 li
167.117 241.295 li
167.534 240.877 li
168.034 240.545 li
168.534 240.127 li
168.951 239.795 li
169.451 239.377 li
169.951 239.045 li
170.451 238.711 li
170.867 238.295 li
171.367 237.961 li
171.867 237.627 li
172.284 237.211 li
172.784 236.877 li
173.284 236.545 li
173.701 236.127 li
174.201 235.795 li
174.701 235.461 li
175.117 235.127 li
175.617 234.711 li
176.117 234.377 li
176.534 234.045 li
177.034 233.711 li
177.534 233.377 li
178.034 232.961 li
178.451 232.627 li
178.951 232.295 li
179.451 231.961 li
179.867 231.627 li
180.367 231.295 li
180.867 230.961 li
181.284 230.545 li
181.784 230.211 li
182.284 229.877 li
182.701 229.545 li
183.201 229.211 li
183.701 228.877 li
184.201 228.545 li
184.617 228.211 li
185.117 227.877 li
185.617 227.545 li
186.034 227.211 li
186.534 226.877 li
187.034 226.545 li
187.451 226.211 li
187.951 225.877 li
188.451 225.545 li
188.867 225.211 li
189.367 224.877 li
189.867 224.545 li
190.284 224.211 li
190.784 223.961 li
191.284 223.627 li
191.784 223.295 li
192.201 222.961 li
192.701 222.627 li
193.201 222.295 li
193.617 221.961 li
194.117 221.711 li
194.617 221.377 li
195.034 221.045 li
195.534 220.711 li
196.034 220.461 li
196.451 220.127 li
196.951 219.795 li
196.95 219.795 mo
197.45 219.461 li
197.867 219.211 li
198.367 218.877 li
198.867 218.545 li
199.367 218.211 li
199.784 217.961 li
200.284 217.627 li
200.784 217.295 li
201.2 217.045 li
201.7 216.711 li
202.2 216.461 li
202.617 216.127 li
203.117 215.795 li
203.617 215.545 li
204.034 215.211 li
204.534 214.961 li
205.034 214.627 li
205.45 214.295 li
205.95 214.045 li
206.45 213.711 li
206.95 213.461 li
207.367 213.127 li
207.867 212.877 li
208.367 212.545 li
208.784 212.295 li
209.284 211.961 li
209.784 211.711 li
210.2 211.377 li
210.7 211.127 li
211.2 210.877 li
211.617 210.545 li
212.117 210.295 li
212.617 209.961 li
213.034 209.711 li
213.534 209.461 li
214.034 209.127 li
214.534 208.877 li
214.95 208.627 li
215.45 208.295 li
215.95 208.045 li
216.367 207.795 li
216.867 207.461 li
217.367 207.211 li
217.784 206.961 li
218.284 206.627 li
218.784 206.377 li
219.2 206.127 li
219.7 205.877 li
220.2 205.545 li
220.617 205.295 li
221.117 205.045 li
221.617 204.795 li
222.117 204.545 li
222.534 204.211 li
223.034 203.961 li
223.534 203.711 li
223.95 203.461 li
224.45 203.211 li
224.95 202.961 li
225.367 202.627 li
225.867 202.377 li
226.367 202.127 li
226.784 201.877 li
227.284 201.627 li
227.784 201.377 li
228.284 201.127 li
228.7 200.877 li
229.2 200.628 li
229.7 200.378 li
230.117 200.128 li
230.617 199.878 li
231.117 199.628 li
231.534 199.378 li
232.034 199.128 li
232.534 198.878 li
232.95 198.628 li
233.45 198.378 li
233.95 198.128 li
234.367 197.878 li
234.867 197.628 li
235.367 197.378 li
235.867 197.128 li
236.284 196.878 li
236.784 196.711 li
237.284 196.461 li
237.7 196.211 li
238.2 195.961 li
238.7 195.711 li
239.117 195.461 li
239.617 195.294 li
240.117 195.044 li
240.534 194.794 li
241.034 194.544 li
241.534 194.294 li
241.95 194.128 li
242.45 193.878 li
242.95 193.628 li
243.45 193.378 li
243.867 193.211 li
243.867 193.211 mo
244.367 192.961 li
244.867 192.711 li
245.284 192.461 li
245.784 192.294 li
246.284 192.044 li
246.7 191.794 li
247.2 191.628 li
247.7 191.378 li
248.117 191.128 li
248.617 190.961 li
249.117 190.711 li
249.534 190.461 li
250.034 190.294 li
250.534 190.044 li
251.034 189.878 li
251.45 189.628 li
251.95 189.461 li
252.45 189.211 li
252.867 188.961 li
253.367 188.794 li
253.867 188.544 li
254.284 188.378 li
254.784 188.128 li
255.284 187.961 li
255.701 187.711 li
256.201 187.544 li
256.701 187.294 li
257.117 187.128 li
257.617 186.878 li
258.117 186.711 li
258.617 186.544 li
259.033 186.294 li
259.533 186.128 li
260.033 185.878 li
260.451 185.711 li
260.951 185.461 li
261.451 185.294 li
261.867 185.128 li
262.367 184.878 li
262.867 184.711 li
263.283 184.544 li
263.783 184.294 li
264.283 184.128 li
264.783 183.961 li
265.201 183.711 li
265.701 183.544 li
266.201 183.378 li
266.617 183.128 li
267.117 182.961 li
267.617 182.794 li
268.033 182.628 li
268.533 182.378 li
269.033 182.211 li
269.451 182.044 li
269.951 181.878 li
270.451 181.628 li
270.867 181.461 li
271.367 181.294 li
271.867 181.128 li
272.367 180.961 li
272.783 180.794 li
273.283 180.544 li
273.783 180.378 li
274.201 180.211 li
274.701 180.044 li
275.201 179.878 li
275.617 179.711 li
276.117 179.544 li
276.617 179.378 li
277.033 179.128 li
277.533 178.961 li
278.033 178.794 li
278.451 178.628 li
278.951 178.461 li
279.451 178.294 li
279.951 178.128 li
280.367 177.961 li
280.867 177.794 li
281.367 177.628 li
281.783 177.461 li
282.283 177.294 li
282.783 177.128 li
283.201 176.961 li
283.701 176.794 li
284.201 176.628 li
284.617 176.461 li
285.117 176.294 li
285.617 176.128 li
286.033 175.961 li
286.533 175.878 li
287.033 175.711 li
287.533 175.544 li
287.951 175.378 li
288.451 175.211 li
288.951 175.044 li
289.367 174.878 li
289.867 174.711 li
290.367 174.628 li
290.783 174.461 li
290.783 174.461 mo
291.283 174.294 li
291.783 174.128 li
292.201 173.961 li
292.701 173.794 li
293.201 173.711 li
293.617 173.544 li
294.117 173.378 li
294.617 173.211 li
295.117 173.128 li
295.533 172.961 li
296.033 172.794 li
296.533 172.628 li
296.951 172.544 li
297.451 172.378 li
297.951 172.211 li
298.367 172.128 li
298.867 171.961 li
299.367 171.794 li
299.783 171.628 li
300.283 171.544 li
300.783 171.378 li
301.201 171.211 li
301.701 171.128 li
302.201 170.961 li
302.701 170.878 li
303.117 170.711 li
303.617 170.544 li
304.117 170.461 li
304.533 170.294 li
305.033 170.211 li
305.533 170.044 li
305.951 169.878 li
306.451 169.794 li
306.951 169.628 li
307.367 169.544 li
307.867 169.378 li
308.367 169.294 li
308.867 169.128 li
309.283 169.044 li
309.783 168.878 li
310.283 168.794 li
310.701 168.628 li
311.201 168.544 li
311.701 168.378 li
312.117 168.294 li
312.617 168.128 li
313.117 168.044 li
313.533 167.878 li
314.033 167.794 li
314.533 167.628 li
314.951 167.544 li
315.451 167.461 li
315.951 167.294 li
316.451 167.211 li
316.867 167.044 li
317.367 166.961 li
317.867 166.878 li
318.283 166.711 li
318.783 166.628 li
319.283 166.544 li
319.701 166.378 li
320.201 166.294 li
320.701 166.211 li
321.117 166.044 li
321.617 165.961 li
322.117 165.878 li
322.533 165.711 li
323.033 165.628 li
323.533 165.544 li
324.033 165.378 li
324.451 165.294 li
324.951 165.211 li
325.451 165.128 li
325.867 164.961 li
326.367 164.878 li
326.867 164.794 li
327.283 164.711 li
327.783 164.628 li
328.283 164.461 li
328.701 164.378 li
329.201 164.294 li
329.701 164.211 li
330.117 164.128 li
330.617 163.961 li
331.117 163.878 li
331.617 163.794 li
332.033 163.711 li
332.533 163.628 li
333.033 163.544 li
333.451 163.378 li
333.951 163.294 li
334.451 163.211 li
334.867 163.128 li
335.367 163.044 li
335.867 162.961 li
336.283 162.878 li
336.783 162.794 li
337.283 162.711 li
337.701 162.628 li
337.701 162.628 mo
338.201 162.544 li
338.701 162.378 li
339.201 162.294 li
339.617 162.211 li
340.117 162.128 li
340.617 162.044 li
341.033 161.961 li
341.533 161.878 li
342.033 161.794 li
342.451 161.711 li
342.951 161.628 li
343.451 161.544 li
343.867 161.461 li
344.367 161.378 li
344.867 161.294 li
345.283 161.211 li
345.783 161.128 li
346.283 161.128 li
346.783 161.044 li
347.201 160.961 li
347.701 160.878 li
348.201 160.794 li
348.617 160.711 li
349.117 160.628 li
349.617 160.544 li
350.033 160.461 li
350.533 160.378 li
351.033 160.294 li
351.451 160.294 li
351.951 160.211 li
352.451 160.128 li
352.951 160.044 li
353.367 159.961 li
353.867 159.878 li
354.367 159.794 li
354.783 159.794 li
355.283 159.711 li
355.783 159.628 li
356.201 159.544 li
356.701 159.461 li
357.201 159.461 li
357.617 159.378 li
358.117 159.294 li
358.617 159.211 li
359.033 159.128 li
359.533 159.128 li
360.033 159.044 li
360.533 158.961 li
360.951 158.878 li
361.451 158.878 li
361.951 158.794 li
362.367 158.711 li
362.867 158.711 li
363.367 158.628 li
363.783 158.544 li
364.283 158.461 li
364.783 158.461 li
365.201 158.378 li
365.701 158.294 li
366.201 158.294 li
366.617 158.211 li
367.117 158.128 li
367.617 158.128 li
368.117 158.044 li
368.533 157.961 li
369.033 157.961 li
369.533 157.878 li
369.951 157.794 li
370.451 157.794 li
370.951 157.711 li
371.367 157.711 li
371.867 157.628 li
372.367 157.544 li
372.783 157.544 li
373.283 157.461 li
373.783 157.461 li
374.201 157.378 li
374.701 157.294 li
375.201 157.294 li
375.701 157.211 li
376.117 157.211 li
376.617 157.128 li
377.117 157.128 li
377.533 157.044 li
378.033 157.044 li
378.533 156.961 li
378.951 156.961 li
379.451 156.878 li
379.951 156.878 li
380.367 156.794 li
380.867 156.794 li
381.367 156.711 li
381.783 156.711 li
382.283 156.628 li
382.783 156.628 li
383.283 156.544 li
383.701 156.544 li
384.201 156.461 li
384.701 156.461 li
384.701 156.461 mo
385.117 156.378 li
385.617 156.378 li
386.117 156.294 li
386.533 156.294 li
387.033 156.294 li
387.533 156.211 li
387.951 156.211 li
388.451 156.128 li
388.951 156.128 li
389.367 156.044 li
389.867 156.044 li
390.367 156.044 li
390.867 155.961 li
391.283 155.961 li
391.783 155.961 li
392.283 155.878 li
392.701 155.878 li
393.201 155.794 li
393.701 155.794 li
394.117 155.794 li
394.617 155.711 li
395.117 155.711 li
395.533 155.711 li
396.033 155.628 li
396.533 155.628 li
397.033 155.628 li
397.451 155.544 li
397.951 155.544 li
398.451 155.544 li
398.867 155.544 li
399.367 155.461 li
399.867 155.461 li
400.283 155.461 li
400.783 155.378 li
401.283 155.378 li
401.699 155.378 li
402.199 155.378 li
402.699 155.294 li
403.117 155.294 li
403.617 155.294 li
404.117 155.294 li
404.617 155.211 li
405.033 155.211 li
405.533 155.211 li
406.033 155.211 li
406.449 155.128 li
406.949 155.128 li
407.449 155.128 li
407.867 155.128 li
408.367 155.128 li
408.867 155.044 li
409.283 155.044 li
409.783 155.044 li
410.283 155.044 li
410.699 155.044 li
411.199 154.961 li
411.699 154.961 li
412.199 154.961 li
412.617 154.961 li
413.117 154.961 li
413.617 154.961 li
414.033 154.878 li
414.533 154.878 li
415.033 154.878 li
415.449 154.878 li
415.949 154.878 li
416.449 154.878 li
416.867 154.878 li
417.367 154.794 li
417.867 154.794 li
418.283 154.794 li
418.783 154.794 li
419.283 154.794 li
419.783 154.794 li
420.199 154.794 li
420.699 154.794 li
421.199 154.794 li
421.617 154.794 li
422.117 154.794 li
422.617 154.711 li
423.033 154.711 li
423.533 154.711 li
424.033 154.711 li
424.449 154.711 li
424.949 154.711 li
425.449 154.711 li
425.867 154.711 li
426.367 154.711 li
426.867 154.711 li
427.367 154.711 li
427.783 154.711 li
428.283 154.711 li
428.783 154.711 li
429.199 154.711 li
429.699 154.711 li
430.199 154.711 li
430.617 154.711 li
431.117 154.711 li
431.617 154.711 li
431.617 154.711 mo
432.033 154.711 li
432.533 154.711 li
433.033 154.711 li
433.451 154.711 li
433.951 154.711 li
434.451 154.711 li
434.951 154.711 li
435.367 154.711 li
435.867 154.711 li
436.367 154.711 li
436.783 154.711 li
437.283 154.711 li
437.783 154.711 li
438.201 154.711 li
438.701 154.711 li
439.201 154.711 li
439.617 154.711 li
440.117 154.711 li
440.617 154.794 li
441.117 154.794 li
441.533 154.794 li
442.033 154.794 li
442.533 154.794 li
442.949 154.794 li
443.449 154.794 li
443.949 154.794 li
444.367 154.794 li
444.867 154.794 li
445.367 154.794 li
445.783 154.878 li
446.283 154.878 li
446.783 154.878 li
447.199 154.878 li
447.699 154.878 li
448.199 154.878 li
448.699 154.878 li
449.117 154.878 li
449.617 154.961 li
450.117 154.961 li
450.533 154.961 li
451.033 154.961 li
451.533 154.961 li
451.949 154.961 li
452.449 154.961 li
452.949 155.044 li
453.367 155.044 li
453.867 155.044 li
454.367 155.044 li
454.783 155.044 li
455.283 155.128 li
455.783 155.128 li
456.283 155.128 li
456.699 155.128 li
457.199 155.128 li
457.699 155.128 li
458.117 155.211 li
458.617 155.211 li
459.117 155.211 li
459.533 155.211 li
460.033 155.211 li
460.533 155.294 li
460.949 155.294 li
461.449 155.294 li
461.949 155.294 li
462.367 155.378 li
462.867 155.378 li
463.367 155.378 li
463.867 155.378 li
464.283 155.378 li
464.783 155.461 li
465.283 155.461 li
465.699 155.461 li
466.199 155.461 li
466.699 155.544 li
467.117 155.544 li
467.617 155.544 li
468.117 155.544 li
468.533 155.628 li
469.033 155.628 li
469.533 155.628 li
469.949 155.711 li
470.449 155.711 li
470.949 155.711 li
471.449 155.711 li
471.867 155.794 li
472.367 155.794 li
472.867 155.794 li
473.283 155.794 li
473.783 155.878 li
474.283 155.878 li
474.699 155.878 li
475.199 155.961 li
475.699 155.961 li
476.117 155.961 li
476.617 156.044 li
477.117 156.044 li
477.617 156.044 li
478.033 156.128 li
478.533 156.128 li
.74902 0 .74902 rgb
@
grestore
.137255 .121569 .12549 rgb
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.systemdict beginWJGNCK+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/space <1C60D8A8C9B854D00D> |-/parenleft <1C60D8A8C9B81F2C3A3BDBA2E9DFEE10E6670AEBC7475A54CE0B91C398F722701ECC7FFACD7325FD69C372628B8FE38CA7FCBE37C8CC6151D955D330AD238F5A7ADFF3EC6F792676AC012B90C4C6A5CC37C0C314284064> |-/parenright <1C60D8A8C9B81F2C240532A9306D88FBE802946D4D7C96BED003DF2FCDB8DDB235CA368A4FADF1D0309B087452F4DD7B6CF26A6C550E92B406C8BCDB5365991B0FCCD46328F398E95D059281A86422A9CC2837C1B0EF> |-/D <1C60D8A8C9B6079F62ED4B3208AD694719329DB5FF23BCAF76D41058F7AAAFF2529AC265BA39C333293E127AD9C0A8013616ECDB9EC4B8FC987A3C84239B76F354F924D3BA3E82C9BA9779AE94CCE8ABEEADDA4A3C72DD0361E6B5DAAF6C5A39F74710AA0C4E1E> |-/I <1C60D8A8C9B854D0EE4B20327A907C36187261> |-/S <1C60D8A8C9B64EDFB8831DC7D3DA5352C683CFE7ADDB1F2F7D19136185D1F816C3BE09EC1E84619F52030DEE9359B5F11BDC142E51FA821DBBAA94D355CDB3194A176F4CAFE2F8762140A61B8DB4801B25EC39CF8CD3F7F21C11EB8BF2FEAA7BF71364CB0E29D9153C5428F8E2556CFDCDFCF7C63E7AA008F518E6EAA3DEB5EC8960FB0234452B3B55FF1BB7B980C85D0DFF1CA34BE144E02D5E8A581ACC1C4C80D7396F6E85C6E2CC3BAA0E140AF4F656AC7D073077DF7B4E8B5856F92B> |-/c <1C60D8A8C9B7A73DB9BB4BD7623FA1F3C03F832EDB3EBDEEADF30D53894CA8D0E43AB471E7BA022BFFD675D506AE0402072D4B89708C39F4DE4224D2E08E345C99AE382D5A27CCF2E9E7F36B9FF185D5B1582E55EEA79434D321A3126C806AF846740E1C2FF9A41681247A023D851231C058548F93E1F768FE103B973ACF15C379D13F> |-/d <1C60D8A8C9B7EF322B197A4CECAEBFA93CFC6ACCC571419BFA5461EED77BFB3D8FE900AE7AE7F3558D5F515A8BFDAAA816E55EE92701787F654353E7BD1A4CD427A1C3D52C079A2D5373BCA2D0E81E97334505A34C6046F7856771303B422A1AED127DFB82533DF581F3B1C10CE7C6EB68EFDC809921DBBDF534E7567CC2D2750B89DE10766FCFB923BB97A09A4C79BB9A> |-/e <1C60D8A8C9B7EF322BB83B593C4F5531F1493EEBEAC6F4C92C25FF10F1FB8EC7E530E4B1F1C9E51F31B44D59539AB4135F310FAB43C5A16AA1F4EA07D67BBB916AB355913EB7D45F3AC7C9CF1FD32728FCA1A2D5BBD257CEF831AE751904AD7F4FBE21E10F3A844E74CF6B850E894017941E45AE6BCDA168BF4979345C67DB13F0C5FE9888EB731B0A06A8D5D1475F60C11332FBE633540E50C86671A26FD83CD870BB68F7A9> |-/i <1C60D8A8C9B88C084EE8A68C7FA2A58C433876A9B19799899FEF7A13> |-/l <1C60D8A8C9B88C084B857C39B4185359B4FDA8> |-/m <1C60D8A8C9B6B41C87955CDC3639140F8FA33C70CE271539122DB89AC63FD596C1AE79761050C7D5317C1A1DE3923CB96B736E4977F68D67BD6922E1964FE05D51AB32C479ED8218C444609251096F1947B0C4960920FFF6AE70BA15738BF1106729A839E228137A715EA1C031F63BED533B4300B92AAA320484B5BAB342D2B48F6B68F518B0142254C333F20247ED0EA3DC72FEE0> |-/n <1C60D8A8C9B7EF3217E3BC2FA8BE5FFDDE7BA6B2BB97B82CAF2D20211744A627BCE3171C7124085EFB87C01551538DC74ADD76A4A469E736F37382A8E68FCF64FCF52E65C49BB3C47B4136748A05BC6A02EABE080CF030B375C809CD67343FEE2448D6> |-/o <1C60D8A8C9B7EF322BB7315D499F0FAA57DF741D86CA9D8DB7E5AD83A05FD148F53EC24E4E6BF5C292C0FC171599978D99E35AB7CAFB8CB65593939725D520CE4A30CDA834D29EB92A082721C79AE18875772ECDD437AD2148D76D23F045CDA1E61619294E456095F14AB8D580008870DAABB6481A0C5B1656CACCDE79F2741F9BB15B> |-/p <1C60D8A8C9B7EF322BA467487181334E955BE246DF5D0EF3A11E2BDC8B674F6546E88A741A6A22FD8101960B985F64CBBE95E02BBF21B77F9A8334BFBA9533492E7CA0F0DECFBF12D8467325B4174F987BBF353C73C5D70057F40D42361649961064C7B7F613D284310CB0B59908DA85F34298558C6B0DF453AED21873A379BC9BBE582E1040BDEC2230FBB52642> |-/r <1C60D8A8C9B81F2C037408F8BF0E381AE4C9649BA754678B3C9CB9B6F5985C2C3DD85532C988309B457CF86E09A953B63981C0C686B55A9B6F57C7F684C3CFA5497AE68C179CE338521D1494441800> |-/s <1C60D8A8C9B7A73DE557A2AA450BB57EE39D611FDE79056DA153DEDE8E0D2C9D756143DA5E614060C362E0813E35369DA2F002330267D2CFA81D3D9AA172C91A8B8E19BB92CE3CFBA62200E9E8175CCCB3A5FA559ECF71DD7F2B47B117C69AC3637EDAE62020C9DAFDDB718C27C76EF62794CF8B187D103B05AC07655F04A6D9D5181CB287F032D98B2512B2A9B281D13745308AC05B350DA95BA0BE14F12630B5B2A718215DC0DE5A544FA267BEF8FD5CF5292808F195D31A5EEC3ADC63> |-/t <1C60D8A8C9B854D0DE8EB299D76AFE3A3E7733E2D967660702D2EB06537F4BAA1F2129056DC9771C91484E3F22B637802F61054AB3D0E9902E08C4E6B9ADDC0E2F51D38CAD652B2A777D9304919B1B524DD7CC56553E03BE971752FD0161CF> |-/u <1C60D8A8C9B7EF3216DE239CB7942A5DFDA331E51AE98893153168B8E02CBA8B703AF815B3549788123453BB74B7299D82AED651A97B215A966DFD3A6E1F3128BBB9E96D3A241ED635729E83FA4EE02FD12FE6F7CB1ABC83B0> |-/v <1C60D8A8C9B7A73DDF32B99894CC6FA66F5D07EC695DA6C164CB40F9A791729569775D3BE9C3> |-/x <1C60D8A8C9B7A73DB974843DC052273B2236A049EB6E5FE1C55CD985D3062CB5B3D8A046808C9F7D76A5170CE8699B434328F999D97554357E6BC34F0469> |-/y <1C60D8A8C9B7A73DB9AA12572CE44B37D0759EC5FA4258DA87660F3841304B61A1A911D1876BE6D5484230C2A9DECADC4A3BB259186F9713382F53071656420086C18502612AEB2A0E39781AC31868BC5BE3AB2872591151CD2F994021F04AB4E3C05AD2A97CE0F737B6F0C53FBA3CB18D70D123> |-systemdict /gcheck known {setglobal} if end {end} ifendWJGNCK+Helvetica /Encoding getdup 32 /space putdup 40 /parenleft putdup 41 /parenright putdup 68 /D putdup 73 /I putdup 83 /S putdup 99 /c putdup 100 /d putdup 101 /e putdup 105 /i putdup 108 /l putdup 109 /m putdup 110 /n putdup 111 /o putdup 112 /p putdup 114 /r putdup 115 /s putdup 116 /t putdup 117 /u putdup 118 /v putdup 120 /x putdup 121 /y putpop%ADOEndSubsetFont
/WJGNCK+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four /five /six /.notdef /eight 11{/.notdef}rp /D 4{/.notdef}rp /I 9{/.notdef}rp /S 15{/.notdef}rp /c /d /e 3{/.notdef}rp /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /s /t /u /v /.notdef /x /y 134{/.notdef}rp]WJGNCK+Helvetica nfWJGNCK+Helvetica*1 [18 0 0 -18 0 0 ]msf217.706 396.534 mo(stimulus speed)shWJGNCK+Helvetica*1 [0 -18 -18 0 0 0 ]msf15.4556 310.042 mo(Direction Selectivity Index \(DSI\))[-12.999 -3.99902 -5.99414 -10.0107 -9 -5.00098 -3.99902 -10.0107 -10.0107 -5.00098 -12.0059 -10.0107 -3.99902 -10.0107 -9 -5.00098 -3.99902 -9 -3.99902 -5.00098 -9 -5.00098 -5.00098 -10.0107 -10.0107 -10.0107 -9 -5.00098 -5.99414 -12.999 -12.0059 -5.00098 0 ]yshWJGNCK+Helvetica*1 [10 0 0 -10 0 0 ]msf50.5337 364.713 mo( )sh497.362 12.2993 mo( )sh201.2 350.211 mo
201.2 224.295 li
291.201 224.295 li
291.201 350.211 li
201.2 350.211 li
cp
1 1 1 rgb
ef
201.2 350.211 mo
201.2 224.295 li
291.201 224.295 li
291.201 350.211 li
201.2 350.211 li
@
291.201 350.211 mo
291.201 224.295 li
201.2 350.211 mo
201.2 224.295 li
201.2 224.295 mo
291.201 224.295 li
201.2 350.211 mo
291.201 350.211 li
201.2 350.211 mo
201.2 224.295 li
201.2 350.211 mo
291.201 350.211 li
291.201 350.211 mo
291.201 224.295 li
201.2 350.211 mo
201.2 224.295 li
201.2 224.295 mo
291.201 224.295 li
201.2 350.211 mo
291.201 350.211 li
0 0 0 rgb
@
.137255 .121569 .12549 rgb
%ADOBeginSubsetFont: Symbol Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Symbol def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 4 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 108 /lambda putdef/FontBBox {-167 -299 1094 827} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/.notdef <1C60D8A8C9B7C3C9ED9313AFF691AF9DEA7EFE9F59246D6675CBE223F5D9796E7E2CD60A70D0> |-/lambda <1C60D8A8C9B79676FB3F72D28F2521E0CDB0C1B97018F83CB5E098F84921044089F965C258644AB7CED113EA530EABA236D37E27F6AE80BFF9735D376892D415214D9F94BA84C3EDD3283D4A764EAA9804A9B2A752D2D8BF5E8ED0916702075CA51F48182BF6E6D934D7D0ADA2A940E7EA23614FD0D75C36224470EE45CAC15AF3D24AA491F8B4A88C8F7C5792108C4457BF93060EAFF1F56862CDDAF0B5E0B3A4824BDE6A18F18EE65C2C9C1A979C041ADF13BB9EA7> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/WJGNCL+Symbol /Symbol findfont ct_VMDictPut/WJGNCL+Symbol*1 [108{/.notdef}rp /lambda 147{/.notdef}rp]WJGNCL+Symbol nfWJGNCL+Symbol*1 [18 0 0 -18 0 0 ]msf240.284 244.799 mo(l)sh%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.systemdict beginWJGNCK+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/equal <1C60D8A8C9B7F374C62B140C32819FDD54E0FF4342461D2A31EB8866A6299E899689> |-systemdict /gcheck known {setglobal} if end {end} ifendWJGNCK+Helvetica /Encoding getdup 61 /equal putpop%ADOEndSubsetFont
/WJGNCK+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four /five /six /.notdef /eight 4{/.notdef}rp /equal 6{/.notdef}rp /D 4{/.notdef}rp /I 9{/.notdef}rp /S 15{/.notdef}rp /c /d /e 3{/.notdef}rp /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /s /t /u /v /.notdef /x /y 134{/.notdef}rp]WJGNCK+Helvetica nfWJGNCK+Helvetica*1 [18 0 0 -18 0 0 ]msf250.112 244.799 mo(=2.5)shgsave
201.2 224.295 mo
201.2 350.295 li
291.283 350.295 li
291.283 224.295 li
201.2 224.295 li
cp
clp
2 lw
207.2 238.211 mo
237.2 238.211 li
0 0 1 rgb
@
grestore
WJGNCL+Symbol*1 [18 0 0 -18 0 0 ]msf240.284 269.284 mo(l)sh%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.systemdict beginWJGNCK+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/three <1C60D8A8C9B7EF322B8D6E3793F9C339FF2D01F55F75395A69A42725328E1B8E66EAFF6BAC335B6E345906CE7152DDCE6F991DD2E99A50D14EF5FE716864AD89B92005EB56184F6465E294CACBF73EC4E77A27D9ACFF3348FE551D23745FD8C1F5363E223D2FE146B2E36748D97805004E8C37168D3D6622BBF76ADD739801325A4BB7457A49C531154E36C58F381AB30F164CAE6510100AF5FE6405CBE42D3AEC01131A86CADB27645F055DEC901ADBC964660F336098380F7A314362D92502B680C534E053458ABD592A4A4D87F9589307764B161F9884> |-systemdict /gcheck known {setglobal} if end {end} ifendWJGNCK+Helvetica /Encoding getdup 51 /three putpop%ADOEndSubsetFont
/WJGNCK+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period /.notdef /zero /one /two /three /four /five /six /.notdef /eight 4{/.notdef}rp /equal 6{/.notdef}rp /D 4{/.notdef}rp /I 9{/.notdef}rp /S 15{/.notdef}rp /c /d /e 3{/.notdef}rp /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /s /t /u /v /.notdef /x /y 134{/.notdef}rp]WJGNCK+Helvetica nfWJGNCK+Helvetica*1 [18 0 0 -18 0 0 ]msf250.112 269.284 mo(=3)[10.5117 0 ]xshgsave
201.2 224.295 mo
201.2 350.295 li
291.283 350.295 li
291.283 224.295 li
201.2 224.295 li
cp
clp
2 lw
207.2 262.711 mo
237.2 262.711 li
0 .501961 0 rgb
@
grestore
WJGNCL+Symbol*1 [18 0 0 -18 0 0 ]msf240.284 293.784 mo(l)shWJGNCK+Helvetica*1 [18 0 0 -18 0 0 ]msf250.112 293.784 mo(=4)[10.5117 0 ]xshgsave
201.2 224.295 mo
201.2 350.295 li
291.283 350.295 li
291.283 224.295 li
201.2 224.295 li
cp
clp
2 lw
207.2 287.211 mo
237.2 287.211 li
1 0 0 rgb
@
grestore
WJGNCL+Symbol*1 [18 0 0 -18 0 0 ]msf240.284 318.292 mo(l)shWJGNCK+Helvetica*1 [18 0 0 -18 0 0 ]msf250.112 318.292 mo(=6)[10.5117 0 ]xshgsave
201.2 224.295 mo
201.2 350.295 li
291.283 350.295 li
291.283 224.295 li
201.2 224.295 li
cp
clp
2 lw
207.2 311.711 mo
237.2 311.711 li
0 .74902 .74902 rgb
@
grestore
WJGNCL+Symbol*1 [18 0 0 -18 0 0 ]msf240.284 342.792 mo(l)shWJGNCK+Helvetica*1 [18 0 0 -18 0 0 ]msf250.112 342.792 mo(=8)[10.5117 0 ]xshgsave
201.2 224.295 mo
201.2 350.295 li
291.283 350.295 li
291.283 224.295 li
201.2 224.295 li
cp
clp
2 lw
207.2 336.211 mo
237.2 336.211 li
.74902 0 .74902 rgb
@
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/WJGNCL+Symbol*1 uf/WJGNCL+Symbol uf/Symbol uf/WJGNCK+Helvetica*1 uf/WJGNCK+Helvetica uf/Helvetica ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 15.0%%AI8_CreatorVersion: 17.1.0%%For: (Jinseop Kim) ()%%Title: (Seung_EDfig9.eps)%%CreationDate: 2/10/14 9:12 PM%%Canvassize: 16383%AI9_DataStream%Gb!j.k?9Xa&hnWLJ9q9]*%$aZ,UZ#LN0o\\.S=`3[Fa+scF':ISif[Lr:YHOo;lU#!n5Vl\uN?A\q8[BR]gA!na*#-s#]8:is@)u%9KSGpPV\ng45B8D\AKlJD'I@ASUuTY3).CilXV8,dW+nO/<Zg-(j`A@+0MNcCt3.\6Y<k[cR3dWR;nPml-Gm_r=AOrn*Dfnao"BK%d\K,*QG$1ccW6uYK:2YVXN&.AH5(Ims20lo,Lfr-_gJO5I2;j/rQfR>T?,m&?8!(X0f.OXO('p%X,SK#D9boR.jmbS8GJ=AH_pC[%1:gR`#7QNVT8^Y5d2lWBm1QN)/IOb[ccKL7MLN*J<\";+1]u6_]2LB)_17!Qs7r851rd]RgL#s'ZPPj`/N[<5qs67fQ]<43VeB]u%M*RQ-\E>fpF><$`(q^Z)1s<BbMSL:"J*'t0`Sacr1l@m#;s7!aD,oAZ8;`D&I:E0o1]IK;og]G6JYU;hY/gQ2l_@oDP2uU_:HIeJ%_qr\Y!9=:\PignD4s)Kme6[O;2X+^*i;Y4i0A#-Zc[IPuKOOJo)M!ohVM#Nm]Nb>a(dK!s)rPbQb\lQeGa@<%d[>p3:g[1d66FZj%"=`,Q'#?+kMZZko?`mJo"*tNi:87,iUCFhG`uj>EL7_SR=(fPuBbQ];1WB=/F-!,-s/1SN\OiOgY#`c*T/8m+o!o/HaN407)R2=B%Q02'Gq\"<-+Y9!("I[Iu\7af6quj^I?9"Mrd5:C"T!+M-l>+6rdg>#dmJk-b.69m37q79B:R4D27?<;rO;X$*P<Mk2&(`=d\6'm_%Ar'*RR=i!ahro,UqRAJY59.!8,MjflhaCgd_nFsJSI^G")>p@a@(98UfrL),lBpmdbdA>3g5O!/1YfZrQud-->hcfjm9FHhkGGQI%R]a2uCT4:c=Gq#drJqJD,t;R"$ptF8]SYa-@4/::,r5[_,6mJUKNSnF4pqp(HkPY&Bn&#Z9G!Fj9VA>n&M]e/&Gu7t>S2d"7gtJ-%_9G7c/i&p"7a*qkX:glC8UpR#&:[kWf$!<&[[%g<s8Kp[M!8+AZX]c$nF)kf]ecUfnVi%Fe,FBtT"l/95p-'NO8cItQE\HXr')uh%q0P*c:[pr.?&0k'cjSi;mtc5/Zd!33+Po%cVXr>kH!a/#3(P1k4^PqHQ](j)+c>&e'R=6Ls/?WP^ld:U9o38Tp`GI9#fO5Oi="6b%r[.ThrAY_q2$O0qJL87H.t2eWqqR34fBaL''N9lKDu:&gk9/X%BYcfWTTP'7)J;58"MoF:dFk2-AAef60<".#F1ts)'QF[Q)2_I+%T8O\$<5lsZ3RBUnhj\Y.D2O=A>barpdA<p/@GR8TMd*@'Xh:--ma2;`C:P;tZF@B(R.c:di&bE?\64<;$%aC9NhRQ4kBcjLB@kU(%J%\0j31hq_`3><ZF50_L#E>ALDO0M)a>bj"6gbB!CoTN8c9Xq@3.'Ya.m&6Q#jGtgC;@+=Rn'V+`;>4*S2]f'\bTmS=<;VFFOrM@%d4@2),W9#jNXi0o'h@kH]kMKGKcjs"$#lLBrc\_MGbPfbcbkjg'dXDD0L+n&"FWiQj4QNR"fm,`*!Z*Y2a@TNdg(hd0+KI#!M_r>%DDgiX7cX5e!mQ.NKb%Y/c:@1D@Y81?isHVal9:I[/uQo`hs$f^E<:,C?lDciSL"%>oYTM`/CGuA_G$%R7oM.6;A"][0/NK5O9e3?%isDGcIc3GlQ,bnhoahtp#U/0:FBgBT8ZLC6XO3e(4'sY0ZhM#JL\JT0L\Nf;=oW&&cHF$?qVl_qYj@&DLCUTB#Pp']M=egr^L;?M%gh%EOpCP#p^C("0^Kk:)OjkemcM^q;rP_Im$X'su08Os7n,)Ig]^,9e5=6iUIi!HLNR>T"mNY7oI7q=XkS+=f$TJ.d&gjLp^n?8F%ObJA_X%t#!,OW;\qrYUB-dM[&hV[u;`%0DA@b8e!kKSB<&\D%,&prek`kOk;J&`CCr5.f@`W9ao,eehU,U?7elUF1Bog_7Xs386D%qacCVEo2,?21W\fE?st?*Q5gRDnMT4pa#a5%?,Ql@BTVr''Id8juSWdJXDr;)&p#pr_J#$r+q>t//%:e6gB:55R.bH%%Z#9nVWG/%1nQD93oI[Mln93gN7DPM\%EJ<N5NIYBC=`_1"Wo56CN6&$L?t!F9"@XZPepJnJ>gBJS[57>=MliVi3Fm+KiaUM.VF=V"<##7M=rr%JkdLa/s2+AgkTPmN`9pPP)Q9uEDZ5)BTeCn0,.."'DNA)*_SR:q@5g'-(PSHTJ*5,_\`165>I)XSi`QN8EU9Wr6W7h+->j1Z0u1X%':k``k[0;e,G"g0S2C0l:-/5!:-/(r:-/A%:-.nm:-/1u:-/%q:-/=Y:-(]?M3IoP:W12DGTnL6`"Olq-_?-N5Oh-8r.ue1i_MZK%'7]"uR.q=j`8mP8+t!?.'/B;1SqtKQlpQ4f^\69CeVit)AU!5M2[qT1,T.tD$83]r84E%RP,;sc+\bjkQnZp^oiY3SZc;-sl>.^`%DbM`JmJ_cAXVa1pp;$68eK,NOeIV\&Cj9ErLQ6OLS;&_d*=GgSFXQ'tNE+sBgR,Q#P'b.#%\]BlL]867V#!rdF+19Dmmj4hl9!ca%6MQQP"29cbF_[QI#Ce+l7#1#&SA*F)@7D9I8%n4aer1\ZQ29aiI%g4,G&mZ_'tr=35%cP+hj;QECDi&.Ote?36rVHM>\=pd-FD=h%[`,n_CAf;S"@!3q0qFsd]oJesXPZE.*]7Wa@7K7V1`M!E%+c[lV.jQl(8JEs[c_<3d*J2b>d#j<i<K5>;S#*qmhN3l'stsYfoTQJ%>e`GYWTr@k7d+'e<MfM+24r$7$`MQk^;IYj=</g*`ME^`\5"P:2cGOl<[Da;#&Ao%OtS[b-PK&rI$4/;%)C%TIlLd5A)8eTD$`pV%9,4&`cN9E0Qiq/,Ra4i(+FWE7kB=eJcM;bimNBdio="]'h+l/;A-*6IRlr*/4n]KNE:t[>rfV'[UZ)k8!i"-9$G6V6^@,O;[[p.q%rc*^J626D1$7KIJ<Q'.FhosLW"<>%8_gp/=0!)-:?OMZTlhB+`$f^u`_8(4r6lQ_Lj/I-X1>ioo)-KNb834R]O_'hOkPaRg`AfON%@b:iGQ;OSEDS^`TF#REc#NH*l"Rln@s2&c=1aCieKA_g)i.]tZBB/)$g-ZbHdG(e^A@ujkk9)tdm0(J.q2F4:Ud3h;2qU=h:5/_b%\+%[/Ij-VK<%NoO,Im009ikRUCoNr7p#ZR2A_=a7k?NQ&;T=c]Ble_34,8SZkElZ3aWuT&%%ULF?OO0*-Qk!E3<NR*!,kQVKs<WW%0n3Od_te+Zo+Vg=boI,]Kr<t^2G<C']iULI+g$-%(025Y)m`1GfL40ANq),Qk*G6@MQ+XP'_Qa'r`d=YH0\p'@Pm2MA#Jeal"#Mi%LCpDij2$$fYY:e4Z@/n+Dg/IArai3dTB"%L'okmPQ4TY)T9UfppcPlon#npe4I.!Mntpn.1(=/1WRGa>1a0">5Ehr'gE-cn_&.O_%;\jn9J9]>?/he-d+XD!>-R@MkNCX<+S$IEiPPO\e%VYIA#qbnYrB%0R10hMhI3&%e'?1C=S*o@07-L&R/<`+Or?#N(/8r%)U;QAJ%bK52D%l;Bm8;U_T5chjQ3rV0G>_AI'?SduI)lRlSrh"]1C&C1BKB6W+r6oqr(uiRdc['C*a3*iLo=nnN@cX9*CAtYpX8hM9M#+=3%1'Uj5_M0;:*EcOqju`Ut77'fq9r4%c>P=]ZB_?(NJUGB8mAaW+4@5md[+VHCH)$W"Z9Dj^X+(6/]:Q4Z+bSg0s6&Q03i2i-;j]>@%rWn?J]?VY7j#dfA]SY2H:<=FG2@\?Q!GCGUhsoW]61f2[Abni3o@Q1/<E,8X,As#FVrDFnNQe>r*2#&n/ggOHcMQre^SW3e)U/*F%a9fHHm;+mQlO_VoWNDCus"/BsF']hV=%ac^R*!Uc_i9Odd@N#3ilqnV;g'\q_:Y&\UK$$[\J-C7h[Nn.DSFI!"-*V\$?FOIYb4F7%`2g,Z%G,P_@7@,7UJC\Z*aVEh22rC3Lh^hN`I+M.Ys0+!&m;L(/?W&qB*TB!2(oFfVgpYMmho$,kNeE)K8VZBBKBJF+f='UJ1r)c%];984FtWV!L35,he+Ek$Q73+R>4_td(d]LZOq5J%(#,?4(O\\F_gg%'`Zs!&Y_4tV"1^[p0.2`k[^Oo^6b<4ND9E:K#Pg6F7S??3%!Rmnfb1fV-[c.Fg6o5Vn>7+Fljo4VMr_g<PU(mLV(/4*SbhjojACBY"RQP:JSMR&2HKp^rr*M?r'_`kZ4l^4"B2,bqiuqGu)'MXS%3O#/tB)*n8,=W*pB\XP(;XqcgHF6"/C&AGi6=P"VXo@Zs%=s9$q*Mm_@i/W6B1L0ZP?aZs`I+M,/Api?ra3l0@KU,90ai*<<8mks%"mkFM5E52(]dFcDB)RFH9Nl,W_B@+G`g3KmZak0piZ-;6I1L9Q`c+FZ>=gmgP;(WQjWu-*'Y%F"_X4'gpMqOsrKZ@,WQ\^4FlZV"%)bi!]42l"2SKb&bl:/E3Q/?$/-6.IG>R7=8,eq!d<)##G(JX$gU7Bd-[<4/h@hUhA4^%q%f@CX6b%BA#in@Le(#PVj==07VJW5bE%=lO3\Lb')D,*)Yr)JGl`N7FOoN*@mKa,9tep:$4_e]f4[Sm=**4k@+hiia$c@`Pt"p!i@4`b]-RI3l?^(7?r)mcf*!OaBiRXsH=`%]Yt:+$ObumB./G6NL;D#PK8RG&PlL/QjG>%286aLN*:L>0q+iWPF:N(/Ol$fkKL?n)d7U&=Km0/rR%;J5<=9T;m^L!WS>Pee7;al%Q!E^O;L5Ib&/H@=6l=KYY3,Ye&PpH+>I)]Haggai\[J#BJVQ8&28iH`cG;`j$B*1[ep%k$Q^O@(D@SL&5u#+V*,#O^c"2oL#+_`^%D/;7NKgedIL,!/'j,]U%[&&c'J&#jN7QoacoCqd.Z-]Yg*/mrt6!ge2YS>is\`sJ?!I?S?0q?S:euq@+0N\^i'SV\N,RY8B)9pb!%-o,GUOC2m'S5V@o8*B!sSGb+%mQ.Hc]KTt]$[C0^L`u?ZD>5V0MUZLN":%#^0@P)o)6\$?>YKnPk]8&Qc#C*J6=SGV24hlH1S+34%I@BdEk&B85)9dO!1&[+d1Uo%lik*QP#nFA/0Gc\2pp<F+<o-+j^Da:D;Mrh@9l:21&W6mN8]cmt-U%N/MFj9\4("@3!E!Nh:4&1:%XN\f>Cf!q=#CUc0Y`I3>&.b!G0,>J0A4n[n.m%5R\uftl4QSCN1_uutTri,L>#b,X>=D!pA!Y0C=g7AdR1[2dB$9j4TZ="^*\Gc+%s'd;Z]=<e.`ZXRb2OQ9AIE><`dg1%\E)ng8)JFndS!e8''+0'OMk6p%qnJ(@59UCX@fRfg`2pcADhdDO1@hC_.U+4,q#'$-Lr)Fi%:JIl)bGn5>fH?m<njD52V]C6o8e/I:pa*?.]Od(,U1;HP!P%dq'tU3dguaNg!E[)HQ3KF2)iWAE!Y&nKjF(J:"0Sj06!?&bWHp<8%8W[ht1d=cTX7u:'BRirb)d[e+Yfc#<_=.#/1Vpl,Xk2Q5Ano8'.MJq3[up!4o:?gB[3+Y&,NlE%qYmf!m!&FtRj`;U,l,R#6`o`A%D*SgTcO;K@pVYYbLXU_]'PLXeq<HF&J`anu%:V+U8V'[@QV:sS`-2pH%kkJ2@c8l"2cm$87H"uLi[qX=`$Jo&Hi,fYBf#*;,;`Ae%2EB5a*O;h6CIf;^ffG+oS(pXgYh)-T,^9WbB%8O`8)aq5G),)61*:9>;l\P0+iT6d6^FB</sHZ3(7mMlpg*k,fK4uBj^p:`Y:r3P%cti+rrg!uTmfind"OBHOr9#O:TBKDN.MEO=>`#*BKB$YEAlYkDVsE6"_bR@AGpg3Oi_qn*lQeZ"rpcfN$JiDH*,\jAo;`O][aM>:%8_rKb/Ybg;Gc4aDo'M*H]Ue1n,,sKl,&gXmf[@>L4E'%WcC1nOiG%C867h/V<7hpK._hM1Fc26tHb8onIU=_GZIu\(9a-EBH/)En%?h"6NT5q<$F+jp=#L2j%lgeCFVU<o6keZ##`"cNiY$ipF%i&054JtapfCe*6n:T04F$*=4Wb<gr9dLhoe&Q;"XYru38'-ncP\fuZ%1<Z9M#0"sKij<Zj?Cmr2g&"<WrYW7g\?"uf,?];nF`2$*@W%!fQCR?N1mX-;DDYYX<&itH%O81n[&t,@>'5OFUH$u5mto6&.ZIkN%IehE$TalH"TntlJnM3kfNMA/WJsNPUDh[nV*)r^\(ru..V<W1%YjmUbegKP"e#`o!BJ!B\G^7=n:JtgN&\IbYE<EdHe_Lb`_NiH&%?DB1o/u>DL0BGI8iC<$r>4^r(C]ke92XansoEK_T?[A?r3eQSOi]htt.1PQ]bD(F>4LXneD&c:T`2!%!=kD-nn?1Ns*qUrFFgt4&%jel%Z[0D\IZ)l6DM8R6Ca,@J$TX!o0=XtdNV*WL4UgXdK?`Bf'oXM"\-s:m=2KT2sd'7IgDpXWa:"JWH=*q'WT3JmS1N9**A+P[c%ohI=@TP^l6[AQmqNqgPF,(pq8&WS;`one*rggL3[2g7.Q&mIeB_qK_q)Q10!3o#Q"o(Z$"<]TB*I8*QLg4N^2",B*tosrYHbJQcJ%-4Pk+7>XW^H:C&4%iY%`K?'21$dCsJCAk[1TP.\IB3-CM[3cC>nPhWS1MF6ff&enMg4Rt;Eh4'<H&DoM\CINW^Im>H!P%(p]-@0U%<hI-B$DKQM0>3(d&dAfD#'IGB#E@S>T[i*i4_UmAn\Pgj%Js*T9u\E?8*rTPO!V(h]h79M!QS/TD'#cWXmRm>3U#RXC$6%Q(AV*d%Zj(Z_dBHD4o"+M#elqD1i%4`YWn$Ymbs?9:j/27;fB8![2`rKL.lZ&U<$C_Of<k7EXmk;oW#%GE*;&YV\'u<1nRNL1cH#Pm3WOUi%-h"tKP0T`Ni-ccfQ8Jnq%,JSU6/d4E>jL"X9rk'Gk];?'l+[D0#JIVfIqROQ+k<6!'KkaJlU+Ga^iLjkqp6;SS:%BG.b]O+DQ/8D%eQ()WeljTI?A&jb5mL9%MJ.V+5W-[ng-8]iPp]:\>t<'`$lY957AFh>?KQW"YLSC0)DoL7:R]M?)r_,$:'XaN]&0+ihXR7\WCo+6%m%HdI0:i`aKOMcfXRIDbS2B>mH<7/tY6[(#hH(.8#*"+Y7mW^o7?94c1H[(E_QuQUQqL^I_4\a/TF(?YY1mW_5u1dd6!\Tsnrk.P%EtqQSoP:&!IUa6"%@b+L[?LY\jSJO0a2],3<82![;gL<Dd@&ZQkNU^\MN4PAl)F4fMtmt4SAZ<4[psk&+iF+Xk:)QHWnGQFpJcDh%@h/*t,?ojMNLt,Epr>MMlJuH$:Q&b!FI(:#=shR$pF1"S[@UIAb@.`PpU!FsQbQT_:S0u7p"c<7HE)SL;hVe4SGVs8Ng$rTT8<3i%XG^W@XsF$HM^LI)]3A?sH`e^&(m<J<5/MTYV_.K=-sb>LH9pC8Wau3?S'TjMj'hLIn*(Yao'dLCH2=$V?bYAadSgn!T$ucdm;Z+o%m/ks6o[5crHRom<SAhn-@Yj]*<;MS<f6M^^8<l<@28,p>eCiBgWQruOS@\Kma1;g$q5Nf6R7I-gr,m1(S6\9m5Ga]`Qe-_E,q:"b%A:+h4`9:d['kn@W\E@V`8$=8BD!^deqe=:S*6chQ='ABS`;D:)m.%G-HX70e3g-q!ZLEikJu/;6K&^/b\V47bRT5uJP-/Q>Z?aU[%E#4=q[p6Pe-bEKkX?9Oi&bI#F/!hHtEk+T."jr7[$UHLk:LH(XDEQUnLJ]^>G<4iMS_M-E8Ug(@kGajcl&ZEkXR74nqOSFEejEo:%)u(!K*`S95PA)P721%T8F7$3)ls-.*R'h=g30IYOm]:1V%4`MWepYmeoUn)dF9a+-2l/%D\M#$?$-&=lo=j(SD[(jF_eIes,EM"a%)AMT<1)!oM_a[W+N]hcuNeKdb'*WUkI.BR5f148^m.u^!.*d8&YSc,:#"@5kdN+pe#E<kuF9_t`]JcU/f8=\Uh*F>N)!MLP8:tri%Ij@O\MlR*]5sZ^B"Y[qA4fq")<HbQ(G4dO&iePRHGWa;SCj2sqLZh15AaHs=WQ1C@c*cTA"l2d!m6_lP$FYkVg)=\jhPW,irV]It%bC:LQ&N3U_p];2AV*a16-b68'gP6P:g%$^SK.]2?letFi1Pb4G/:UreZR-Og2"#PI5Hp^QEWMUNi)6(>"n]eQ097Q`LVWWK[r(cf%j6$C6+(XrNb!q.)5?4ZIbH`a)Y&(s&<B#kgrX#0LcK?0h314,b]L488(g'f=:_*:6n]=bcn-:+ISntF(,hMe\Ur5`kP<uUTL:BH1%4=Ml"+9qXF!]b1QdfMT0_ljU:jI5CM]?Jl^+9qjf9Qgt=g#luEf38K5a`I<?CjfFJkE/BlA0#&\hS8*D$9puVQnGTO3X](ZFrlhV%d(S:ACl)<c',b9qq+_rPGCdC0G:b'TpVeK?8R%]NZs@K'+1-X@I"V*66OUj5ip)M*%r^i4mR@qW;3uDK:0GDZr#Uf^g9Bmt<[t-)%Qk/?Hp^[lsXXb'8?1n$=V8p%;W01),1mXH*c<@h2NO-MB=o^G%Zm20+Kg32rL2jmieQip!(Au4jX\,(l^K*p<q0g$>Jj`:%\>)/2%U=pTaIcaMLlABGY&6`ImZdKn&HMXNrafK@d*cj_C(,S5"c3?r=S`rrk[G^+#"l0XO+8^/X1"R<\TUJ"1C[YhQm7">;Gt@!gRb)SY%EPFuXX@m3GgF8Zir8_?kGDb2PP[%&4=fCEAV^.m9;"rc6f?!],j@KSb0<_aY0V^4VrSS-IZr`XEGD\9?[8pE@>1J66I5lPHmDt77%rmoV)<IHD)]BaF*mdI)LooHbF?)/j1p:o'/1LT;K4pt;`998=9]sCV,NtmfF4+4%h-#)\@r<#aEhneb+6c%d/lM^gE)2iU&l#TfO%R==U*X",a=f^A*a\[+.H)7SDf9R3;tYXl.un(s[l4[Db;WnRkimht$ChB8]TB_E4`gU/:gbj+7ZV7=sMLY(Y5dP7387fsk)gaQj8%8n]<n%ChsC=:hYVDI$BG/a3(>03!eqQG2XP*C\Yb$_?M/nQAKm2PQ4J%NQL'T,KW#UkGDiMca!qo[]b['L[7%RYj':lWT3e,.o8J%9uVbn=IKMt23A@$dKCmDA?XPm1I%TBUH5,M-VLT5c9O2(=.5;/)l!rD7[TP=,_J"DcW:d"JUZ/G!'3RYqIM[.l,tbalpHh!^7&YC%LG1$0M5:AMC3@$B"$ei#RQ'u\!5=n*%)>]sf3R8`kdA=5rOV/"_?2r(5mM1J,l,*VZ3'L2dT:9-8G/rROSGfmXf;*Zki>:tWB^F8%!Z(7XV$S]B,]3T59]-]4b"Z7m8N_U&U`f0kWC5[7eQPK/2RP/+O"pqFjq\Sj?m3oe[-=Q@SnGqd$^aV-L&s.=M7H1n/WK=9/WHP(%Ou5&;oJE#O]/d?=hN1r3UIXPjE`]m!.2q;cY$-p+B45F=l8-uGm^%1rjf-_:P+ur(pAqM:c"qfC<hRh'Q-dpff>q'F9LfT86)5'h%OXSdeWC5uarmkr&R)ne9NqW.!l,D?$2D[0/\?.ZZO&\dH9RR=!0uDnXE=abJPR$/joTHu6q(6P3,<T>'W=M5H/WXIY1_Ro9b&bnO%Js;jg4RU.2AH6ACdnXnsfE.#sT[REO_EitG`-H&t$T^m_f(9s1O_$OEac"/&oZFfpd&/Yqc)5LJ[\:Q%>]U\U*UbB@mA]VikHJq0%$([L=>ICQ7)O^ipCeNcOi?BHaaq@K.`)YGI^X"CL"!9>_-a5,_i*M!FpKm\&)>E-pg/$@mm9b/,aj,=i=_*<5P\+pM?]m>oDY\5r%h(e8@_go<r*]KJ(BT]!Bis+XWE9X-Aa/:.M!!$`XRj\C/;o-jL9]kTbMc?%Q?cCE3(tL;Z9su^aqqu.3F"NELe6X_J1t7p6Nok<H%X&@<t*]VmE41Y[NLPpBj:1T4T2n^;LcA'eTE'IBJM"tjDR>8Jf=54=[X4@rVo3b>/+h9-HSmiXC(,R_.afc2n5nu-^n)u'DGC[sP%:cifnhlLXIq#tRP4_V,Jd^Zhup2FYqab'M$M9Xlp9D-:u<d"-DSaGY>JGjRh]!V%reKR#kXsop19ULDAN^5o'7=39c<&Z%+pLC@&%408'ajr\4]Ot12fGIBG7[20jqoq6CB$@Jq)d/)FRI"/>B(>@=65f^0Kbn;Uc)P(^mheRArE:85o^/G:,I@OdFKCcdH@]1A!_Q3KK%p>A5iqq8h_Vhj=HqP!8JL3adS2RFjd4Uj^U%rIhj).,dpa*'NRd6sR,`i`7#9h-,Xok/Z:mZo7d.1rBTm2Jq=p1(/c\cUSDkPSAZ%]>ki=[YCun!Q5UTl@U%CN:uhf\u)LFQlf;)CUN9HJifN<8ldX_@JO<*9+Tj_8kIe,S1qE"lQ/`*,:1TlkF+`p7l1%l2+/r[Bn<e:%Om'NlD4rbLUIBXG(uO18BA4W8#/n(X*]kQ8csS49cF<X.=KXG#@NR.\S8[L++hLH&SCFmJ#\D[j<GmL8M-<[gSbYG,EjK#"egG\?%?KH.5Y1D#kL"G&'8\8^W60E4U-\fo+K$N?3:CNe6"<GdeZA08Xis7\W[,CX4FN+o7LgKcf6Y@B)[h14%AIP,L"<HRkfLH@@E<P)e%[,@6)FN+o7@dMj00m(DIF>?R<V\hH9STQ.?oIV?^@d&aqkiDGJ6\f3)YW$W)(R5NDIO*:$Xr^tZ8s8n*-=u>LI6P+S*iLnMJX;9m%8%*6UJ#Xo>>92aS,ti12CWi&LJ*W2VX=uDH%jtAANP`*E+e8'XQ-19eb`Y3I-8oT%0;pZ_jKuQ`5&O+bqeAnfX6[*BRLX,<X/a>_%]2Ok_5+5WW%,bY/15G=\c%>)Z+m`uEf+g^<3G]<nFfDE\S%+'K288?.An0B>,`UC%9?h!]c\GQglFNRK&F?ji$t@[>#bc-$HFm=+%+kY%s_967.m%uH->J+p"Xhr>=^,*ib,%@@&+;jF`B48Ppo?NRQ==42sXqDq;9uV:#npk&9;6Q#.]A_Ls-IoH\6>7U]ZmN%BOXG(N%gOfru2E$b4H)_\u%RJMP.Es,\!)-B=:2G2c26%UcCo1';l8ZMCR5eV8Nph+-iWF*Z%STOh;?AAAoRYVd'VcTM@l^oXZbY1PI,HY>%)BkRGqe,=!D`s-,D/901j7lRhbcR!.A+H0^J;k#^]$n;HQetrul-(F0`ZE(jD_JPLR(g>Mm6sKgK:(*Vb9`NT\CQ-dFCfU*"l<LM%D3tRq#.3C+A9LVpGWD<Ij;mG<**M>IVJaP@\j%+APW_peDRrEqX1Tm($aR*F#I5HQmE@/Z?(<H;PLM#?5"fq%j\Ru'41&u`@\E>V%L:EY7Wra-l;/)?`$[N)Q&gag?\/mVg,SsQZbj'd:Cu[!HIU@e/8&`1n5?9\l9O1=]8#IrFKh6NZ@Dn7jlf^i,R>DcHjfu"dI>ZX=%`t4b'qgjsR\>/"KA/.j/jrG0D(g4!agrl9X7W1oo6oN.uUrH(+.HqGNc7*?*-X.?(?12ki/8dO/.4m;8S,cQW])tB_p0j)OSuO=s%gN]\dO#"Eo>8A*8A"%/Ml/!sHe'gI)&>>r>I)c#c_bq?*Xqhlp/U4k`fnU*Td%\+=,EGAQNR-A5+sU7K+[44AG`G(/%YBZi3(FLC%/U9o!S&4aU9IVN.qMe\kQI"oEZ"n<Gba"$O[oGjAR_MRCp$FHAN&kSe4D,ZM_U/3BLQCEc`?95hosd&X]O=^FTP7Ze%Pa'X`WpL+%<a8Bnj6F!=8CWd=jpiRH>c43i8t1,AZDG]D&+N2oqBcsUAqCFp#G%1[no2;2GW7iJs*j"e/ES&/0cj)o.OZP$[_jiuGW;06Wa!K\%D><e_Lq%lR_sJ-iB\CR*a9\db`3kqV3&)IW&J6BgcCX%SYT7=#,&Z<.E10o2p)Xb-d#<e890A_J(Xp"IWSbsENi\#rNA-8,Zg8?^%3n%^_$JEjZ:F,4!s$k%`GC#p,D'eG%@B@nZAPYkgIQ#VXfY?Car@!roD.`rj(Am;c?Z0!@^mfX4)s72Z%O^0XVC'4Go1;2AL=PIm%0`^n8<gB*Wg5+S,nD1^=1M%fkZusu2muJd;;=H;Gf4;(9^1d2\_c`G1]/Jjrg>.4`!TSX1PG,/QMYl(t%.CQFC&>GYE'IBt_e"G5%5)6]'824V?D+`\8NHMMhT+)l3pe=,P[]N@n"B&mC4!2)lB12%`4sNtopCWPar3M`G<9bU=Q\\VjcQ49.TpL0qUd@<CLe*6p2/?p!%[A2=f2C0IWK;>KTSW",,OGH^OV8r"Z%(/F\A:2U=[#U,B3(\_PYn-7K'M].C]`kubKYlEL>:Le.3JtmOYM;o%*2XPNPBK`qE4f2e%6DWiuTl;daQo2?7FFG,6L,p42ohXYOg-NT!>b,+@gINp/F[@s9fT51fO4p=A_12rbXXkIQQ=QAc3m$lWQOC$]i1XoE$HFPV0<fK6%i5e8&+\EP?a+GqG:6k/"U-#Dh*T`=e8RsL5g`@Boa_Q\/3_)aiiI25Id9BF4]]TWl*E0+;V/m1/_lob]pl32Y$JZ=/n@8u[bHC>;%02<,jhb!f,b0@]_;\goZb$[0#6+OK`6)s5>b2^d5hP7WoGcEOObr7WII-UpIq4EWjljdd6@GO4h=`']q'8MIL.!:4!X'pZeh%eN`%'T-X`K;rFd<)I;nH@.@M+^eB*NbhNlYT&gqeeo1Rj"&mi(4%-3?)(f:%oRUJZM)^#MQh/O'6aPl62Lk=f#`m=TMU^<j7H/\XbfEs%o3pWZ-^N*o10SD@UU7h3>m5fhisFX>67gu>UtU7aG*duCEBD6XN5rZV\LdBoY']&HRgQ6B6P't<(VLdYiT!lYO)1UkRCh7S,hTP<%.bt[+kPg3)FmIDGKpLD+o?K[7][X,p<A71uXIbTHpL)`c>,0&?W0keY9[=knRn@^);fYtunsWXCZYG20HOofP-e0qimal*HLn)!j%DYkVu(=jkaI5<B3@Wd*fcJ_CqA;`]3XYZ]CP."B,6N&n0;ej:C%4b(d]=VrXJ54#1]43[gFZ[f"d<&".SVs=C5\r+$FBV=Y=>B+-%Ci[PfZI`d$SKf4.7FPu(iajM.StbJV4LZTjpqEKe/7o1@0q-D5M7e6nSU*@@QHkB<g0QV,QCS2dfDS1fBuSL<q"AMA9rB9SCAISi%(/6/p/B#sSk#L%`RSHMc6.5P"UZo._,X5Z0'2>A>9;dr;p(0rr-(ISnhL.iAC$hNh@;:;>FBYqk>Mnr87al'oAKee9Ai-%b`:am>%V\Mk6'>u`&l)[6gQY8F^CD:pQin^Boj;eN'@`brl?dWt!Z#ncX][(7P*?Y&>8(20fYPX?Wdt.jqaSUsodlq.4*DNF8%"u`LNi(8,%L-^P]jao$RdqOZ7b'JG+"l)rUbUh9O+BMod:P!Tp"],YPLQ0(sX0K.'ef9BcZ'TcZglr5DM`oRje&"o><`Bl1VNl#ki?\/NKXu-"%#IlW*d&fYcMgDfe.H=<K\l7%X/uMX$f(P>;k0gb.313g><H/k.8L:fQRA)m`F-u/gqO:;r7&OdZB[d"&MId9a\_GdVb#4Wh+fC4&%8A8l-4(WOpSO.P/QDR[E:8<97=WlNAZ=dqg]!K-oPtb>hb)BbrP2.m;g(m+WTfZPq==nT,"d?'5+W?]XduSp`FErPbKgQ5`2T^#_%[`:@c`S$hfPgIkP&Bf-,aVSG#5F#*lR4FUUha<rZ8%73IGsedB(.`)epK-[^KGZau-P#Hbqokh`X>uCDFHVqDfj]Xehkm+VOa,Fe%3jX/f0[9&-fS*n[R#,t<W](WXq=it[KqnZl`\@Vbm>+OQ?RT35#kYE>5=RB8;D/Nh8O'Y!]5%!?=TN`C5]/JLOmHPQYSD@<kfdpP%Xlq^H'j1@Ppbi1h^DN0H,[K0Y7TMe<b`XMf-1'rU$)i7ebg.nI:gVJ,6)e#Ue^0*JDY$I:IP^VhhUKJd6Q+CF,MPYah!V@tiU&fZ%(uAF*A2'nZ]D7bHWo]&Fr!kdC4,Xc^+6,Tj9=NGV5J(P7i;2-7=uBBG:8>1^W$PRSAWRL[SNmDN)dXe:D3?(=bt]C6^'1+/EOU_=%/jtAI*YHuFd%nOLXh*%e=1I"@I,(8$2(IBu>q+*#4HWL;]R@_>L=BAO[dD+%Kf_r9nXV2cD:X&6f!lB&nSC6i(dpUU@3_]QUR2X_%J[O!YV-$hsb^k2i%BQB9G-6u<ct8=3')?40/B:)K/)8HgegrFD`;O!DC[ZBdS^b6<Gs>p2m92eLZH*_[\NG:-]DWj!I)i..Y(9u[%>N5h0@LuJ!22n`g$"MBcjb%OaPKY,g8f/3[FJ)hX9ODYghA=\pVZh9190l8.gp\T0ZquGA_,tojV-!BC/VBE)p+`M;BH5$&6SLo,%'")X0X+L9ef>5Id/,i6W%!Am7=c78O4cIs<)_5D%I(fup'=f+9_TttY*ZH[)<pgQB-(9l(/W*S<>R*n0WMqGk0]e**o;'>tGn3((%\W_.!Z`A60ks[b)a1.im=i:T6F]@CGOQcEaIQl4#O5GT@P%En.&Kd`kRdNLYh[TK4\:VW>WP]0rI:XDS(Q#TK8)iZV<7Bkl.72M9%-08b#oVi*jM]L04[+ohuXMa2JNJD#qD\;pj]O7')d&]4iE-$0SoW.;s\rT<lm_1+*6-7jX`O,cf<-?ile)!o>d#h0G[aMR":bad9%5n$7D*e#lMLc?-":O\>$i_!5@E.7a.49XL\Xl0-B0YB6A(]0OY4R,W)=1o_=c#?$).]p.<Bs!Y]EX]Y;kmluiI*#0t+M<N9m[H6G%YN=:TP[3.;\9%su'jea9MEPP!]Y9Fk9,lhC5E;V@QC@2If@-.%]>UD\rUX3@\28%?s5`^15:.OAk..E'3X(G#DlPiZ@4elEX3Zkq%bt1ub;G*u.[m<j0ba.:b5s_W]\#*YEd]nlN<5gY8XjWc'qL61ge$Ve4g8ZL3<SFE-9?!h8MVO`f0Xi;j<NNc4l#%N>McFT)<Z+<%%"gjMpXeO6;4>]"%8N.FdFJe)rAUAi6HesBE+`9bU=q8$48_NZHP>+W6km/VIlDJ358i"$)7b%or5+B9k8p7%n%.gm,CLaeS1SqZo%3a/B(h[Q]H-!8@<8CclbQ]f7&XT2GsEm)o@>B-Vs/K>!S]XnE\R9s*dk-`3+J@c^VnXW+f;OUK>^fZU51XfO-)nFt0-2E[C9;U)C%[<]5;TRY2Tg_tt4fCl$c&#':Y%^Yi12qS88,eHtM>O#?k&?o-Un84T[!+IFYb'.To/h<\T0\Vd^A3+be892$S8>_R)ZtcI?%L"]2%F'pN<C1&F8JbG=9pV52RGn)Arj,,:6C:`\OnsJ605UF0(&*;<+PX]fEP/`g^O&b*+n'mbZ>%uPL1TdCXd?S$#13@-*X4VujBe5><%c?*tW[t0o\4WQTq1C-P+#T)'W%R[nZHC$$FX"f-ZGt:W(!6moG4n!K>;1M\W!!UZ_XZb?@$m=>`D'&pp2$VE2'f/"?=H*=qDr.l[%fea&_C(-c3-lZH2=H*@2jntF=!3O6@g=)2WDVpC_!&&723h*e>U3srqg%JF1cUJVH8M$PIbM]H/(7h&*0$:(lO_t+eq=OI7IZ*bW%9ER-F;3[-*qO50(Pg?:3f)CQtl.3&nW@4BZ9$BnA<D[pnE:Ydl%Hd!Qa_/+deSiXd:`FQU[df'X?e8(L5rd\1DQ)ga*caVNW9\*4%:MC>^rJ[fR=jIOg>h@;BDQ',kqFNbZS/Z4P\phXOM_N:;lM;A+m$\t`>L`>pLua`@/_W*/WsZR?f?`*Aag%bTI`>"_M!^t?hgR&*%R+:jc?BB,`m98+;%(OapQaIc>BtO.q9]Old8_bfn83?UFht,hHhEBB]e*t,7<V>)u.a=trfK98$[CUh,WikCd]j"c,&_a*gd(@g#%ZPW5ID-]Ac?@leEdXGIdj'M@8EI2j,$nkSiLt"T;ob0_fmAbW*4aB7h@es+'`&o;,f(Ci5M?N<h+*IO@*NhE&gqBk_Oi-kJ*:EUq%;:j-=bms&Z%ua@k5N@YSNEFT1lM@KNk`o0HG,`Mp]h#AI4hdJnGjn`3p/@$u9Sg.jc!dHOTCEZ$gtR"=\pdh&%oQCl`@*gtoi$t2%7TI3?UXDg;UK'^</*?2lY+Ji$Wr:H?1JY2kWug0L[CTB2pi\#Pc)Q4sf&O*995A-XfW=COWtaH'<BkoTQ-G7KL/n0\,9LdPp"N,=%g5]X&%**OklXsJQDl]s6)Kl"eZ1ZeRl_iJF[V"p%*hTtSA>pX-cGB!TL6/W**3QuB-gdp_G&jK"eb,+p<b^3oN%FIAlM>4Q!V00*%+*IO@6&Bf8%s@grLhWjU)L:;C`&qndos8AA<'nfL>sC-YE^+^F%*r(GhLkZIrJUnI3?R"PY+Mt,\9X:J?!TZX:i]S7FDjWbf(Ci%%lGoH\]@Z^3p'90*Y-hQe:EO$W.:@UkA?E#,nHFq6\oui>I`@/\7MP$OFo?Cl#DTj'</nbr%'DbgF$W$I.;.@_^Wd<>__.IE[i#9g%2Kl`7Ke4dW,8QFOMa&`>k-W;Efdfa&_3l8K3(uRGJa+?$auhciK,FVlO"%F%8S;9N<nUE,]1AddYA*II5m93!GcF7&VVPljmcU7`%"bn.dpU0PUMWDL/_;g`OF>/'sklu(GhfH),r?B>J=#`RucE<%8D*Dj"orE2%Cc*klA8D&@6!d<R:B[rgo4XT*Bo_Z'gZ@T[Gt5"a%jP=Th:#:ZoI,nf$eka!g%PGlTf8"RUf86ZO\*/I2Hoq(.Yq0**f]D`&QsEXs4*KFQq3Km5#6]Y($6hRFiUNjt2"ARSqRpkBo(_/N%Gh`hsUX\h0jDJ>V:Hb?-mXp-KET'!L%,K01g2f:LHDk?V67ALB*EpB6hXHhM@;j-=c&J2T@RfRjp0?T"$;3%e00$[f\V,L]Q7H5*%`agA<q)X+qOq+]O0a*I.&,DN>os=!R3/CZ$E,2X7k'mYKUYZ&T/"MsHgACB(XC#:-Q\Vc$!CX*%q!h+.Wkhs*ie\pq4Vu$^?BNdM%A.KLP,Df&?Ut!?pg*idJNrm^V;p!lG>FK[1aPjAo\GY$<Qn(jTmi^Vuic)Mi.Oi4LneVZ&l_uCZF`7A4[hnNVmg9l+,?O+,U#?@V%*28_lIo8C(j'$[K3XC-)L^KBGj79]U:p?s+iOIuYn`J?$oQ^embOpGoI=.QX:No$*XXAtoK*ZofHBb#(8CA:tn5j"T55s"I'0pIm%r*6eXGOJ<=^'=D:).+5pL@J?<rDnmG!c`ckFnkp!-Acu2/5GB1Ab#-drWR:m<LTQD8^]7TOK[Rf(R.)H+-goaK5qf+V>,j!4l5=T%7nl<rJ7PjEU@@*(&g+c\%<G<9U7M``^WB!KQUCNK)?i?gNEpHl&A1@2FHeon;*ThbqITK17LqNorYj&=]$T&P60c(;77?cP/HecL%8B,76R$Rdt9]=WW<XLRW9=2+o9*-Zf+aidRYID$r!4OsVq^G.-?[kSngG]E9LY5%>)FOZqVBjQ+KuH@8KMgT(_3;e^Jlm`jB0DZD%RJ4.UXiA(c/<aSConP'.i[SWF_WffI$S7M1;6)q<2K#omJZIcOrMQWqFK/XtGaY$nF2XEB7&tX,0`JqXl!Pgu?9?q"?_c;MrKH(]%O'^Xk9O)mNNa@@]0RtR)J=<"%YI=Xqp4EU5)RPr^o]_4lA6ra78tVoK1tnur+#4l,T1:Wk"i%J&*Sb-A+5lAK"2VbNrBq!b?6sD,%T_#L4_U%@k'U:h+F[^Xj/Ns-_)?"aXj6"ta4\]=u&hTrSWFP)@s'G[ue1OCXe6ts]W]@&\-huW](*rk;9RhZ%N[.X9&K/7jH":'k%P#Ru%ps>p&-%$WY;EJtcGL61e?a5UD`)h/jJH+[iGo&Y(YJ$L=e+cUZ\>,YP1.e(gK5n8&08X*0m\*K?HQWj,%WL+kc-$g'N8+q1%BplhLLBB3;2<5tVr-El;_c=VhmiPg6Manl82qJpPB=NM;C&Z-6+&>X:iRua;nC"[EiW=SHEa=^U+egF^0YrTP2i)&9NVYlTkIN3r%EX[K[MkI8eQ%5A60=\gs!4NC-g_.-'N*CJg&a7tBHOHtm]^<KdbE3?2hLkIGCm,]#X<O/lCE1J"Z*92^=S5Y:Zl@9I?(@m;+!043%;3J$!=uee?_NOuZX2:+I6C;D<*!pC@,D%;b]12V`]/W]-eJ:`r#A;u2Gt)3L`:QRM90W`i3?OUO_$,Q1^Ht.$@*YGfihkLLrIa6a%j.McX,5pl/1c^rRW(+9d5o9++)u0t_\Z<M8*dCG2OH.nUgd6lu!iN2+?!FH6QeT"HEJGCOF4mL)I$CNI&T<f3^J<+"qbXF7K2,pH%-Y-AZhd?QH!V,uW"R!Kt07*/@X"'g:=\/89;ks\Cd!3sX.714USF0*WB[@j,`Hr1&dJ0Wg9pQ)d^E._eSn5Y$OE\K7eU'e&g1lGf%a*.;!o`U:_Rbp]4mu&Fig3Bf_[40SKe!3c1Br*YKVLm]Z*$'!hV(kU5JB;r;3BN_Qm"U6ULjHAW,]TFP9Mpd9oiUOs6(&&7IsaT[%55GDpfLEKA3?c^rm`1u&TGT+gUPcu(V999(8hWQ^(LW^<AIrc)_MiZFTE9=lkAXnZ<9P],Nu"el.drZMTT(P!dI^8#d&%[4Z<%dn%_$#pr7UX7&PjIk2_r;/T%HpEu?U.iYO%%mBC"V">iHjJfqki/V*863N+R3sC&No*E$Mj[)GdXbkGSGdYe(M/'CV4HH=K5rS1MS@l%#O:ZE@i&TmU+*A1#dPg7m=4\mFfA-(M.1hC6h>UP,D:.^*LZU4kTE@s_>@LtL%eB=QQ><c^43LS8QWb:T^knfIJPA/.41#K)rmdA%-sq+Y/csEK@\i6eObJj>-?^-PnD6uTW'!Dlp&g#g/(KLHi3jhsbP!XH7P4a!?Km%YT6-Os;O.['IcR6BCqd`TGCG1^S<E@(XtorF%^E+U&$<O1Ba%*s07fs7mnPM6ceYfA/^=8h5/hTm"GLD:k^ZMN3lN^u%Er]Zige!-=q-m%pnkI=TcHmn%P`8HEa0oZV\V^"M7oAT>%fWTB?D.<J:.kbb6_n@AMR#Q=QXjI'p=URkYGkYPQ>FnU@\6S>@36^]o5Z_6f3bZMng)kc4"A/8^2[@=2\ZE//[pl1XiFjqW4[l:)%PgJrO="p7'@QmRRKKp>j_8sm[cFL1[L/+2l*8MR100pR=7X4%<@V"XI=E?sb#`5#a6l;<7WAd=DRW;S(PHYh(2MEV$)AJtT=7FU=%E!7VoROcl,S\eGmQgYA&RmM5!m.(BR+]gW<IT<CD,j86R:59I9DkK_,!KB4KQck`7kJkA^gN]*T&*Z;NOlZ(n.GUKUR^M#;``7F[%>^k7MTuLO2nfum=hGdrSQ1q=j#Ff(eXqu#1*4]\sQH_Q6DVc^B+1*dR?+(+o[7WR\<kLHlnl;,SM::JWg36B7k%bRVVYe9g-=H^'%n`cXM#f!QQgQ"r<H\''(o4P6>l+F:_pY9S8Q]#r?o*+.ql,rKNY9ZJAB4]f-+CL5!941eKY5O/Ga5^k4AlWf[bN#%H/_kUnIL>ZN%gU.B'4>N'^>nm_lj#eUPZ*,YGT#G+b>-8:6rO64])!IG3Injq)r4e5$q$`G,pmcF]EX!asm+Nh_M'J$gp]spd'pbo<AMlGrr%-^[%h6Y-qRf,]+FaYTd)P'p:htKU?O/%>'9Sn"Ye=&=.Hn=*cm^+=J*Gu8S5.U%aWaI2$UmjbV$\s/8Z#m+%><k$#]qsId3),aN<)[C/%kfV`L1osJBCm9$qIMVYt)\$*o*!6GZFEn\38+>FLR-,&`Y3=RsR.F*a2LRg5L0PnRRhsY"B:mgVU^e//)oTH:nf_]e`^Z&nIMZT\%`#G.1Ve^q;kFl`QN-`<%o/<33>6)(%jW[+)4/thQE/=3tNKSKYNc'!a%QCVup6O3?Q.F;2[OYRk^snLrBDWCPIti$5`SQ<7>u%Z,%Q](*>)c59m/rnhE96(J0gRk.9Iu:3S$dhso\g*7"a_P,M'i7G_P1!_%l2)Ie5*D>#p3F7%80eQ+:UX5K]/[I=?dmQTR]a]_e91Gu%FPSDXX8H,*&U1MAQda*"WCf+BaY6\*?Sen+O0.),I<,)ON2X#oIj,9=Eq+u>/elngLL/=YJlmN]1ZR&46/55Hi(4o#>+J!Wb)B!N%52TAJd2l5?T-@.61oKAFXYQSBpl5k;Z=B0)YQr>Z:^dhcq;W-L8j0UHntKAAI=#VQPt9?8FLWo\'CPZhH-8M$-tc&8k=WFZqaR%p%rNS5Y8r1iZT"+%o3sgo_pc3QmCAC-Jo&N9''$*jQ_V6QIq7P:*5/h>/8p`Zg3DFmFq8$0Zi2f*=&XN+cli.Pk*,mH-IQA4.ZWq/+%NRrcodJ9LTIKpgB_eo'G5slsQ1,\1VB\H?*C2eBGpER4^Dto=P(X&W\8Y^@%HVk2'a?jlkF]#4#KCRE"BRWTTf)<pAFND+#']*aD%a&VhEE-[tOmS]=fdCNN'#HH2*9g78/V=VY-")taZ)=FruWf#Wd4C>N:)=IqSqre<VW^"fpJVa*DYKpBBX3SOrAsV*<q4`)=i>X;J%TXM13E)3!X;\MiDSGmR%bJkCuHpMRsEF`l'YWMbG?&:tTpIKg`Tn)i4^H4>sH5dHRcZij`I'o$pJfSGVAh`&'Q'&quJo(eS3%i<6%H#:)s'0`i,NldUqR^`gtg6/rk5%]5,m1Yfi*0ZT<QGfWll0\M43d8milk85^Q3OrBY(T^T$f2']eK63eY4-N*)Jk!WYje4"K*\ub%>s$j26Oc/+1Z59&reB\+$HXuK[^KrX2\,Srm1_Y9q6sAT"ZuaeRd*p7nnrUXXbAjlV@qu3PSdNG<i/Dl_csRcDJf(PH$X-#QmI^3%'rEn/hW)W9D)^$P9iQu,[)$XY:YPNImt7b0@u7-K*%AXmVCp9JpU6BjU8=h[&OY.54PpH-(N43+?7d0Qpf"<X!XUdI+)lud<nKC"%asM$[ep?5;5cm$1Ii6mH-16LPTmhU$V(;:"kFHOFj3=`_iUrJVXs^u,/W&Mfn0q&n+)nV=8Ab8gZ@Hf%ns9F6.5/"WIjSM>Mq%\=%jPuE_dg+Kp\D_hW\R8Si>N7AT4Pk8?*r4DGT"jC_jc.=8Nb$>jh0?U"JreopD*6Zu/k`u5DS/eOmWUT2D`6[4pskAEg[9%\o#<3*%Q[Na60A+a:iJa*Ue6s_jUIGDd;Jp;I*d<XX#W+;(#gk]hcqGK-MpJmQnKjaS,]aMEUnR9rmasti9"8SEKkub>0!b:g=Vo?G:dj!U%-a.aaHI/dgYU(*OGpnm(4HK-6_A<[u?*%WkV(So/]3$SpBQtHdBZSg`="FqRI0<>4(GoZ>6HB^Q"L1(4&eTU>n?;><7%^V*r5cp!%@8WgRnu*`]]Y8nXl["a0X;'%@dl08O4JN@DeKIucNJaYY2T:3o(Kk!Vp3>:'Bc:_rV@S@\e_:Hl>2[1h]ItT2=\u1M)K38V%_cg8%<H@b(+oW,#a7%299k:2U;cdC`7?a(qI$mTQ9hBFA4<@h#6SReV<2ie3!>1CoiJEO("<_5'#ma@JneD78UKZqelph2pWuM97#C*-S%5^8Lq!R4+E":03L!au06rTo4@K':[:9$'k>qIM[C8Ag<b8RIF-+G(^[iBD43.L-$`e:!KFi,D>VY_`U=[=HnFQNRFmD#*-(61A94%#PC!18=\3(XG9E&?!P^oNA0UI[p*`nEAtA\Kh_m/KgZHANbk%+\3*U=kCD-hd7',PE>c:U\"'N'Lfn'h:6f4.%Z6YJPPXIF82YC$%Fl74Cn"P4he"pqlg(l1T\%D5`]+@#J?L5gCg-$H'AITmBgi!^*o.D)D5fkR:[hI5>i(2Ef^AKcgFRcmF;CO[%?AhkMD7c1Ibi-q1%BO@qNp-@i94-dB")s?%N6=tNZ0rHOk.p745FHec9mHLC%V,_XCqHQOF@tn8C3XB1(cZ.b+V[86JcJdL\6+HO*Y`%1\2fe;k0'QtY%b@Rac/BgD:A#`Zo*ZgcpJR1N5*Orb+T@`WD#(qWr7,A7`"6RYh*/'g"NELYsKN+n&Ds8Zsej#:VG%341R;SpmD1QN&@U+PXokn#I%YZBt?_nuT<=ZQ*o._bb?jBoYdIhZ8)=iK"G;XsEmV529&eQVs"Ei>AJ`,hUHl;pYi&ipY1/fHoKdXBI:dP>`[hbtX%*o4NW"1WTb%i'ummdt;2IkqZCLq$E`QO5LoT#T#o==6S'S&d3^OVb1hUP7+heCu]=I)Pa]Vh3iL[S'DC21$M@mDKgl'FR\].Z+1eJ4$ZJKPWM-(%d'2O6.IYG9;Q3-Q/4sr(K+OKkR0fn6D-A]CnN"3\/L;VD[PJ5u,(l*t)[S=c)*]2k8%4ZBaHIej[X.@*VF%K.#ZZB9'iHa:KLB<E%8^+-C&>,i<pd8UV-$a_>(RiA*+JMNb@$NP?N'&7O^\'>,3YCA(lf,Sm5K>a;-Qc<`b7RY"'X,YTQ*[@RReGla%@00!%4_23oh?b$%)kl)c&*Kd%3NtKD_KCVU,ujHa]kJZ#kmPtIJ+u8p:;ep5e1)!7e6R;]ig'3@$6nZE'5S*i;s;.W@fJR'=UK`h"c-Rhj(75-3BFu!%U.^QpL>3:tH-st$G]TQ>T`)Pq%2P^BoI*(<Pdr&Yr*c$M-7X@)/p6S7Pf$i7)5mVUGXV?5N!Bf^cmV/<j0^WBM["nT-cYgSSI1Y<%5q^auc:`G3'229@AG?i^3s4/):;V*a>!9cSr=5?tj^*C]2I8=Qg`'kKk<aIhmW2O:"@SHg7WlRNSO#Ip-GLWJkVrN/7\!tT^MBi6%4:;lqSsMFI6I_2Fq0:FP9gA^Wnr,]S/E?BWrT"m!\Ssl:Y0'>9On9D#!%6qr$nl8fnfR%o3n6:-JbBWXI85a5+4[=QDOMeGlVnk+%T<(NR[g8Snos,>bhNtb!=NEug'p<OTr/,%o+qVXb,#%-lpO!Ul-m7KA4<kr?@V,.^?G)LM=:Vi'%rXg/R`aD+b2tHh+uZImB(;h8%;GO,P\^l(UNpH<J:ApQ!KdIUbhO]ZtM5n#p,1N:9b0^-`2^W(/BpZ)QT""^ik"3*$(S45m;3rU"pFgoO,Uj`Q:<DRj.6L,!6&AOt%&AfDQOoXM5k6o<Sm[)q6p(:5QGoV5%.@qTp%tX?H3U,N-r>@dC3;.'J/lp\_]6\6'A@$".<0IU@V_O\uPo;hMp#T':!lL-9/lXXC%)3!Xb`R?9&-V2OT`#P#9+W]bEj'o5cUPcti18Dm;<s6m`ns63<4m&dEC]r+K22'VkFY82NR@]2G@IWD#Q5]u+2QpWiU[Wt)*9^Xc%25M8J25Cs?qB5qAi\d8X!dZsFMRl</#%DO^Piq%NfAo%C$6'og5:%2dhu*i=^kYE=NB:(ED'.mKr$`*NYVogGLK/uD./^;h1so'a%$FQa.Bo^!e+)kUPP`JFF6O07:AEE,DkW4\/TO6ifAggg%4#KG;/kSioj4e)_34"iq2sNV6oZm6o'(WOZB`BJcUoVnL$fG\97%]/o%U:Lq3k&<\JI%;lbE<Wa6T_?i]VLtbq8V$'7&I@NuFVJt\L>'RY5%P?S9<:W.m[go'PAb[$W(O_UUMqI=LsQ]Op*e^8d2\V7boVQX%LKd]i.6!i*,[bVe#T4lta`h)638\umSS&Hj0"7stR8#3<.9m0.>]F$jSA\D=(ueHNL^`Sm<LPmY?=6']_HF\DboWZSOO8OSTF3;,%aPXZ\Ll)[N+UTJ)T-CC)-k0>7EZ:FH3(BhqUKldGV+TWiJ31uX_j_lPBJa`VW&ef>SJ*Rr[K/,OnU[2m\=E7*JT1TD9'PVPg,kR?%d_]f&*,^SS#5S-u`G<RKDrX5(<(WAJ.h?pZ:?Kri$n+];i]ImjSuc<P1'#ImRA_KZG".E$F#bcg@;,pc(f?m`V&=op+Zio/$--(I%,n".'(6e.]<PfqebsW0\WK?l'DdA+V+)L(^i@\jM*Fefn7oY=`A0o<8,ajiH>!Fbh2"D2!TLGKg8Btj1O^9dD:0d;NXonH^<2fE6%kKh<T+N4[#o2`=SkXC<jQMA<9IhE$H]:QHm9Msk)15RM0(OgU'`eRKDiREWfNnF9s!LL]#83(u6Oh"9Cjtc&XXljq03%"*SG]&@`%EdTVZGq+l_mS,AU4#s*O&+tSREYudD\)K).Id!mn$mK?!K#>rT`)iC=SFQiS^-EI-9HdU+IJ(Q9_&@^]/u>8VJ9[h<pB8d!O=/he%4C(=3dhRdsHqkYQi8IHdV)Zk&EkDn>R6i7]KPhr1irb'MMUuUkT\)n34tIG[7>)](4B9o?cC5?oJS#"?;1?P"lI5B*R9NM(19-<A%/<;qOBn%=j:brQPiM^oe/diij*%476fkd4.=o$LWl4`NBNWQUYogt:T`tL#;.^PH/8TWm=iRGH&D9^1@X>pT79N0s)S*&dNC["T7%c09!^hcY#`=.7cHqDOe+aK]9E'0[p*F=.OB.AYC^Ubmj7S#Jt^^pK=Q1$2b<Rsme?P3FWig13Qb$I5_&9q9OpQECu*`(uJ-e-E+N%1^.mPZ7"MQj`s)0q,43N;85a#V`2*;liJ%oTpc;Ua-1AIM9kouNX?jcHW\e[EbE*TUGZFR#tVj6MgAL6!1"WNc*T->4C`D%CT*TO%,%%<`;jrh7N;btS#4BHN]dkAS4G8/ZR_^_8]KGe4dYoYcgFl,S&B?0>1Kr38aW/7M4%h@>h5,$9c$ZDk>1*hrA5SrGQ"Ig91T6kN%2;5R'j\aM@A8lE7d#EKSO?kj\g!K0p11KWS)hJK/[&$'MTi?2C+j"UM"m4U7^aR2]5l2qj'5EnQVQ$d]>t7%)C)j8c9YfX/<6p(l%e0$&K*oZCo8\YG'i!S8!+[1'l9(te]:$]"#rQF2YE;(igs'@l!rlm3WM=pW#,JuqD0#Ig9Q=7:"c7NUpaJK@j-J53lKg/jtZ#9?e%QXME`IX=;"gPh(gOCcA37q\2d^qLAD1F.o1.U^(ei^tm;X2$W#q&]="l"G'!]SdhB,5GpB,$IM%dhCkM;7b?r+m-)q7oe\XW;F%$%pAVA.=.\l4XCbfAF?W0jp20EOVua0*c'KsRV.oO$B:\uAS$0_HiC]Tba59>nq9S2W[[b6K0-*V#[P,#*WXEZH7NMFXD;dfCZdd1!%+/aja5Z.7oS*+9b(YO*]i[q=<*H'\kCpRpD!Bmo<N=?IeRMXZ7BJ89!Be4F@?Xq]U'dQ!+Wk%(d,SH/'U2B'1ag0k0_R@&bA8&a!%ep46Np;cDiGZkc+f!?:mp"N65)Ffa%^p=AIn@M[E:V4#2e.YBF.;"3m:/9rb^OO84$%uBr_NP!\$U9LD86K(5CMZJ*!'moOd`])B%4\O5+K6$LtW4(;)iGoH<f3Z0P=#&guK4$[Ad[lA@8Osc_)C]I%+R*kc,+1_Q&*6[p"QdL*#deneAOIaI54MDPDBY'fe^`nD7\USJ%T]Up?9UMn6fG=Ya[PndYNY.%>LH?Hf4_DZj:ikJJEcLDrN!M@=b3Zq*=]`mkM\mVO&h2b=L5<#i$OAtD@J"\g-Ae1s$riZg#JhT2%-]moJ,90C<P&dsU6KD1!Y9,#$(EeGmB=fYrOb25d]Z`d7/p/XXGS95->VqR"1Q#pQ/]me?Q'N_@5?CM#>9:RB>?=I"iAA;QEk#,9%9CbC'mib*OAO,6TFQ7*B]Gf[30a]LBk)rkX"@`uu.p(1>eSp;;7]Kj[.<8=Ka-AeXBLA&I\/=ST/2G'`JDiGTTrY>4>d2<)(4`U,%^jo[ES+%b3"]MYHi8*;#@G81Z7N'75)g$PJ(rK?03SN:+UU\-?)e0Ske\>^TEO]#89:Nqgirf.#rpACX(o+$uZ+9LDN%pE87qIVk%obUP:%'Tt'BoEYH*k@;G@#_5fC-H;K@jF83S&Q;#bV!AZ(uqr;N"KQE2iTQUKT%5(T?FOsX\q\5^2Tri$=VM4K<B<VC:L,D(1'7U%_>V_%&e4>-U&B[19I@LCG2ghaZrdc=Of\.(M(]%^73dBW`EPcIVGi'2+jVY."UcsjM#E)'K'<ds^%;Zp)nLS?6sXb/IrL*?Tq:IB%>]^,k]t%DW1_+jBHF=8>5/\(^%B`a#Q$_n(=:`Kpf']q'=\nj*i3pFITN7MhHYj>gO1,g@,gYG2>(NuQ5)$j'.h,Sq)X,,aSDY$+%BJ#31)"EOT=%V"GZa6W#Yk6Z>d^*A^nV;a%"LkMVm0tDLWZh)FqIkIN>s^.*jQR@2O-p+=oS410F6O>ki^L"4pf6Lm:4*$P;M^gP%f5tq_m0h$i-kMqI+lC0DP*A-KS1"#7+C$;?NkK;>G`!YAo;bERI_W`Oe^ZNZY.@0NOl'*:MpeC5"hkbV%2upDD^#1I&P$U?j%u,D%M0:p`dClWud"ZuEe]TG.4fL.GGNnLHkS+VEc.CB6#<+ce`H-=sgI4JU:n'\hma.lW#SH,I?HEH:-@3g$j+i?3QZsU`Hm@Vu6@.O#%aZocY&J-D.^/qUNQ0*HbI`EsAZ:[46/l2Kl\S&,,JEl\uDLo:U0)3(Ul#ao`*EUR=fBKg/.(RkV+8#c:V[17[X)RYFM\a>LQ"]\3%HR;d)ZGQ6E2Po;N9u]R,kDL(`7mq0!KPB>X+oV<hO&W)U6*>c2g>1fJ+oQRHb(@ijR%A6(`*<jXTFhk.XV(B9UE%`Mh!bHg8*;.D%E9tEE@K5D!%f[(lT"i9b=C]k@^BAk_:r3&aiBggL6JPE:7P0>p#aliH(N6F&<W+TY6)B7Kk+N:<71;qrUoOi6il[tr]bi>%*aT$4%C"<G#Bj+ZHqF#b<"((uelL7";ZM@+MZf'&/L&[G"C)B2Dau6"bl#4_[E[<^=m`fbUb.qptY-(+94^5''9Adm4jnJ.O)u'4fYMdEE%R#tcpJ)/`b75W%cEZI`1:Mq-$n0f.Y+dYOD$961Y0HjW"d91a7;F%>XrhdYEhVa)3cRQ*K*hB#a/6@WC]r,s`'TIZ=#>?9[K1H>;%cJuC8Gl(Ot#k<4V<3QlEh.n&hYb<OM$m]#d"0dbt)bi"d+dG).H^%3()D;l)3d"XsMI\oYq3kKVN(BW&]V#Q;R/?Q.-ApGF"hm.7%l2WEkn]@k3\"+]XqH0?W@\qLN'QKE="'&3urP#*11geWqV(1of!?*UrVB^$@1/u#[=cf&]lD5GCE%[-4U/WO-a[KMeHqom'K3V9T%fkD'[WZK.WcL!)Hqkn'Cf_US8f8BY)S9#RF1h`BA0M94=PGq/'/qpNJ%nE=LmBp<I&3B\ZO\"A_laGEF,/f';B>TE:No'oeoe#k[%VhU%KMAj'e8p$nK<6#2`,^qmVTFu&+[3C[hW`GTur"b9"bI2qrfAN2620cgYK/VE$Kqf5fO>co0oekd=,d:]1k[Zp[gE,`^/0"9&%Yd>Ut3P6_b78$h#B;P!b2C!K9M\/S7JCX4JB?Qc&/SPCQ@VU2MA6n(]?I=p:*:@+oQ%0$:'Ndo5jd!W90hPKD>>Z0k0Z6:JL+tQ?%6i6qu-p^PcjEh`@h_*d?S%@!KNBF>P8=m_l+.arZ&,VOh2%IN`_@MQ8Nq>=Q:H:2n1.7^_bp&<*>QMW.)>I0b4RIXH>aabI-dbCr%;k9ci+1I?^r3Te2.3_1QhX2DXc)G#SJuL5Zhj3-L$;!aIZXm5WM/u"l_c.kDm_HBshe,Kk\!9+2l[/c]bAX=J.Q.AkH-6SD_11&<%Ruqt`mINYO`Fd%^7k-D1T@`eXAoQTJq9l`^1I5M/_q,gR@l(qq2PV\e*\)XRpllUb`ZO]Xr`/\\R17`Ubo<s<g5&B<IGs6FVZbdB%Q4S0l@iFclOH&iW`-W''Ju""a.,gT)9Lk$-n-4+m*Ju&S/!Itso]X8t!dR8I)@EXBrAK*@Z+iO--nL=%;YCgm8#uZAqu)lMq#=^h%p\Bcs^N@4d2P5W&J(acaj?DDVK8@^@WmI9WpN'E(I\U9/U>R74/S=S`g7'IZHagofAb$24#>&NhG`>'5qsICF4=_X&#([\@%Fs`q%Kl[d`>W?>+,7B5cBGu:;[:$Y#@V!b]nJ\O+Z]sn#j8d+<`:m+66&#G&b^HH^KmqH_^b6gr'Z.O-0$-U\s6XLi52E#hKuBh-]@pT<%P0=b>aGbK>Jr\YD;qZXZLV\*@s7IF$.9Elqjn%l+_^Lhb*J`ma]5STXXK:D8+Q*&dB.Y)]"R^:FK]c,GQ#1,#(]+qsB`9p+33eg<%5BJh@1\QS>CCTJTpA-,40W[uukgt0/25na)P<rO4X3PA25nXD=1BOG==H^;%B*ObDp]P-kC:;Wf.o0F@1`^970cW"h<sbVK;b6Rt%jZo;M@"s;e)mW&c5J7BEg9bRlflu)&WZIdkI@S"Gn'doF]gQ+5NR.G9qNb9-KK'?t8H`T:(OXmQ9+_sQ<E`!=80?,q"pu,_.H1DH%7;X:^ZlO/F`IV<b4kV*cQW@9Cctu/@DJ;>*Q&@[ur;t\I*bSpnE6L#rNd[g=ad.IS3?YOP!IK!0HsH5<(=$NNEoPcb_q!24j_E6n%RNFA9lq-]PJ9#0?5KXCL+XNV?!160dO8-L>dQg#&Spf+X<=js/FS#h?9(+k6bIVdBUq`#+Xa%>/!Wf>s=6Yd9l<T0Lg[0c_`s?'S%UaV+_>O"jh;:K^bTjF^bc78?;jtOorhDgIbQnJ7Uk,Q17%\m;*Fr]XUPr[Zl_n7N*@3p\+T#2"*'_0BR%T=0^&rk,O4*sGL*QBMf%Nc!*U^QpV,iO7j4L]ig06,&odXUdb6S#fk9\q:>g1=6X>/a%LF$p$f(]uC;5qd2<gf>V>[N9M!h=:N3r/kuS)PAThrL='ZDZ&Dck%.1J!W_]Y74<fE5Olti=,DafX=[s'[UE5&*50=SDId-Sd\g<;ggM\gKX[=9jn>mrPfme"i5/VcTFq?0CFoaE\Mnja9ejD)F*>7T#m%JHhafg*W7O)JG4mCaVsAQ3J8s<"VF;F+KAZg?CMt0[LA.[+pEdUr5f>)JE+=apg0q']4hjhU^,AFuRe;kDO4a;SbUsbl>:8$s4tX%rG`U/_t_[9U]#5#*=Odql3uEg(oZe/@%[NRkd,:O4>])FqjH'<)JDNgriIrZ>;acHhAt?^?FO=8@?t@DGYJjrfnGeVVk>ln*5a(:%=d9UeD4goaK4^=W_H5L-a(-M8!qLGXRp)47Ftq@BAJgV!aBKQr,eq(L@N:?W-U'opc;bpE%5_0[g-_,1UcpYBFk%iVAKOnnN7B<#%bk[FJQ$r<3*to]\JHi+SE&Ib#Y!MCI6o*0Vd6PT^T[GUCm*S)9<Ku>a-*f*)%9O?%9f+sKcns,!HUeeq"-)U%C(!OP#ppS@g\WeR%-tF/fEEUdA^&BKorm`!#_aLh$"3hlI9_DuS*6+k,7Yel`XR2\&@1^Ai.K^.B0]G+:"W[([RQVR&n;4eP8n;-1)Xb=;dmUN4!tG$d%h>/><bSY*B&;6@\[Xfc0C76&S5YFGENh0sQB[EAcIQn#T,8nK._o\M+)tOtq+S&Y:7+C%di':**dijS>r1/Om5`\R4W<E'(\-`j)%<cH4tKR!AXn6)\^'[36[$f\B/P4S1,M:1!?;=aAV2D</?KFd^tr^4XuGd"4sgD!?p`l#3Uq%<Gm\E#:qJ/FX8q^G]ZcYt-<g_!7"%FJ[oii=*B[6BW8/;NlH/3&T0@Tf`K%^%qmX\nf/Gno>I46rd!V(W/*a$H*Kbhro<Vb.rRl@@d\.P&9Q+b+13>:8])@/3XlhM]tP8%om7dY]*g`q8QB+R=Y,ef!^G_CK\.@ledGoO=n'%J=al+am0Gn>A53Vo2ih0^GG&Pm622sR.`K7?rlXisGTk:ZjgX3q)a2>Uh]-N/%3I-*+HuQ]T'bP/S+`d9'4p]4OPhcH35tM"5Q5YSj,5;0WKmWHSHP[cdZ?Hk0q@juUq!gs"7mp_^/LYCnNr5UG+=oYUDRmiMn>dD]%HpMfG^)DhDPe=W$\\8<PDR&Z2+P1/.T]#IQP3s'FE9[c)/]'@_-H`j(AGh;nk'[u1)E'4AgFL"miStTj\^qJM=qICZ2\`!si=dX8%',_B9$?'-pEp^#adf*=amNM0C<*e,6<Jc2N]L+gp`]`TY(C!$c=rtM:PM=_Y1&3TqEUpL:n_1tBDtf)($PC*]o]!QXB`EDN/M-j,%L+IGCOb5(CHOd[Pb%$VG;m-T_j8>gs/^8cK5J;)mA(BK*nXo$+3-5]JI!U.#"mGJ2K)LBHOTNQ,l/'"hp\j6(&@(VbQHeRZGk<:G%Ll#P`"3"I#mTjBq,UcA2+,J#Ihcj4"dkaXB`'9Wj4-HrdFg%9n0^&n\7mKI*oPKPnRX'pcir#]HIk8$eEr<^o2_D%BF'65&WDt8M%_d_fkfioJM$hnVgA9$]l?=7%j&r8$V'X*V/--iiCe?,9\]b!@I0V8Dq8+M&m^=jBOiOEF%OD"Vk&K!i$]Y,&76IHd'q)C9(Mp_d'%`R$X7Z#Tsf%[R\g!S#Hn][dh$&\LMc(a6>JHA&%EhB_n*"E/`"rs(bJM>=qI+[V3:^'r>;:GR/45/`XT:O(%?XphDi/Bj56@Tu7^%1cr_nplelL7.M-"DP!(>#IBkfKdh*!nE[+kJs%IuoBCQ11M/ktVs>pr/`VJi4O:]K!f21pI7l+Bb[XN?s#k?I'.M@tMC0'4U9gFF%lm4am(se]qa0C7F2C[p72O`6"L:Lal?<-.*ootlHS/E\O]Il.4WHa+7c:<gL`8*$n72?a"Z%Ej(U3\_+/nm`84^J)**-QB$aue9>%fnd@Eh#'G$5f;Q8gdATah30?Wf</Dn`\I[(]3LJ,aYLP<hSLI=i3:)&V0+Y?hRZe9*OZf_heq^>LV%k>@QF[%q2rq7[*R3da%H@&%3)?@p-3)J9?%-K_.b1H+?lr$"10$r0c#c\<GX6nIg)@!`I===EJu,ItFFO8JnqHrGBF3RonE1Y:0=>(o_Xm'`O!c<XnEfEX<hG,3%8pZg8]Y5kkYf&!MfW4!7m2o&p0odH"l,Ju+4i2g2^b]LHPU6+ob#<^RJ-Ma`J<Bsg6&'V*9"pW:Qs_/uMhDdcN&6)S8YDWA:EfuX%;+V;Zd`tE-,i15K8!8!a79T9+qR%G.BTY'5P7:mFpph=SfuSuhE+:NT_Q/'#6u!?:&HH`P9Q,NNiK=?C'gslA?(nI21c@iHcEU"5%*OO!UBG0;NiH@".H24WG4K5\l&_r2o:tm!'Ue;%2k!`W!\8DnlbTbjAq2Z_K6#((f3&:W!,*2Oc]9a*u>smc)s'G[ue1UR8/3:$p%goA:WP-GksfHIWuF1A^JnWq\7a*B1b-I3IHS)OjK5A@_$'R8^c:='is_sA^"U=Yl^Ig<*;\7'gbb%T/\N%g@c_p<br+5C9G)NrAk%h@g8InHbDc:&Kk*g;-9!dgLXArd>^d[?)"']#(0r.Z=Y9SE"8Rh3Z'L!U:`5)WB(69K9O'j"e.gIp6[o4R4_,+o5?&(fBt&SMNbs%Z%V^BoI!*u\/ZGh:BX],d(G8;mZX<[7-*rGI73UDJiuajS&F?o0r_gtQT#Cu+e*t;$2;.eE@;.VirtLKgESWp$(?mK`3`cZ19PDK%'9fL[/q<R=L,bt&%N&a\ilSJMhoruj;lHdH#nQUB7RrQUY2K`c*3ulc4Ul\UZ'3+8<F4YQj0t7TXNE%Q?eEpBMcG%V[fC:pYum8m%PW;QZ6;13EUk!.?[?f#jUH3h64dV7kcVO'Gj=5=lM;akT3$Ht<n8J('SfG:R("A`_b,#KkaHXHZ?#Uf@T0j3%#G3BQ]g*=!DTCEF%Qac/mJ'TT#mMnP_X>O>ej,lNj`O`s*A2S^:'s#)VD0E.LFT=G1)P2\RZ=;EldHlZgjj4/?3=c,c)IS"XM28nYibrL;6J"G@;o*Lc%)J;>Ji6GQOn-T9cXQp=X`Bfbp^ZB-&8GIaSE7B/&N&"F(&#b:N1;c^1/1BY1i?UCMHn]n0m=8g-Jd5Sg0Bge,pZQjBHQ`J"-8]UI%9)^WZ5.h+ROb9iA[";Zp%2o6]DpRrir4`*X7+rV5kqN^RB_(_`,]XE2!%%l%*q4dl0@0[5k0?KMP+t#.:N54M@'=%U@:+0UYD/$B%$\N:Vj96c<9*STT6=V9g2$9W$@buRG._kGql>nf1BJ]iYJTND(:Npr)G?&3Sr[LEbn7T'k-d0i3(Grr]Stus3K'rq'_>!rkh`gmt%BnGC0cha_4(e>s3n/n\CiiiAR7ejIC"@m<0'0Q<P^Ul6%hW32mO8dc2FX*\h4G<,lYg"edMbXrDOhB<LbO#8B^]!VLkNSI#2Bt?]%iVUB7\bG$c5Ndt'q01TshoVMh@`5Is#k*2`Hgl5DoiLCE07&miI"Ll8c^dU5r=m9YroNC2T4%(*oAulps0jZO7=<bpIQ;WBqaS%L%W1U7U_3]V9J+qo7hs`NF5?DXrWjhNgMdNKb'7`rp4iI]1H+?kdTQU)IJ#3.^/G=5$m[q5noP6;pa1^8uig7FYAhD53PrP=b(45;D%n^A#@I;p:Y'E$V8$#BaF;`t'G/"aggr/]qRs6"<Lp[iQZO.UpLMgaC(bMU<hIK#*GQf>]-qXcjVD2BqC2LbMhcZk'95P5\+J,bSu%s6=F*pOB/dkP_6cgY`#-huE&=pVBM8+RblYZ)^L1s5EF\=f_/nj6ILLn(>gtVXK$4eM#!<*Ngse?XNScI#Zm*o(a)iEkGm8I2gL=%[FNYdpAX6)p<C>HJ,Ah%s6:XcIeHE!`HV=E^O5tIHAW4tr'mg6k`J)Wr4B/<`)kIIito'`XFp1!?Y5-*s6I"0p-sH)jLKTt=)>B1%r8#Q'3a^MartZ+/(aSs`m(E7?J+4>#balI,]]F?lO8KZ4+BEsD442A<rm"mL_`i84jX0JHs.-q&anPdt,A%q13r4HroS]"5<9#H8%IPUBA^@Gef4I*CtlJQ"IA@K8%2n,1K=KfVO:LDiR?YqN9@:&b?$8_NoT3hKXSF/cjQ7n%MOQog]`*^"oIeUit>S)DDEk'])?cRcn%$^\bVQ.N;arkdddZ/>(e>7c;CEqm^mp=^;#?aq))pGs,/?aq(>B1Q@\K(o_?_afC8CKh@"iGpn&94#enp^<G+n(r;K$fWgE%Ni6L%?e^2-$^\aYYO]7?`*YL;XOXf3Yos%_l/gT%^9.Y0(JZUo[e$mYLqdnTH%)#3=:kMKh&Bk[qh#tTq.O(*^3en"6h9[*kFW:5mHsJ\%%j1iJP:,f]qSV?+GN!$2Cr\d#heg,]fIsLoUJQ^;SIb2'4*<48H^ArJgqE6oRr:H:rhE8<p&(#O:ED[r_r^b_o\MgHoCKG@FSYpT%F?_a,IrP5O;4Hs*6i/k8]s5r`_,8)\m^C;Ca8b&orS?YWIsuFI>rGr:r:Ad?]++EnFT-4nro*Y42i$VkQ`scpna_Tfh_#ukomZ@B%GA6C;.A][rl+Ze;q,EO*b5EC8jl*A-Ek`X8DC,52_p*HJmf)gfma&%Op==66hd!VeEr#[4ru^k/n)"#^kJu,%FLU)8ZGj^&pU0Cr%Vtn@K@m'bC[nnk4p!sr/k4VF9*Yn_&9eAU.Jm,nc;Kqm'XQ9%s?M8bR<PP`Onr#A8m.9!c^1Wdcj,m*+s4dZG`lE/5f%]<2&O%te%8<0$\Q6(JNq!BFN4oT@M^\drnZTkZ605lm.^%LI^-]]<4H1]c;:OYGo;=<rIcF<&OO7);p]AL65pTNTXcZea;+0`M.\[;69QFiHu%D]0h7?O:''G/KsAG3`2t6`nQ1]#8NS1;@=c][ACPDgon$'7SKdIdq'YhY-W?[XNV-FPH&&4R$d'gL'GELNo?Qe4dNRg"GLpVhXj0%gjB%/h#!]+XnfXtE-(JGe@dN(?gHRl\)cCEc0+7b_=bLR,4Bs1r*&i$^ErWG;t9`+L%Ph_K=k8,rEAsKre.D`qV/.-06_-L;bI;u%hPk:<XaBGbio^+G7NAquAIu1"n+57bj3AIcYBB=2\)cD\X^fbrR(o+Do6p),f#-1ODflSUNlPblrAY!']jFZRBP!7QI1CBjNY@E#%5"g%tG=ZlsYP11k8B,"(d`-'-p[+oi$-X#L65@rTd`?Uc6S_i^6]gZ9HQ7[K+c$;5.#\ba&>]-RODMF!]!!HKV2XGg(#?"^*"l3b%mHc!p3,+K^X)=ghrDEMj@\qg1Z,R5C;;h`.("JAB/L]<B9[iG,EN1uEXRS!H8S3t:[RnGQ4=&B.lknFlb]*BlTSVW/l/U<K?*[IP%#V#rXk=ee,E749^c0N['OH3:+eVBqc@T@>NOUeBtVKn=S?>#,&XuKT]1>=))]"rQH[;JlNXZL?_<9k%cV-0O<UM@K3D'CJN2R?[W%S\mo#<&t.a-F2WdUf&tk;&ZBZLsei(9S.+*DC3`COZ*rZ<,aW::C@>,5$3Y!00"iH(K`&`jqS(/Wd0kirMICp5rESb?Vo"ZFAVRH%((.):DC,dl2iJ_G+i;#6n)F,cN3i%L,#,`/?=K!'mU[:_:'p?"4qC1r3Cs>I11..\`gt%196M++iui4@hrKmW0(@71&sVPKj5,#&%eI3+7h+'?_g&2FIP7$cR8VQodVgX:"`F_Qq`QmMV%6I]JZQFd02_bHFRC#Nh2j8hr-gW6UgP*qB8[*-s]U:V5mUQiT'[nVk2H%CX%gr*mZ8'1`g]7nO78?hK/Q/L>-HWsCRYPciu.C4uQ29/k*VDC^^7)PJ\M`rDmA;s&NlEbNJEV<3h>Q8aMd-t[`F,'l-IkK/8F.[*[%0a+T-m$re1or:u!`>TFeR*QojeZ7H29'hX[QO<&d__UM=ZFqeVJpN\V3iL[J?Hoe+X+XV@V2CZV7pm3W67'Kpk]2E..]?9;;F-jG%K(Z4oWJ1&jW_o&dl;Ytalu[ti)UHoAfq`@_=G@hi/If]mW`PAoldbAk:'pUYp8Y#9g[3ES^%Qfb0WJ-^=b?%@))faSLK3#M*$lF*%IE)oc&>4J08u81C5QA[)U=NjL6t04P,h0*qeSLP.W_tae`E@^kfh2a)fd*Mj'm9tb=-X9^<ZA+Q:t#W\"kBtQ"81qWU#kuN@PuE5%UDGnEf>h7b!fdo;Jd-]1FpLp^(8QO#[K*pAK3qi9jk.?Z#rSf=/X^J.aq$co!UA<FgC4>PG1`P@@sf:>5t-]2=OAT5<j\T6@N/Vm%N#Qt@[7LU'mBaTSp=VOpWocK;p(r%OXuc"7\^4=-^.AKNll17n2V>DBo]k"@O"rRh_iE,h7g1tDj.1>ZM$g1l:XGI4Nl@LC#[4^B%Sjb-1B7X'Ol<.Q+L3cm7^p^r$&o2>/nto$jV_boTJsiF!mJ2/k,mBHOKgH:noB@!9#T:sg$jRsI=VYuinim(;.[0[=NflP]N$hQf%+CmZk63eZX>hsikapBH#G:)FS$guGojYn,gA_@tS6>h0Bi$)^"HG^:EbLH.sZ:mnM+j7N?'=&%Z,oC9<`#Ht%Nd.=Efb&.6(0HPV%Ls9lOLP(]=q/.%aAp1WT&[FMcq?WK81Q8p"Xi#DMDRV55hY&ReK(:ahH<,7rR9_=*KWO$q*^VJ-RF1*Dd6G_=?UKK@e=20q]:h.m%8K+[aPu*/pGg0AKQmMV;##V9i^E=n1]h3u[Y>R*7#*U<<SX*iZ)7if:.,Ym%fhoU4aRm(o>_:2&&d.SG^mdTu+JZ!5;ioO0_N,QI%WrtP]+[@=t/N^Sa_[0">rM$h)3Nr^5(3oM2K.mVfJZS:#mQdX^<9Y$+om`@P86L?`k"JZRh\U!3\j+^``$%CjbTk3oq;;osFF<:!%7[Z,b99@isd3Zm!kg5A3P$-f.S)-iX874ui()Uot!Gl9f6*b[>%Yl1+LGO].WIIP\J#c5;>EI@6d4ImpQ/DXISQdQ\7'^mO:j`OV%SV/.GHEr2)\2pqFGT=0N&6qA$iY[(:>c@442HVPu2lSg^S%KPtg0rm7p@QMFRGAD-buF*%r,bO\,^-%O(SUEs/Ee^@"C2XgKSo6'%cpalQ\!D&n\158.@dZP$k?!Cb;#0>jEt>:!G_HVojbU:j6)a_,$9a%\B?Aka<.ce.n"9kk0M;R.<GW4Nq109j#8P/"!q2cd>neNc%)Gi3,nN/4B&*g#2CTts9>O*utVMfV3i2XCgBZN2m/c8MhE"<;iP%*96iAWO7dkCs#$2Op]?Ug`Q:c*]QTi9p:;6'F/WH;D[-8$91%<#]WgN?mF.'FZ8F,8?+^i$T3J,NpM>5"dSIBt>Pu>T,80j/>qGXpOt@^>bu4l0u9*-sN,m]8r-R232]WH'HQ/(b-62$&'FHTq>.@%8/M`OAf/,CV$.]sUP.'/@$^.=B8I#OKMm&#fXC"LR0pSV`j2H)WYisGU8u_VG0UH4d-WHf_K_K8D,T>8k@h;7?+/&l0A1?0(W>rd%Z(l7P9%!lW?]5*p*JL5RVIS2kfLVZW>*gIbdXsAq=Z?aW/IsstU;dG06=K3/0l(.G!mt4#BS5M!'X^4I_t&E)^N>FW9@S)u@PpN$%%a>A%iA,e7&p2NUUV-Cd9<^9T71.co/rUK%86cu\!@>(2)C2JCP`=`'9e%._gUOnhJ\mjH@F&8a-;s'D%Y7bPm1WPiZ<AZZMWA&#%3P.G\07qZ'pZ0dPBI9r&L<n5r:moW`7C+tcK2IlR@ig8Z@-)7<(MQJKaouA3j)c25_@+W9=ITcKn/#9W"fB&]Ra++;?m`2.c^)BM%G`q2IQj@oe>R=H$^;HlP4dX$nqo7c3q@4jfe(\]+gXI.XH"c\L$@IWKl+nNnJ`rjCF!"(d(CJ!DE1[0+Z"@<7TaT8t!7?L6C4O/@%PMqbd#X+>[r^4ji]9Q&'j4pMTL)r`]91'MiAX)=]h:0m"JS8k6kW^o31r0C,9g]io%uheP\.DBZ$7=/!;nG@DU9S.#&(.mf;s6Y,%H4bj;6t8SN0;<0&6SG1YdEV/)R[OfZ,+9F4iC4q<WF3[s27a'IDF@Em5rYMAPftap1[%.^%:\Nf1pdkB#.RB;)#+W$6Q#S/9e?MG%LT1Q1*^o*DL(6W5,Z^TD;)JeL&#-@XTG(0[DP7_@BDXCFPH(&Uo,apcKc(YY2?B#JUC>&fJ#I)qkWdRWOps+q1=16D*3RY2W#Dhc%GGo6pi&amr$ud8fRKYY]<NQ>9LWWYKc9kU45R4#ag`=Gt)PYT,W#DDWI6_KTcS[hiKorCD?n@79Zic^`Et(jR1/\KcK-V2e'Gj9>%`ZeY.W>ph8ECA2EKo7/jm0&_EWgX5FNE!:u=<"5_o^)B-<[,kP`UPG%?Hck>P;T]Dlo<"mEj>/dSkp9%h'56.1)u&iX[%X$0RHDj%W+]W6nR:IB'lE;$/8/eCeP_!&ZefFeCQYM&@04u^;eMDVna.As[lMIai<JE&47%Ok1,m.3j"PeZ4g7iH5a[@mWW<kBdq1r[@E"mC%9cmi#2V+_Qe>':"P)XSX9iZeA2]2s_`4i3?KkB&O7YTFK<2JkpW`(cJoj)]TB$S->6;8r2;P,6s3et@hgh"P"=gCP-9pH`3-$C-4%Nts0')SC9^T[DmBY#V(<GFAROTu#`0:cQeVU6K<ol\:,s=,1/13stRmj/lO0C*HnB_hu/'Q&BET?j:@pi<gef?+ERa[Vs4=[oZj_%NdZ99Q2<,rU)ca,Jq^43;RWa>VJJE0rnKFLL`oB93Ys-JX7dYN?Feej\/3j:hF0*/1u+#"H=/4Z-7UF\MHLJ#bLW)b<R7hFWtuU.%lghFVpb"I'W`#R.c-PSns5`-OoYe@X3,$Q\So6kOOXYD+P$V2Wh/rdJ[_l2R-*nn!,P+ZWZPhP838Z_3b4%8LLI)m87VCH[B;<qN%aubCMSM!q!AaH'?-eH3umMOAr1i.5q`QG^.]gr5a\Bgjs&+f7bVs'U&@-69eFq3a5VL.?Z^2LTpk$#8ZN9L/9)s!*0fDWP0N=F=M%980/?PN+L9"F2#7ZBsh).GH;X;f,6W*BjdU*W)oI4cUE#ef^B?0.-ZS*0+=n-QJ0&3oq>>2S/lcbN7C(\S$1-]72!p3VL\>9qPop%Vk@S6SA)UsGT=+ILL^'SFa+q=5%X=Hp4B;VR`E0lo0$u%d_ht%.dY*.A9o@Fd/>fcn9/Ur[g6f?]N5f9(LZC*0AN'.PMu51CqY^D%ZiZ0hQS;58j!9H/T\X3jfh$.*4P_!TOXdJMcH*EW7LKam/F(i]HE1%a[2Q10Jp%q%CQ7`dUM+kX]'*<J@8O3I+^r`<P(bR9$Wkmu%Nf"lJU?tsFbofSq=?PZOR%L+#X-MLOI':t-s$]Dj=ffe^$AZT-@X'HIRr<'T=0bSrnrlZ$[I@>DQ'l_G.MVE*baYY1:sOZsIeMp<%/?QeY?dr\T"&mco,tJ!p.8$a31X.4@]Bh(\>#Gf3QGL8*bCqN]@i5_(DAd?9dX^KF9qr#`\"C=TjuU*"mV7js=@t/mQI1+?O_+4=%/W>r7mkS]*B2?+6Z'I2X?oo@2H6SQP-Sdu0,s"8Q[S#uc,apQ`]'nK%/;L#5YWeC?33YtpB/F%fjNqRD4NX;Er-P/&UNui,J#:"9%:\88]@Ki(2```R"N>[)GZ6]3"F[NtdN`LmtS<t5e'DaCd`Z"jPCmo-=`A"OY_HW`:,JQ.aK7Td[b58o>`;q'e)OVdMW)KbfbT(*D%W`*tpXVm'CQY+O$fL-?a<pX#^Ah']u':kQ6al#/qQH-s)LGYpY-tt#"e<.]g#C`*_96+cNPSUCYU9nV4QDB4cG*<s2eS$-^dAtY_%k+&QE<ms1pSG/ic2<P)"[-X/o`r'b?#rpp^9m5LuBMHM-?uR$R/e4be'-3U_A\0\.L!fO)%M+==X'_dt4(nBP+J'e+_'FNfFD=M?%CIk#+Ln\<;>ao:mTB+tX#tXW+oQ5i.2XMgR@sE9eU&omfpbTkJd+:&#%M@Eh`+9[-cJXX7*aOr4;fK-M)Z5`Q*HnVR!h41o0W%2]%7:tkVf'fJdcl@8,',Od+#>\T5l-1kG_tV@6m99Z&&[.g4X%EbSlY+[Y=)"C7kL(U-Fft"54;["#1nBdHETV<pM(rX,>Ebp+FIqVd%dh@<AVV8!a:c-AkXOD-A.&&r3\JDfL%<M$-"_6ne9pd['Cd*a]M4&4KLmuRYOAR,HoR0qe*VPMKbfj[_LE"LA/hM!1)LaOpH*G1s%.%5@[mnWLlHo]Ru9*Pb_$=%XFdi4/O(J9H='GV1%PcSk]#l.*bLLR^PKu_a=ckD;)'CH0u:b:nai!RH?eVjW,.!eBH4JD;,UA)gJ%(G_+V`8M;rW9\I@S&_h8;AbnDb*](pa!`.+`1W*b#*fiI$!pKYZupt)'YUglgrjppYp+4$!]DB&cS`e8.;F>-">-bO,e?LnHPa7`%;<qeMmSVI8T:oR]X]eZJMqOGtUrKSY!mO/-.W-/"ZR-n"e]cc.DMWZE4mR;/0?.>j4,hTt=0G$l.!G5D1[oWgJGk?#7[IfGD1_;%%FiXm/hmHV-#kFQ6gXWVW>(?Ah1LT$r*0JW'MEC)h^F8Mr3qA1eF^(%?383ao?';`eLP2NZTBHi"(cc8dfrAjW<N^"^2E's%;FqBL%@F8N4#D7Q/'\(ZR5ptk`jbcg[qdZ5F`BIudcTX/KfpPc\);ck1rK(-f&m2s^")&<">0ZP''5>O<J40^&(]e>5'k8_S2h.,IV_8+s%,!XOCnlZN<>-Pp_M)n?WP&c;dR]%e^BW2$R[/(2#B,n+/cSI!%j8>,9(OZQFAf3E-D:$[lVaNo><6DN/%RZ)1RILb6Z?b^I&cj#4%NXNB!/hAcn_ZLPi0&j.!M=GHjg.]sWRR*>[kt^CI6*@0I>e-:I]I.4FC77e8]JJ9^6u$oQ9qPRqkRG6bN-k/fJ?a%GDl^]bg$buX%XpPS/L"?"tU<jW(!Hk7a_FU0T<C%p:?;)u\Z'tp0qIK2^;%.HMH-.N8+`XA7$I224W/Mp%&n`\hn=:`.?IsKtRllVN]<,#8$o2!j%&+t*&.t`gF]&LOq%gY9;D.B0]pO1`35)JOuhD08ik0+W4g/lop9$_Z]PdIWs$'Ws2RQ0OPTtCd>dd!8\l(+N\R&'Hg*BEA46_W2+%OB9tGFk9XX.Nii"S?rKeihX,N-;M/@Ib@&Y=fUd;)E;F?F!i>p%LSH-7`E6?4!SbP61jR]ldV=KE4e@7(FS#X/h'WN#OWk6Ve9I"%=9:c97TA*.ai$gGG$.)p??otAd_4q_5^@bY9t7Q8&`M0Oo$TrV!U$]kOEppWXd(]8dTe^E/+)Y7Ju.E\M3[dW1VqL[ZNNqqijV]V%B3j7m(clqaKJ[BdNPooDI81]TCEcHfZnJ/1RJ''+6.83.5mpAiS4mA?>##_hh$',!3^X]S*m1dq#&IJGXgmW+XsRblM\mf]d7&in%lKsUf"7#7V_RhWEU0^pTLeN"_]j^$MW=t]N$Cd,kH1jS%]@_!Vdp4L`R;'nWLmchgS#GR(Gh^db]&VLi=c*;>h4;_YJ5[hLNUWh5%'R#Unh)i13md)g@l#*:Sm+\&;L4,Q$lHU,(<hhHmd>m\Y'fn(um@'G\:.R0aN.gi1962-mb]FL1*Ml(03a111<?eP2NZb3'kOnEt%nCe9jl^%dA<n*o)d^H+,KM1K&Huke]Zj4TDS(lXn*p4LUCNC(&1^%W9&Jep&YPlUu/OP,jR"(4,i`@VXiO,QV&E$IXRX$E4V.poO%(M]g664*h8]Oej<NROdmNurKniBfVbPl45:W/fO4>RH%g6XnZ9'C%KH5XKc4EKq/U38u'>V!')pdpq*`f:]O.4-_'+>p[=O;-0L"%aZ#J9'j[l-Tn4m#@hWW-PmY*!KpdNFe6kn3]VS1g(Ga_=&><'8aTjc?W.tY,r`g<Xja"LVo5F7%L/AJ4ofWDR5"bMb##7@8+X=7-%#Xa]"`t3tJ[4U""#UK)WlPbUPZ\6[PcFX[`hME#!OOt<A,F!N+fS,^2cERa+M;?3)7&fpX.tREMM8#.LhO@lQ9?53Pr*+AXJRj`/%R6^G*^L.t>;1qm:*2<e;hEb<XVUgX)E,)OsMPg*48b1A7I3_V5<CPos^02q^>3g`KWdR<4<4*M>6ri[Z-*p>>>GRCfDQuc)([oNc%*M@."`_E>a(Yo3pCSaa52<-Uu<bo*;?o@'QKiS"LU<%(D30LA7'9^;6(!T:NRaI(iW]bH$BXK$#Ki\(uWShO9WX>o#Z`XA1pYbHH%Xj"4aKJE9b0%ap`oe-6kMH4A2!hHF<;%5bKl5]I>8QY)r#<D;=N4k/YY0Ph4B^jP4Aj;iGH7f&g6*`kpZZYLHP\6a0on\E+kEu1k%41+Wb/F"TQc8L<[cI`:+KQW=S#VaM_!"TarYW#([hs`<Tp[KD9SZtZq!UC_XT9tr,9KXci4K!u>@\(&rNY0i&C8QJGeiCn1`6>YY%ZVY*XS?4ReM]BBP#%jFDmcUrs:(HhC!Es.(;FA_j#PTXk[E-2?896D(O<82^7E41>7'.'4o,ub5#^BC[(*hZ@2?k^`#bVF]ejI5.%'klW87G).^'Y(J'ro1-i[)<O&(2t[B:t#cL@Rs>].M^LF_*#\r5s#lcUJ%SZ4K[WqWL8*(FCH(i@kCLj6Xocimpa:LiC>Un#PS47%@Rsl?E"bS?IuX6r#R'0^`&*C^Jb]o'3&1ELZs!?pELaFlIkd\D=FFA#1ls[gOcjUT_GY+nJPchIjR8P%F9g'ljfP9Q)AXFH+Fo>e%@Y_Ah'8=>4Tm$$?Bp0/_#,3<fQQ.3.o7MOr.7aiUP+n1c/(=/.!ZGtC]X`#fd-tiZ(5+llqYgrA$-AYIWSiUA&at=HrS?q:@$KrK%0gLX?K$b3#r*;cb)"Mmc>,)Q\`Z]j+MfHu01I7DM*?ng+QP-Kf3U6>l*6?)1a]g`O=Y$e;\0*0-F#M)?Fj0]"M/2:U;%S$?SFr_A%fZompSj@1RO<sO0k*BQNMSgs\>+kuORG1#hfZnOG#h%FaO*VA?S[4h+1>=g92b8uT-e/JD8WKh$Cc$0mWg5XjRIGI[EE''W4R*"T%DW`"PI^F+aqDFXq_[XK;3<rQFL>Glmg6omUq'=TQ@A)@8b9o#h>OcM?U:52AB1IJ6-b:K)\8u+d7t>qWm&n0C++dXIWRI9kc:O$#%i9d&Gf.Bo+2f%8A:@-NPDd0lH8RUlf()">Qjt:Bo\8uD6bHQ&fI`jEeW]K\6IWMO#iI."oZe^Z$D_mDUl4*IYO.gF=iS>]TBS^V*%KG<OD&#.Ioih`DLXIRL$fhVuCqhVMncl+UT5KQJ!7ee>Hk=Gu&b`:UAo@t(>+EpS<3ZuR.K1W[CAI<\15"iOoZZ*k?Afko^!7t`c%Y4?D@FEk-?P86oNBtKo-I<=22ha\2TiMk'baiV;]NkLo@S_,J6GF^[$'MG)150=G@9EguP^46E@A@b950M`*M8+n4JFD'rE22L\E%/ZK6CcE[9B%N@od0V+ec4rCBZAF(p;TGs$;%q<+koFD.!3!t1b&Cs!4F?8=ge.q;pgt<HBGE15"8iOPtOe%Ltd92Zt9]P2R&ZGl)%0XrPth79Q#"P+%/MNYO>Q7EbD`-)Y'*]i!BN1rc@B7Z-E])d2F-qf=kIA5O%LY6B2M=V%.GE4LSM27Klgl\,G&Eo)'Q"WnohRTZ^%!,@XsH;ncY:8/>J2]0%0in_/.oq$p1?5:aXohLc&R(96ai!STXiKf,?X_nkuGLcsMFBQ+&$U'e*pX8R!+lH'*Q_f#+C-G;P\91'n%7MDM,YBj2a6,1CI=/!r<fi!@kcJ2'H%SQJ<JdtHH*n;7<>guZeALZn>iNX*iVVo+B`#]"$QEm8rLY80F="3!sdTJ$UT@-pmhE'"f%.;C#\ZVo:6R'T]_9gmHa\H%!>_U:94p+E&.;U>PsoZkE?"o9XdRfPQ!`L?mDMfMZF!#MIGeZ2W$<J-:upD=reRh<4Y"g:'0PN)Nf%*L#J'-QSE1mlqhViZGt`J`WVMhjfk((Opg;7IN@)oWtt0ThiO"5j4;Cb7?kq\bJ6^J#)jd:Of0bDb5GSkk0]q;Y9\#*@^8'iJeOH%Dj1+EgoH(180N1Q8#0rLg#1B#P&s%]mZ,+1/NF#D(/Z_hk/lm"a#[!sB:(^17sE$cT$/gLb<3>1A;@iWi"AiZmXU3X\Tsa'Zresi%oW'HR$P-Bg+;T7,\)3GmAa+RnGUZE\d)k`MC='3Rg_F*%mpcroCQ1Xi5n)\5Y@NnR,;[DiT-Ua)lO%h>qOP5cej-uGU4!aCYOUhf%o@M_#$uE0mqP^`:V[P\0E%M.=!G5LXm0HA=]1McZGGhm51^%[MkZE'TS<3.EGG]rlmQr^H.%20G"5PfC!(n@I\N/&SbX??\ha!Bg%Q2CJ`<Lq%fk+q`&394p'RS1,!^5Z?g)MBAV]B-bJj4?]gHfE@an2n*pn2n*pn2n*0n2n)_r6F[6r#VRgpcYnK/+>X01\a,U=5\:?%fALjj-h'4,1\dNq!e0/g.,sGIf7UEe6[$_'k>iJb0DPF+N?ZH";.h'))_?hik!Aoh`hkYE^N2KAhU*U]&:>(_eVQ1f;"$eVB"q/c%4US!\CD@[Bqo*5hK<f3.B<TMsBoZ@+J#"BYcTDj.Bd<732rEAAoQP0YW-rX_4*,$RdbdF-E^uPjh`%O=rYE\Lk<:f>^W.9&YSl$c%5^g-g/ZAXO^k^-O@@,(<MGWe3%.JIYRiVS)DgdEP!l/jjSNY$mbo<.W%TIX:mBh#lrM1A,ms\:Hr7P*^"4),a1NVXGc,%]AJ+rR'%daIB(Bu*6"YBAj?3UC'+n6DN&BK3887j@E??OXImA.UdB&AmIL:E3ShO!;qtU\!Hk[To%#Z'LGK;1sgG>D-/A.]8Uq\3#N-_&(EQ%_adSQ2dI,938pU1!@@oR4tD3rp66La;A0%Jn%QP"!$U]oZ_'*(iE)"GJ:?#H$YU*YoqR)IdX:d*!YF[q8-38Al5:&?ceLoSm>8NV%?m''.1<]3b_3q?`UP\!l@lcJVk-Hn"=,B,B9dJDIdB;as2#Yl!&e7F`6Wp<\kH!*RLmc^:CW?HWVI<gD3&9cWi5^(L7J^HWhafu5%]jTW^hK&r.LO09Ll)gcu-5iDE4@1:11P<'SFPP=7Rl@[4%7i`pL4fjB?\TUnp@hWLao6+PLk`*CSg<W39U(DbOjCI%\&MTjCOA)G%\&O/<,fA4G*Q`7>#&]Ys:UNL]QQ[[6n2]d@FV[]KYCfdEiQDdUpc)Q[?A=9>j5AnXpqW;Vp`*o;68\ZsoHkl5,r;=l31cqUNV.;&%ltV^*\Id/:j'BIdE<daBY(a4@nh"CMk%^(P0@9$lh'1=C36>EdT#c(T]Y?KKY)7,1CN=g9<*>g4,*VgJ95\@_KT@@&)@/>^5]VIH%HSINGmK)`NODAX4[-WT;$$X<[./?%W`5hV(_MkZQ$6/M.)Eg/DmK$W(O3bTsJ`@Nl7VLR$k6R%0D;mVKHk\&$>202o`J]d27bogJ%N=eRhaIl%"7#m@p6:HjZPugplhN0DiOrL%ZcEiJ'\M%Y1)n-"C.0-h>H?jJ1`5ZFd!)K/a`jo3&j%Hb3aRRYtU[iG`K!Vt-Mh3?]%3^sN8+ZZ-h;m>nPN1hFRSn%9UK,^FgCmPQV8JgE+SM<\[a-Sb5U#X=D51sp_,p5FD,GuAMOD@ET!-pK\MXYkNr](N3?e027O"]fd%%!g/j@i%V^0.U+WaE't&1(<#f@>u+L<ll%Hglil,7'jsqkJWrs"M(^LOs"*I7S/\WBpJU@T)7.R*?SPqD2LW+?>^a;T1K%hNr'Ht%_!ttf>i`DsW='Z;/+BJUf^[2(&1#;;k&L[BER',l)Y\M6;<("HmQ+:GHZaijqa@*UnRXUUfQ]$<c;2V"ESUma.W-ELd1nO2N2%n.%Y7rgb-Nti'I$spJ0qM%hj["k:&LhQnj-[K+E+h@T#AtaG\T$"<`mSjUS^_m:4q8hr5%MOFJW2<U!@#R>Cr+&`k6!E4j$U9=R>&1[%]^TpCPRnn^grZ/[\?Ek&n9DCPccM2[LYRh/f;9=I*@H-ukdY]l7$m(;e..NU;3lgS\IRQa\7fN[j'D<X43kH\FM*Lg'ftbeTElS4%rCqs*qpm'RNf0_\'K@HV`/SgR7+aJrE<M8:@h1<S$a<?G\_TU4^3>=)nLfo(coBE#B?!"lI!0,7Mif;A/fpM'p`B&XR,/#pil--#%Y2[EEh&-[:qjiic7o6j3n[(:bceYrd;6&Qn'<ql7ib?kr4CH1X`a/MaN"=:!CphW$U-<&+O-b2/,;k9OF(;+U7;hB)WX*VbTA-CX%'h<",J`>'cEff;.8Sp3*H5T//.rVJ`i_f2)fO^ng&h0ur?6[?e5fq[@)bN6gV.",9jV&uDS:ciYcf?=rLb"aJ1ZDQa/fF2\O-#=1%2^.8#R<;'!G]r3gW4;C[#o1e?=\5Q:0uf]a1:P5H9"\i$,Z3PiQ67V_S3_qLQ-)D"G\Ob!G\+qU8W-Yi_nsB@0.5`<^2oKWEGq]W%N6fU/_;a1"M6+3G=iu^JN`inippCJE[l-pI\@*2t9Ulb\cA=JsGp#kp$$[76hF**NRh."q<dZNRL_K6;[Z_Bf3gX@9U(n[^(IRGS%p_XF.1ZtRDF/[BA$]k5n?5ub0^j'&d;aZPQ"63f%<RTh?#oK#^"H<4I.YPghYakRL.q3n%"Q,9f:*6G0,qq"IJ0-VFE'/LS0-D>(%i<;WfF&<-(KGTn#*'Bq=-rn8&.I_k@p_XA*@`IS/[Baf,4FZgfFJDEJ;+N`<VPWRbM'K*)JfEX!#\:kpEO^c`LLLi$M/-od3:U69%)Vlb1MfV"5kg7u/:iSrO<"20Nm#^>u\-.EC\Hppj/=r9lKW',J9JsLT6#<n[PUKK3TX]u(6&@*gTkWjB:Q_<[O-dtF.scc6p_(8*%9RM\'+=E`ga,1#=1H&o#9RI_k%p"&lF]("Mk=/"#b5i_94su$YRjK.V^V`U39[[@h8a-9j?c!aIMW`4:8YG&\R2#a[0;/kd`AOFP%XLL>Q7)^sg-k[6GgmE`R6\P:<'NZO_3H9t10LgGHK,B][:!2.m$P)3a_Br6'%-clpOV?'o8e'qQN<;G&:M5d>ma>RP4+ekVl^^lf%1(^OgblK#ibhW::+Q_SFUrA)pf82dcFs4Z\3W!+_TZ&cIlF=?ZV&M&4_"7YcCO28Qp^k51N0;?'P*bK"Fi*-*`:I&t#Tk^%n\nQW%0^`rH"NL%,7L31F3;g?]5=_s\(hXOEEUcog72R>9\V`mb4D-_"KZ5fh%$DK8in?t`HX+0[j.gE$!g=FJ#Y&\[_S)cl\t.WdB%S+F%+/00s6!-L\'f<be$DEjZ\CN22O"2hLn2SL4Z/](;&NN#W*^l!/ogRB?7lQ5BD[VV'(alRri`Hb$Dh4:M-E]4A8Vp8'k_uC!NJ,<1%9Fs&;KX:h!5S/O'nYT:>RhPuqDcgQa$m!nf2_a8dn.Yn_-?tE07WU2Q7M_>^Ur'E?;(+Km]V+JqFS)RJY#q]I0XQJqPq&jU^k!@_%+C)R90rL!OJKc`'*.]:ihA3%0b]qlaf/jcHaa%gJMCkK@7L2\"I&uhsRRAss%60r[@ne)dLI`u(Oj1G>V"eamWl*d%3hjMJ<r-sb%#`nQLC_5[</hB!/Ja+dG+H7jUM3s$lY=Xggk+s4d4sQtMF]dFcjGAsO&_M^[pLS`)a?B<E5ifB9:P`8Lf0m]H0EEri9C+MjEfVjr%7dbiZjN&($!/d:Tf3l[d0EtA7\a!rRUf!]-#,G,l[?/d$ZigDM`4]#Yk4.o:dEo`<)_EYeGD&L1%,2?a,m\i_j@]b:+nAmWpCc!&%g`J!9+Xnh/ICL3u+S&d(XeocEI5m%AWqp`I(kqHq@-!cR"@g+YAeQE`fPG$X*h5r^4<pCC)=h@)PTY6(cLh5acUD3i#`E0-[W1B=%0_>)!8?Em-+9cS@O<F@\#h^h.>1dlEnd+?pq3Y99rI+UQE$(-,Orjl)CH`9h)]Bt`,R>3@j'c$m-)7:Wm"DNR;`;VhhB59O7"Vo2%'.M+*)s2MbWF=\mGooDj[Kc?\(2j><NJiRJD$%B^h`$0oaR3Fo=D-M<K/gF1N'Wt]fa;5.)S<J#k(G:T?482lG:8YRhTH*>oL%aN%P,N;_Q>Q^3_-Yq9TUs1;ga&V[cF$;<kH^fPmejF$Q$k:m\0SfW"?dB7+tpgg2k$C,i]Bepf$Lkn,0YJ-G!Y9)L[9]<Q`VIU.Ik&P%'/fNtC^$:]HU6"9=a#7eCZ653`1&EL4V6LQp3.XniL-PGS1hM2_*_A6\V#t&RgG9=hu.+4_m0*^8jB.6PtXDRCfIl81p&Z[VA!OT%6$*R-caX"3dOaZGEu[?PS9+864'6=%b-Ji'I21X7:?]7W(+o16GE<JamX)s14nfuV`1D<N-*l^i2[+`pinIcQ55,pR_<8P]S)AAF%f1knJDn@Utgc+C3II;HkM*CBS[7R!7FiNR[FA`#nc<M;:R0V3Kr<Y3>Y!/1i9NRiZ0;`ND9$j=p^/*+N42+M;@n%)(e4r:X,gSX%%LZE^k.q`bno%0DE7pjX@?!=Pc/hOUgF<Gt$9'ep->h;0nMOk?Q`V_X"k<m+(&+3.(((:&qn<qs2_8Ri2#7E2_E6m&8T9"S+n1fkM%`j[#7bs6QmU!Ft/Tu"8g#-YnK.7r;4*1O7,WdrDg$7O.o1+?Osi-AHJ<*Qg_F/rG?k9]QqM`G`.$X\djn1l498=c+"r?j:;F@ltk%q&u1Q>LP+-q/9Zrk\LZpo0\2ZW(,;j%Zb39&OC6WH!/3a0]rNL"!)9sC_1+k;+EjWg%k`@2$uAIqH8uAI[82O5"7<BVJpl%)l8U)%i!mKQ:,g(i.G4KOh"`?g$;;TsUn-_[Tm;Kh!YKlNHZ/ni50`2-`o5:'U+gjKpP-G\Q%HacE,/'BKK/5fiqq)a4pRSP+S`TWgDQaK%UJ.]g4u_WO0^q*0//G8h5r4)JT"-^)<8ASmRM,O@JR_W_3r^?!]Zc'HU?@0[6sXXYYloP^5bAkI"U:-0jfH&eMt*JO5gMqLZ=rr'%?HjKk9Y.W;8uQ=!V-,S>.-3B^**(0'UdLoG;c@N,'aU67m!.O[aKh5R?Pn#F6?+*cSduD`$h(q*97b$O#6F1qo1"8dgkX_O3ZNtD%f:<]6]QH74)A:%#@aBg_=+m,'k,ZJdck*Et^-g@,Ys'Goq*F@mZ+V6W"O;X++Bom:[aX7NR$kLc,N3^=Y9-0(([g3Pn@WSjYIf*p%;l#Z;Gjts0Qfe5R4<"I?M`i.+FO5WcLMV#LoXk2*JmOlo:,(n.ad43(5"$b&h3n`KQ'HIeK#=>)&N`oZ.L8Eq<?$&LTp1sr(oM+J%oDSfi8#\g&nX9lClHlB'>0LE`280NOAcdp$5bsH!HstOLCfR52/s-X+0Ps"-WbjG?UmDrMMppE/gU\=$0L8@7ndP4/ANmXY%f8U$%B)Dfo^Qe#E$U.=bRndWalljb*c,H*A/Pg.LllkAFD1l1epQINaFe*o?Y\-bXF3dUs7KPQW);`bZ&F*b!+\LM/f0q3kjOAs<VhTOs%Hj,e2\d`>G"iL3].7s21oFMQ%VCZi_m(H'>_i+=gI!LpWH?&]uhT_/OQ%O9ZMWQn6XH*r7/I:O:3(Y-kP]WPB%*"5C5h8T]r$K\V%RFtKRXNtl8cXMOmU*qs`lQuEAKjRcc'0b+B+^ofWeeDto:NX9\bsdTMCWT76@d*Y:ZSpiRbhBH+m(-'@<%s5FNK*l4OJjKa5@8eB%-hoPF0D%EOT!_-!gmYP8hdgV!n\(C8X!td*"bM.nF;+-YQJIqdeWfFH3774jbJRQRFXaW_7?P&Ifup\;;@^%S]?fV#/G+:Z76Z;s%hdN57iB-hk%Tn*.^,$C&T>ph9;=-`hHcI=08LqYq9)]^_)Usl4B6.p#89F$,q;dV9b"oXpD-j`iN?dj;3r3[?%7RnpA9g4l-\\mj%(4I:Se9$^!pS&+O"M(!<-c3PB-3:K)lJ`PAE$(h6,1@/j=E`K4(%0=-(?mlM*B0l-pL3^TZCNa+j+1rsXT3I-A4X2G*$p^W2k6Z(%KhR9(o)cncptK.Z&FMnP`Y7c8G%R%Z8'0/d5^85h%6$n+B.!?VkY\i?)_(O@bNG\VMf/\VaO0!o`u4))?83JXB9?^Y&WcJ-AXDeK%;3-Z+aUYM;GV?V>?@^]KT`sUVo'T\cIrTkf@WKYN2o_"k6%fT20TV6)(;P&,D!N5s]?K1OZ/#TB3TStVmVS8+e63Cs7)458<P(0d%:Xs9A`(TX\*W7aOo6=Q$__/oF8q<\$`MU"`ELR$g-qbsK(lkmiOooeZ9-CdMm_sCr!UDoph'L=c9(k^dG97Fun//VhLGr*);Z687%m9Zg*HID4>i0.iCf#NJ4hM8&>a9J3`BsWW1kJ<%j0cgPf8^cEa^6LG_RUsqg_dU.-Utn\?5=O5<E-W4tHZAE,*/t[L2iG.>2Lln!%2RlN!h2AC<:D%I#R*%P%%e!l)O!3tX`4O8-fU6.;Q?3ehd264`[N)_c]kZ5L^m;'fI1/ZZQW@'MH5I)2_Lj*%6`)?Ma&pmM@k9![%jk!/BoNnZMbHlMe^ipa)SA9>=57"tR3O$#;JKCWD)bP2%OrQ-;pO:HJ4NrR5hS!bSC3'I7gEbSk_OIpE_B21X4/u$-]d_8[@<Vm#%J9>d*g?0+pD2UL!?5nLP(R/(,]58Q4cs;=05^2jRUtgCI(/jR\cN_X3ldAm:E+0ig3qaJ"6)XV)P-FAc>9WE_@E<0O^9HRHgcM3J%0^dbZDHPZF?9l&F8$1r`%\GMBEl9pFEVC1r8)1X@\HD8cF]*%fViMPG^*J:Eg2<mW7C@KVBL(rXIVZ%F=Mer,iFjTfLYDJ9_/@9J%4,Qj;?upqM]9mSIe[s;e)!]>1A,^EW\s_hl0^[&P[6a1iEePfT3&Y?g,c%[rX,C[Fb/GO"]m,hR61%$/?6*(`lr8NEC8PGBm`d\Q%J?-!_b;W5;pDXn#cIk6Um3S8npIZ<:H&Tq);m(`+LQ)$(7Q'),K>YnG]Ls:%:>g*<I%?qPpd$!fJA5KmYU!5Hjb*$$6_)up2A0S5%XPj%'?,n_*)22kOfk[29>_oW]aj#MFgc5@`:@o,>8bOp-=]+P/%)+.`0gVKHe+AcLf.]t/pm1f7pao@lbQ8Xi2ZFk]`ljO#!UM-/%r]t%&._<;!YSU2#_Uk.9)WC!.qT+]lHGR%a$4SZ&3N:YRgYR_P3`.`-lcs:%?2#o!6J%]gGED,_1aI*Iq2[qIG9b7i?LJJ[AtT?,%M]9LH,[hJ)meN+OY]hB4BCbYsN9a$Lh46lDo(0T-#jK[#^eX.?PpaE^TIXH)-U:`7H;B'oYR8^,^*=/qnt..dM.]%CeeI41B2VW>%5:7XFLj`3M7Bn@-N`59O!-3mD98a).^FCdhI8b(B&A'lH%^BrZ2ApZrEam\/ost_.YUpK?;1i+Ya4NaaA^HpZTb-pj4U8p0#N'Sf%%"#KqfTjpM#^apY"%:eZ!c\mN-HYEf],lSQp:,Y-Hk'C`'Z2!"j+):op'h86pTX?1+Mke=pa"K\!"rb%IOCqj,P/O2V2i^@m1d11%f+u@I<(U!S$[N>J-#"_4ZKt298sDJMeHk;5p`@M^CM.Ntft$:TPO-CMYRo*O*%+6Q;^07/RU'U?B_HC>ZYLPki9YbVcEh-tJ[50R%jt(l,`FsY(o/+0@BS,Sr\M9J#_;o&$XSWXNI[g95`5E$qO1H"@lq.*$36e$S+1Uh,mP]u:pMo30[!UeR;H_f8CLPq>qLrYHAh206%TD3QXo:Sllg6ZLXBA/]Bm@r;lT.$es1T-FPB03CG7CPj!P3kpc8?s8(_'diPTBjB%[YmQIXQY\(.l4csmt0<)aarAn6&gKNXi.%!%NX70a\l*Bl;KQeHj'_b]o*T;8P%+aO!Btj"FQ'FGM6=+7EhWq-<_db!jMA0ngGe&4],5g)6s%ZBc\O3cH:E"]^Rc$C6P66NFh=C&%Q(s[j];IQ"7W`YA8r14.m)Xr7i6r@6.tb)/m[dXR$.5XekK2(pOfD*1^1TV>j[65a$0=S<-ql);4]+2<CZMgC\:)hI(>unQSXG<2%-C/#+q^1gdo:kQQ<aKkcT=Fc]WZ8N1_BG(MpRl@E"M4ne<J'%h2+XfqW;778U-&>!XQX3`6+]X8aJ@Xe\7X1Wd2@&amSOBRM<i7C%B%,rH3pl@7U.Mse/f'=f:YOu^[(Ff^`8-sn-LRJtAe9/^Q1lEVh/eA[Gu%`k)ErG3B_^q:@[:nl?AQ6M4ZJ":8+[*okFsGhGL)kI%S\2S4rtb&5f$\:,-.=ei?h=D`GV=(ZLqFD3(%H/Tlr*uGqn=4?h?c)%oj78OMgDRJ,68tVQ+:QKH*9u;e+V<`F>3/@lgeH?IBsN+%mo=;9\G*#j1BbEnA*%G%VXI7+]:)qIn'.n(dl1=t.u8E)LD0.89YAPXCPm5[RL\?5q_\uSBA/o'0aW$t%eSOF47I]@T&KJ(-ff`+%1fr_3gFO>jAW-C<q011`$i]Q5WX=4l5XkNT5r?I9X()>Zi2^JuhkVME5"I,#!"t2D46W&l![a%$LgqQ3QZV4Y$l5N+/037M<(&%7%&,P+m/^j*1iV2ZD74Rg$lG;H^Ip^Utl;0\LY#SFcD(PIEm/+YH&UqchMqE7"^`iWh.MFg?KQn\]A-d2=(^,6ZN8thT<d@Y2i/*PP%J60[P&GXC!j^>C%*[(Bo/pYWuPTg93(FS'0nKR[4m$ZLMZ=dY([3d'hh3YXi^4T5qq<j'-n9="%Btj6mH#W*YS1fo:=&!iEIJ8+5%6Jm2_:@,UU(_Q_,Z),hAWa2OA^=RJG^AIaK!-h#m-3.DJf<9^HF$Ldi;BBq?rd>RcE[I'.cp;9qk]Hurm0oO6p_phh=SM?f'!N][%j2Dm\:Nf&1SdV<Fi2`1?"i5i''*;OKh6eC#lC0:8K!.J*,6[I_*[pfO3Fsu8mTkBpkN6/=i9TM?@k&8?ThZ>&$l$?-(CPo"Roc[_%9,454/[bG<N<MOD3Yk[jfiV38:WF[!>R=P46,N-ZIYrk5b./!#hFU#\n7B@jKJ/3XQn1@J09GZl&[i@,pS9HoiI,iT0`9'03ba/2%h/W2n:QO4(Qo)GoH-u*h\kZ4o]WQd0[JUCH0.t2JG_q*mUBK;A@/cJmnY"RS_`Ju:*aUcQ+T@sDWpgeG`&jJ7/D`esj-eI4=M4._%8]<d9"=h.FD_mJQ8W/CKfL\UrTk#>:,5MG]3tN\h*^IK-GYrrYiglG\&hiC^;WF4%?T%p-(=/-m#TONk^MFQK,b?EkJ9\na!90Qk%RRB87l,nDZaE-+E"2`@bBK,@G;fD@M+:[d$Ll7"[8Ie/*qo/aaiI)M_ZLHSJ!$o5?5p-K[]aKY42c4#%i&ru'*5"0h+9p`ANfes$%[QGZ;h\&PY+Ll7M$?:gK&9uKd9EMpgl4#S^&bcJ4moq*"JStnt%Q:r8bnC0IM&=1H[fmL:Nf]&`Z`"!`I:V9Dk5l7jV@H</]LTnu%Jk*&&.!SPP+:<SNWIYaGh&J`MbLR+Y;+Rq+m`S&8A.Q\qHhmt%n-ll>!q5q-`5"=[l<rO55D1G0O4tHSY72YB*^j9V.JU>ZmJu4r%k6Zid*02TSS7iQBn)6W#iKpYm8AffR$.888"NXLL[;Hf8H3-=9JcC>Je$Z4,@k#_G,<2"El@!*cMef"k:?B(dI:&:<>Q;,ZZ]t2_%\R-?^M6/Nem%qqd"OK*eQS)ra6+GL]:i2>&@!n,68!&%[dNYD_,]`3',&5dUgWHL7Ik'#J60>^MVnP^UND>\"`7&q`E=q#?akA/2%+\*^&bUC[[g-1,Va%8U:<FC$8dNUHi/0^bT9N`[gh$&)Wq]D(";SFWs3"&GU`d/4sf0XaIPt>%m.iH4kMkj!Y_;/NH8Iu6J('gFd%b2h7kJ)seE9AJ)"]1H"@ZUCOV-*k?\H(N<Xg&?<`'hu64J>4StgFLX<hSr,R*C8fFW"EVgJ6h96j%QY:A00Uq0qH?V!Z`*gppBKW%7;'LaoJJaZL;<Jma/,/GQ0an3Z66=,QLs7nhb&L]+a2eoIJ9e<c)kLt\f,5/Boah9lH11m>hp'K$!0?LRU+cd"B`?_;Y3E^fn8>\%N`'.T1pJCB#cK\Sr">[*%D-:^m87um1n@O>S+j1`7W/Z3iQ_XqNinR!1cirX2Ii):+c%A279cGNmGsMVm-&E@O<%VL=*euFShd+R%$'ZT=G#EqajrBMR%F61IB1"K_EYLG!1r0mjD8FF(F]a'Pe$PjM2!P"".8@D19k?n7:.-g2]"d+EPHKs5H.(I82n,R@E%l_9%Zr9T%3NU,'l)Q52Bb?sXUihqR]fG>rFQqW^.;-4q.4.br"I\WbDk1deP.eP*k:13B,,sE[ZT_A`\;\hbaXn][F0nf2P"a<mb?;'Qr<mYD%T*=T'Qmd@R^((mR?a>Q@H8F9:.F_ErPSUTr7k%;uf]CM`9o1&?;6!/jRf:DY.T^*g,uS(q<J)r.TBXj,;7k@n(k`4TmoRJtj&b7p%V,]`OY&rm+pgt\lWkO@B#&B-Q>(!^H<mHkO,tU$Vl"]Rch!-9/[>m<N/h'j7[lrWC0#)pgG#c1=hQMh)*Oodt(@AS7mNtcKV4b.c%>4d.%.kHj,-&FQAmOUoicGCd:dCOA;(@5<_Un2_bGopU'hb^PE5]4oVjBG,t@F)C-"PcVZ*`+=eiYe,!?-d`,8cZSjARdcu=r6Pk%\^l1E(T0;Na'[DFL:TBV?.?M\=Y^niK'.N9So.i`1?f9gYLe[^9"FAoXQMChPhD4@SXZC!8jb*ah7?Kr/)Rr%?"I8b=<#p%4ZE+/%B3=Q)qfN4iP-'WG=0hMakMdc%&!aMpdSR5l:WLbKEF#=\-!XebFW5IE*L$<M[J7jklb79<o<%lkX"pi1ZVf"jhu>s".6bnI:U=l-%5f\UX+%j)H>`LW%\kf:JkBceb4_DpoQo53+h@7ZG=lAip/RF-@Dsn%picqXR01Xh31DY9q&sY9DN3YNB`:WB=7MTrc(6G-*E.*i=%F;?j*j)BFCnojpUQ-6LQhJnt66lPd-JDi$5Uce!-VlEGWc1c[KbN%:33No%P\o`8j8^$@$d`,?;3SrV/?<\.ph6UJ';+L@TcQ]Q?%4"'"+am[Y]pi\H\Dm5=i4am]de+Usc>N'$a":NMhX<PmDlsnRsBCHWF#Mtd^%;>R+L2)q?c\j$jdbY`JS`X"CUW'"n2:;gE[fY"c%dK6pG7?q-63oo[,Y',0HQXoJ\fisTAII=S`<:,R-Au^#M>fL%9$i&$&iL\08;me"CCs(;B'(JMfVesJ=XkdKiQ*#ICjS(P-))AWJ%"h5$Ya:k7m`qH2J]LpiEajE4^])oI,Z5j9C+g1bFPcn@t4k$h9^&q'\Ng+;&f"TT+Ao_a-i7Zft&u-pTiPOHpk/=<fZ-`5M:r7C0%M^r-ro<QVomCon/'"2Gr'#2a@E[TRL*^uBAb4]X23UQ0)gcSkhee;YU_AlG<aQo_\6n7CJ2W2kMT%dB%GEQU=G3qK^WS2D_Z(d'/%(<PNliKU9(F"'q2g:>tPd^8lmrA.0[2YBS/G&92oo<]_T*_G'KZ[aE;=#L-+d@N@#n.b961oDnl*^Hn[m@JZ"=k^2GFQ@.;O?M("%B>+fDCHODDB55a#!`+>93@6jc]+RtcWclC*.oEqG4[<o&6hckE]m)ZO3B##u2tOC,YTIT5Q+Os*Zkqh2-So8%(+;J\DmH,Pm@Fkb%=k\e?P=.<n,*,=L[C6Y[[<onUk',5M_uq`@SWp"b'LD#8Jjp&G-C2dom7OV'%.+3O):PoBiLZlY0:K8;l.MEiHcYR5fV[*'0Br7r%T&'#!G_5W873<2MH[(;YZnFKm0L<;UPUJi0a.ZabB.$qIfrMd4lCJ3:[/,l+8IWOIW$cTXe.]\kJZMZ.BGPgPnJl$qVe/Mh,]#X>%eurQ74ctocp#PHrr>MNZ-+fa0Rr^uE.]"c>onDB]FF?`c44n\k74@#rl#qc`46.c0h,Eg#??bguppt%u-+lE-U035eNO:Z\IH!W#%3,cm$p&\;C(C4F)EqfuB-R:*>I7``T<'C$]eO7rS9Y[CRM%c%P\&?%9W=pkRN;C`u$pYikJE,lM+g@0p)`EolR(f--F@+ZtdPoJl%:F]X,U6Fh6,YTuL+`7!,gQDm"I$\]$f86DD$c>b&I:I%96CkZBSPLW]k^9tI&UVgrNSZ$\Y&=^3*[gS.C3qupSuLAKXp<-acCEe5%>jMdKK3hX@>@0C/-N">]$r>>.`Nc=Gk=1c]\/lWO\++P/<ZfVFVa0sole$:-Z`Yf+Z6rog)AOab\eCI&F?T+r.-8#Q-[Wl+TU''^%/tPNM):nnJa!I4\-X.,<cmm^0;_39qoq5R^b-^SNQT`lF`7%STF[5&-$9VD$q#m:UR2OSNp3lWKlZ(nRkn?HTo9<`jfpb.D\o3,b%.Fr#&9@36,SZjlNT8<,B<6"O?7cKNobci.r7D3>9<siV:YTCJp;M'&QL%bH0dJHi'=-$O"&u0n<=RbS1e(+PB,!EflUOWU.l(2@J%I!ScC4n@j/FH_*`D&PM_`i+4s:2oJqciuIPccIV0h9[8fl2l']W(4)K,h+ti-NWn=FHPY54c:]`oH^5,I(CWt'UtZqY>"6!kouhc%amYX:]'')-St</Z!:b.W"=9\3"T6&r=]0p9:etPH$)f(_.,f8G=q;+@06otMb9T`O9j_L(.nXGd6<Jf5Be@Xf$=@C9bW>6)QIM\j%dKeFC?SqmWA=X"&V^s*J@/?%\Pcda'Hk#;m/6PV3V5Ka8NC`o/_\>j?b-D2-FC[6TO1rt=jO$-<.;AF.T)t%eUcub49e(H@YZeBo%63W@?Yb`47oHcFGI%&"$]28,G>:O(R<#UY@&5``DI6^H8K*IW7T*Nq_;B_EGKBsnp._M4gAI('T9<qR-1oW7F\gT0JKa<")Z3gp1%,o\??oMh(X'rs/^c\_mp</'ZO5kg5>`6T7jMtm+2`K^^TRXC4\o-LFfl17jXUQRk99X!C#nWclV/8hFo&NZ7^ctU=f0?IUYSgOQO%"OB4o/@kB%BImTTShX9qH*Vu.J90V/KY2SFU`IRH/"s%`o->kh[(.QP'l8m@G)Bu.)29B[4LJHrVpUcg<fhUlr9O]W.m5I%F#[oI%`8"Z0+Qc<,fSPtC!Or4e?dcb'F7of=OSP%`QB8XET7Y:P2AVg(hGg'h2"sK_A"M4dLbW6l]ot1s_R0Q80DXMI3AWCc1ZmC$6'-A8%J/k)cPOaCNbI0s=Nb+4e@IB,F&9CVo0?0MB<ZNnrH?g+b79HDmF%8_hQm2d;q!q!rF@Zhq=6iSr>Zp:pQqp>pIRV-/'@k,LGQ!PC%P;)`C8;)9=SVZbWGL@WY^!GctJBVXVdig0uq9MX^4l8CGo@W[pOsBt4.)''$4WPY8rojO(Q;emprTIe-QcJ5[d#B]>`&A=uo%6>K%'/5J'/B[AfSFa$Z!!2[N@rk>eQ4RLQ4E$cgm-6F3H4rC!BT-5kDe0'g4O1L&%`pPA?[-TidH=6@I-`_@#=6KpC2Y=`k-9,:%$5b)%1OJgOqeTbTH]Q.8AN'ZEk&F.KF@`9+G;8!Zqjd0f?64=:N"3cdc7S-=7*l"?:UiOTHraXuj6fl+9YTgi+W<$%>pfj:*4[)Qkjj_*%P2PoU3Hc%\S)-HijYKS=Sm-I8S<KUZ2Wi`qPL%6rA'#3r<sk\`gFZUCBs]7rI+,tH>JB@dM(dcY;Mm+<RqbL.4K.3]?QS?CL28mK%J"bs)%)9UKTUR3.*iqo8S/FC..hC:d7T;BHKfE$qX8/SW\[jd&j_IWaWM(>%"I+8%FTLT$ULaJf9C?phjVf1u.M%GJm?LbQr#!01%0_"U\gN#;!jYp"]g/akoVY^ruNm`A;L<(Mg0ka+SoiO0o$WqhI"e/=i@6&qD+I24ib,8a"##IVdQ:gHts37&ja5:a:N]R/FY0,2r%MZb@f8Zm2d.A%ma,S:Q9P-f6B"KpRli(=*M5[;`g,K=I5V->OUb,YfTnl^(0<Go4eI5q]%>!ThQNiGW[S^Hq,E2Crn.1,iRi:\L(%^=-!CV!'2BPt$k#>XD@A(jNP*h.S)PBb?VG;81T'0U@u!J"MeC7TQZI,0N*o%-L>3E_4$/oGa>r,Dd>rBu`Y_V%^=R*C_fd+ua_A%TUl<ap5u#<"`@tM+AX\T;P0RSf10C!OkW<j>XUMSQ'T!49K5Z3FKD$nfu/C$&hZK>7Bg-7+C`G=N*(t+.2E0&MSOe870Om>h,-3G%PdS"*RXbNJb5#:oiD+(]IMOLT3$VTlJU9;b8V*Lk3.;$_09W,(]0o_lAH_QTjj*E3"+D#noo9?1T*/46N>_l9q-Y?/H?^'-4Z[T@%B2O59SF\'RQ]tE/i3`XgY.sKbcVhE)h1^?^U3*F>-po)?!:Z35>"?t2/jSI5Ul]!"cOt.5+DPXR`0.Uq-:TEY=]DOm]<hjDmq=&4%&,fbE3Z>*U]h4?7(@B_JGcMS0*Xh.+C607ZN>;W3<_9odP]QRH1jkG8X8Yn*p`aFXPtPdeVZ*Z7p-j(u[9jY+9JAceY)5!%M!%KE%PpkF&"W:"..'kP#)m+2s3Cd?07s-DU#ACun(J0`h?#m&GDfi#GjU'AE)p,K_5F9Y_ftiRocNDrZS6n_^Q&$R&=Yrj\M?&X.75nBi%mB;[r,tU$Vkse2's&E%%7HIPXi:nc'3.;Y!BXOo#rDejR>$TGELa^=J*KQf8]L[lF1NZ`nVa.GPb_2VN[eTFZ,fo#75M]XpAq-':%i\AOF?5//gOuup.6BKI>UQUIsC\(o-jH1BNcuJS=-0VmQh[-%<aEK+q4SmnLEa0BBmlTlme]gA7"+qH$Y:L&+O4m6:RnLotf=`ah%$g"Otkg[,1LKf&F?1I;GjKN;^&9?ii"H[\(OL-_4k^/7",M-Zh;=^ZaC%C?4G;GrQZDL5Q/);IHO,BtR<:7rnK$'jd@0_/l'l>P&%Hkfd]XEMVS3rs7Mn\,<<7,KI`hTI+CdNXf[V'K8q`:0UPn`?gM98hrJ+PTiEdu-4XW'_Dk_ea1k,;2Nk"bOtE,.#pb@N7X&e5edZ%1)>`6MLA6i*gb+4q5S\S7Poo\O,=tpEded$9,Kb#J>hjqaC?b6)SULVFpi%g-1Gc;PjFr%cC(00<_8!5=i!$G/L%Nen,5Wu6bs[M%ckf9<NfoKn1U.4%mr@mYM8rn0())l`7q\)`8*S?X/@L?q6iu;IZka6i7W?#fX=f%LELeuc/>?2h?@@#L(K$+fA[tn$Os5D#:4@6B%f]<]PYQem:dXuK]qED`8+B%Gt%O*6*@:WiqK4QXl/f'T&XE8rL0:P3fdh\G)':]<%lP$M$.3`%h7g,Xb2Z=oKK0!oH5%2RQSu'AG%ZhQC`gd^3obm_oGW$<XJ*k^g8kG,7?Z05W<)%Ri.;r](L4Z#nZH;N>k>rn_1k5[Wg1n;JB$)7IDiDHIe''MVa;<dX*[5IoRTQH[!%cTTU*k];I;#sJkm\oeti"Ta8FFb8(,n9#GZ8,1lG]SJ`^b2H!#a!:LMT*Nb.K[7Q!24h5lrBp?B3;m=u7M,JR4ItE#O*NdD)AIMc%l"7l*#OUA5?RPX:%7JMWCael0;kHRZOD9hS0b#(?.ush,o0ABL/l(n!)sH>+2%n=!_)H#"K+l0a&iU?H3YFAQ"Jf^PAUeV6/#f!1%9D2?TrVdK].F('BZNTH'br/?RCMsCQ2Sk$s$(2$LP%;c='9WT7n:AH[@87p(jhWBVGVqcPV:'!M/m4Su*3Z/*'1j[;/<@MX!RYq!%o+5)cYYT6"d@8nLa@%qok/KgH3FK?O;=-!fJnE*&Gk1&l-5V?0A,C?_]Kt]&OCCpQP=KLj'c;mUKp"qLe6")UCq%NKHb?@<nu/FU%MafGHdZm>2&EG&cC;Is>cHDRkPNJJ2K#\PVQj&OtTY9jbV"A9[a+o=mF[C3I6>^?`/LfF+ptm%\c&/H'R7B(47_h6XBQ4e[l6Ca?%.>=5[nKD(tEao3a%45kq1G(`qEaf%,a%*D>$qc':1X,3Q[P.]"22,3"$`tFS%pZLOl-eEb.TXuc'9Db)%C4V&<8.mE9KnN``[o?K%F=nLsVqogf,>?5n`/u+MJ22u$$Z<<QnaXO#Ehpa2J>WQ\Z(tA)B]2Yk4I/Q"L`PB[#7@#ec.VDW3oZicPSs_3"dt1"YjkHF1VK$t%^ZUGX/;U\g(]7a:.:6NDRh)C[VJJG<U725R6I>M):P^XGk49G^;)\H/aB`cF"(E&jVb(1h-Ns`dj&\\L6njC@nP,c%\gQ6a6t;%c%@JiLMAFjp'5oSaf#B57/V@>E&R>J4sJ4!.\o)T;kP)Z(RI?I=^*&7!.#;>^@Lm*W-h_\<+6aHMH#`")O#oW8-6PK5>Ru^8,O,upF%+MR*@Ubh$+#/u@9*.#sJfsHS;I?DbZ)[!<Pp+E#sS%dLZP2qR[aRG1a#VIEK:.'$[gQ%FGB[FP[Us0,R>YII"6il89p.W=idcR/X%<g"e'6PeI@-=/]2.g_fII6imF-go=k&j.m!Yk]E@1<p-_@]Bc'2'4(u;_UN,<0bQ9bX\ZAGS15KJ\@kpLBR.CTYN/-QN28>idejp%Hdo7Xhl/@lHJm[%!%dt.<G!C%5f&97m-4H_j/W$+$kgk.n#)g[ne3h?O6F'9:&t4c0Og^48KiX-^HJT!jEG?9QR+i3YX+u?Bl9J7%mQ39QZQ]%5'NRckHO3)($k'AV9)#6NjMU"Kh!A/$G>`En`^IF9i=[3<gbr6N'o>U@639Qi;e'c/a`#M<#kE>:#uE?EKcA6erD)!5%:?8l>2%'=XXm<hZ1LiNRJ#B0QMSOlH-:r]bVK])K$bursh-9)"le[tEOG87_^?N*p,S4c@p,d6r:8-R26'C$4#?__%^o"5%^(k`!%id2dZ\8u^K(0K.8N?Q)SPPAJR=T[KPY#<(0&FiHI[<O;8&m_[]$&O+pX*f^=&A28`>F;).U'UC*ke?17VkKW:,l51e]=khJ:'OU*%JU#:/FO,,'=JC-dBEQ&*6t!?\p\P"rirL^DFek&C__M1S8U8odkU8cO/Kd=J+^k,)$h(J$N`):@0Rd;?J`(jn6#u:#Wg09&f2,hu%5P]6D+\MYo/I@tlNqGPR*UrOV-=,TfC%lW,l<9b3mhqn-U>Ji*(t!7f@R@gC^F=IRM><'#I]%-/^JiKNboK[H*p:6NRq2=>8RI;/%O[Mf&\.6eXkW<@H)Uu5E#[uVikfhL!8S"dkr#=O[3?sB>WIXH5#$&H_C+)D9]eNsa,]JFPG9W_'jBIuTZ1"Jp(f#oQ2T"@q<(ZpJ%X3VL]Sr$k(d)n`>!-hOrE8]VVr@I2OgL,^$GLl@ArgP%c=L]@@hl+J880!L##&YUDVNQeAW<4FWO`FJSckN>#]Ob8W8g6[1aHJC>%J$l_JZ5&js8Y)[Q,pMXd#j$o_`.AM^C$`4%*bgk@oh:3oVlYYG(-H.k<jLXT]8"N?-Y3lWLLXe@SjD9ZS/aJg/:6CL`.9;j'grr5%9$iX)1iU?C^djVLDOCbi6d[!G!Dhh$J:#j(0]8qo@@M1uLrTc$:IS'J#WOP(!T4:38e2D^O.^Uo%).#H<Zf8pLB'O`rls["LP^L.%DXB0LP>S'#SCAZ=,L(msSn2_$oIOM<Tp,Hs,5YN?,rP,4ZF:$%#(Vn%"TFt7Y+M)\`?P`h:6e5Xg]4e,jM"P=_BA7cKJQ#.,j#LJ%oUUXD$2RCsY=$uT$#[jC4bbtG5$km$22WRCSSF<@''M!9"qAfs;PLfe\"+X[H<\[>a19*D;;SR=h[AtG3",pZ!VI,_*BV%=3%(u?%=gC>7m,Y2lN_V4DOR@pE!eB\u7g6DT6-9lU/+Rl/,"BZfS:L[\%Ciit>=99%MAn!.iIhW6VP%`q'2$:<GQL_4gI&>@">-mTF@MQY%Tl`g0G!dIA(>Zs.!9%7iM8CDROtMUU32.Ban1[9T)=E(=)"^+QHUo&$0GK?u\g9^1C7F8F:!g'@P&4dBB4'e'&,hYcGUiZTD2#[B%q:PA0-m'.ILORM[pEoLT6eTC;b"(-jN/"Ul-:3]@asIN8IL7H_SE&H/\VTA(PZ^j7pEmUQ0_]2'38!5MRD+5lDb`n,j50!r$00m,%"-d[qd+/8?;hF4IK#L#i0*QA$Yr%'CK:W3SDQN/]jgLEAjLBip/!A](Z#^>?K,t*MP<bXucH0>Rm#ZJ_fINCPLsd*a9qmIqpKTZD%O;KpQ:P(]Q@(5,XGMjhlSi_a:'@.[%[>O/0eeTI@k<]t.DkriP_\(;`8Ss<+7md5$]&s]&LW!0aBLHtf4O0A_.*tpiG>tSM;;DX(%F/XH*JTZbe7?2@`]7H"Ie3,1_m3e%:fnkUONZ?@QlCMuW*?lnGr$SE^4)R%/*=3TEef?UO,-3kLSK-r1ES%b+>QIZ3_7JYUF*Q3d%"ftq4rPZ:"rIn9uU!\O8'?#!e>8X[[h2YtI/Pb$1JlMK]PCr2P-6C%8PNOMFerB&8*U6BD2?e4Na72]CF#QRd\s$dg#$@DF'Tq[h%SNTMcqo0\O](8YQnEbG5$$A>5/uj89R-7(b(2#1ogU"Btl./lWA@e=E-e%I.NlcBQP=%jO4n#Y;mX1K\4Nh%V]!L.L7!Eg,dIamI%7g)muLarQX0'XtoEu2MuKXm!@k&A5[$g*afi';KH_qa#U6nGh9#*NjqHICS;lo&6hDV$8'];WCXb[$G7=YMc=m>c55KT*dXMg!Di%aR'q"&EL!?gIQ@+CN>!]*,1>kp-d40\Ldn4,\AH#r@F&B'%r!DCe'5lb&h1(4Z,&>mcl79!HE1_5n%rP/e2Yuoi0q\*UX`a?1m36%j0!^u6upmb2[Ycg\^1J"gBIY2\:##&6/50t&2ESrU=N'kmC>QD4#Tlk^2paaID4dP,NnHNEC\=''B>*I6o,8/1a[tS*1LU!#0@n?%%ETWu[>7BAW3&KVElY&n(eO.o3HL><;%r%:\RS^-!Im(PD/Y-D[YU>iiS:\.'FTdX:?2)%+uU')3f^lXlum&_C^9bN,e'2.+Lah[%"M*LA3QA0%Qt+p!M4NXl\Ogd2IK-+QUMk0nmY!lGDjT?d_WCNlI)4+XT:Tua:iD`#\1STbAUSueLV&W9rq5^$h*9`_Qg]Clo%q.<%^%p76+oLrls*fFmrc.$Ys7Y.+a$5(EdF69G>3XG4O5GEWdGt6jb2EoEqu#]b5>VnEDiPpRp#PorNugK1o[tTfIXOb:E-F7.oCkG[%X'bl>iK&JFprC-;HGrNnQ_-t!pa=:8hKs?gr9J!!ClQR!+aigFTA*I1Sl%4$P)0(`cKBG^qp4;+5J+Yd>K?DcEuBttmuKhcUas2q%3u,-.`Gf(_[_3_P`ueNE[WOkqH6''=;5NS>>bD&PRp(7:"gr[N-19mNX)l&2H!XaJ0>#ZAmB2JHkA.`jq;pLRCX-8bF"4Bg3W760%nGD(kBUk,"Xr^;W\G.S8f0(2*6e:ul6U.]_YN917hT5(_=eC4o!OJi=OgrAKT@5`4S*M02<GULa0sibr,WUShEBK!Gl%cbjT$,oV%UhjJ3&*Jilb0_[iO(?7RI`ig(s5Q>*rL5s3dE_/omsR<T9427VD>Q:O7rdj!q:ffepr=JX`)dt\n:PBtKmh\R5&GF!a/@1.I&ij.%8(,i^5\<F3\,:7DnOHmT<C^>B*&"pDd`p5X%cR7HErV>O+@!Vfj+B;JHM78,TD\!M-Vp?sHM3-3DJsplh+9%;s81ZWdBd8<n,Dg3%DuJs&T7?^DVp?FoeaFNeH/jN8F.'f=ZcA+J0&M*CmJZVLVn[ZVm.oau:Hs@"d:\f<IIc]bT:=u1GkhusG96c3'MI=jXS0t9Iqr5]%I>QMcT0@c(oM\]d_=@P,Glb\"GieR@]^s%Q2r8kmI.6/D+2.:0&!*@]eR..Gn]"?HrVH%K5C<%E_rGBR^]*TIs*K-=o]4+JjQ#,=%7kVQ*p@tuS>)t>/IJia36ZW*Xl>O?*j.H8:h>[_W+,;T~>%AI9_PrivateDataEnd